---
openapi: "3.0.1"
info:
  title: "ShootProof Studio Panel API"
  termsOfService: "https://www.shootproof.com/legal/terms-of-use"
  contact:
    name: "ShootProof Support"
    url: "https://help.shootproof.com/"
    email: "support@shootproof.com"
  version: "v1.0.0"
servers:
- url: "https://api.shootproof.com/studio"
  description: "ShootProof Studio Panel API"
security:
- shootProofAuth:
  - "studio"
tags:
- name: "Authenticated User"
  description: "The [Authenticated User](https://developer.shootproof.com/reference/studio/components/schemas/authenticated-user/)\n\
    is the user who granted your app access to their ShootProof account. Using\nthe\
    \ Authenticated User’s credentials, your app can manage their account\nand more\
    \ through the ShootProof API."
- name: "Brands"
  description: "Each studio has one or more [*brands*](https://developer.shootproof.com/reference/studio/components/schemas/brand-collection/)\n\
    with ShootProof. It all depends on how they choose to organize their\nbusinesses.\
    \ Some studios have a single brand, under which all their business\ntakes place.\
    \ Others like to separate the types of business they engage in\nunder separate\
    \ brands (i.e. portraits, weddings, etc.). They may use these\nbrands to communicate\
    \ with and sell to different customers.\n\nNo matter how a studio chooses to use\
    \ ShootProof—whether through one brand\nor many—your app will manage most of a\
    \ studio’s data through brands.\nContacts, contracts, events, invoices, orders,\
    \ and more are all handled\nthrough a brand."
- name: "Contacts"
  description: "[Brands](https://developer.shootproof.com/reference/studio/brands/)\
    \ need\nto keep up with their customers, whether those customers have scheduled\
    \ a\nsession or purchased the photos of a family member. They do this by managing\n\
    [contacts](https://developer.shootproof.com/reference/studio/components/schemas/contact-collection/).\n\
    Contacts can be attached to events, contracts, invoices, and more."
- name: "Contracts"
  description: "[Brands](https://developer.shootproof.com/reference/studio/brands/)\
    \ use\n[*contracts*](https://developer.shootproof.com/reference/studio/components/schemas/contract-collection/)\n\
    for a variety of reasons and situations. ShootProof provides a flexible\napproach\
    \ to contracts, allowing studios to choose when and if they need\nthem, as well\
    \ as attaching them to invoices and associating\n[contacts](https://developer.shootproof.com/reference/studio/contacts/)\n\
    to them."
- name: "Email"
  description: "ShootProof helps [brands](https://developer.shootproof.com/reference/studio/brands/)\n\
    keep in touch with their customers through sending [*email messages*](https://developer.shootproof.com/reference/studio/components/schemas/studio-to-client-email/)\n\
    to event visitors, contacts attached to an event or invoice, and more.\n\nIn addition\
    \ to sending email messages on demand, ShootProof allows brands\nto set up automated\
    \ emails that are sent whenever certain activities take\nplace, and each brand\
    \ has full control over when these are sent and for\nwhat activities they are\
    \ sent."
- name: "Events"
  description: "[*Events*](https://developer.shootproof.com/reference/studio/components/schemas/event-collection/)\n\
    are the heart of a [brand’s](https://developer.shootproof.com/reference/studio/brands/)\n\
    business. Every time a photographer photographs a client—that’s an event.\n\n\
    You may not see the word “event” used around the ShootProof user interface,\n\
    though. That’s because another word for an “event” is “gallery.” Galleries\nand\
    \ albums within those galleries are how brands showcase an event to their\nclients,\
    \ and it’s through galleries that clients buy prints from their\nphotographer.\n\
    \nEvents have varying requirements. Most have shoot dates. Many have\nexpiration\
    \ dates. Some allow visitors to pre-register so they can be\ninformed when the\
    \ gallery is ready. Events may be for a single person and\ntheir family or many\
    \ different people (e.g. sporting events, recitals,\netc.). ShootProof provides\
    \ the flexibility a brand needs to work with\nclients of all types."
- name: "Invoices"
  description: "ShootProof provides [*invoicing*](https://developer.shootproof.com/reference/studio/components/schemas/invoice-collection/)\n\
    to help studios manage the business of their [brands](https://developer.shootproof.com/reference/studio/brands/).\n\
    Through invoicing, a brand can set up any fee structure and payment schedule,\n\
    event allowing one or more parties to pay on the same invoice."
- name: "Music"
  description: "Beautiful galleries deserve the right mix of music for the occasion,\
    \ and\nShootProof has [partnered with Triple Scoop Music](https://www.shootproof.com/features/triple-scoop-music)\n\
    to help studios set the right tone for their [brands](https://developer.shootproof.com/reference/studio/brands/)\n\
    and [events](https://developer.shootproof.com/reference/studio/events/).\n\nThrough\
    \ the ShootProof API, you can help studios manage their music\nplaylists, as well\
    \ as access the studio’s music streams from your app."
- name: "Orders"
  description: "A major part of a [brand’s](https://developer.shootproof.com/reference/studio/brands/)\n\
    business is handling [*orders*](https://developer.shootproof.com/reference/studio/components/schemas/order-collection/).\n\
    Together with [invoices](https://developer.shootproof.com/reference/studio/invoices/),\n\
    orders are how ShootProof helps photography studios grow sustainable\nbusinesses.\
    \ Through the ShootProof API, your app can provide tools to help\nphotographers\
    \ manage and fulfill orders."
  x-beta: true
- name: "Other"
  description: "There are a handful of things you can do through the ShootProof API\
    \ that\ndon’t fit in with any of the other categories, so we’ve listed them here."
- name: "Price Sheets"
  description: "Studios set up prices for an [event’s](https://developer.shootproof.com/reference/studio/events/)\n\
    products through [price sheets](https://developer.shootproof.com/reference/studio/components/schemas/price-sheet-collection/),\n\
    which may or may not be tied to a [lab catalog](https://developer.shootproof.com/reference/studio/components/schemas/lab-catalog/).\n\
    The ShootProof API allows your app to help photography studios manage\nprice sheets\
    \ and attach them to events."
- name: "Service Description"
  description: "The [service description](https://developer.shootproof.com/guide/service-description/)\n\
    is the gateway to the ShootProof API. It provides your app with the information\n\
    it needs to know what it can do within the ShootProof API. It does so by\nproviding\
    \ [links](https://developer.shootproof.com/guide/hypermedia/). Your\napp uses\
    \ these links to navigate the ShootProof API."
components:
  securitySchemes:
    shootProofAuth:
      type: "oauth2"
      flows:
        authorizationCode:
          authorizationUrl: "https://auth.shootproof.com/oauth2/authorization/new"
          tokenUrl: "https://auth.shootproof.com/oauth2/authorization/token"
          refreshUrl: "https://auth.shootproof.com/oauth2/authorization/token"
          scopes:
            studio: "read and write access to your Studio Panel data"
  schemas:
    Address:
      description: "An address."
      type: "object"
      required:
      - "type"
      - "country"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "address"
        name:
          description: "The name of the addressee."
          nullable: true
          type: "string"
          maxLength: 50
        addressLine1:
          description: "The first line of the address."
          nullable: true
          type: "string"
          maxLength: 100
        addressLine2:
          description: "The second line of the address, if applicable."
          nullable: true
          type: "string"
          maxLength: 100
        city:
          description: "The city for this address."
          nullable: true
          type: "string"
          maxLength: 50
        state:
          description: "The state for this address."
          nullable: true
          type: "string"
        stateOther:
          description: "The `state` property is validated against known states/provinces\
            \ of all\ncountries. If this address does not have a standard state/province\n\
            abbreviation, use the `stateOther` property when creating or updating\n\
            addresses.\n\n*This property is write-only. It is not available in responses.*"
          nullable: true
          type: "string"
          writeOnly: true
          maxLength: 50
        zip:
          description: "The postal code for this address."
          oneOf:
          - type: "string"
          - type: "integer"
          nullable: true
          maxLength: 10
        country:
          description: "The country code for this address."
          type: "string"
          minLength: 2
          maxLength: 2
    AuthenticatedUser:
      allOf:
      - title: "Authenticated User"
        description: "The authenticated user."
        properties:
          isStudioOwner:
            description: "Whether the authenticated user is the owner of the studio."
            type: "boolean"
            readOnly: true
          signature:
            $ref: "#/components/schemas/Signature"
          studio:
            allOf:
            - description: "The studio to which the authenticated user belongs."
              readOnly: true
            - $ref: "#/components/schemas/Studio"
      - $ref: "#/components/schemas/User"
    BaseImage:
      title: "Image"
      type: "object"
      properties:
        type:
          description: "The resource type"
          type: "string"
          enum:
          - "image"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The original filename of the image."
          type: "string"
          maxLength: 250
          example: "my-file.jpg"
        mimeType:
          description: "The image file MIME type."
          type: "string"
          readOnly: true
          nullable: true
          example: "image/jpeg"
        width:
          description: "The width in pixels of the image."
          type: "integer"
          readOnly: true
          example: 2400
        height:
          description: "The height in pixels of the image."
          type: "integer"
          readOnly: true
          example: 3000
        filesize:
          description: "The original filesize of the image (in bytes)."
          type: "integer"
          readOnly: true
          example: 18452563
        displayUrl:
          allOf:
          - description: "Display URLs for this image."
            nullable: true
            readOnly: true
          - $ref: "#/components/schemas/ImageDisplayUrl"
        created:
          description: "The creation date of the image."
          type: "string"
          format: "date-time"
          readOnly: true
    BasicEmailMessage:
      description: "A basic email message."
      type: "object"
      required:
      - "type"
      - "subject"
      - "body"
      properties:
        type:
          allOf:
          - enum:
            - "email"
          - $ref: "#/components/schemas/Type"
        subject:
          description: "The subject line for the email message."
          type: "string"
          maxLength: 200
        body:
          description: "The message to include in the body of the email."
          type: "string"
          maxLength: 10000
        recipientEmails:
          description: "Email address(es) to send the email to. If provided, must\
            \ be an\narray of valid email addresses. Optional, but may be required\
            \ by\nchild schemas."
          type: "array"
          items:
            type: "string"
    BatchCollection:
      description: "A collection of batch resources to be updated."
      type: "object"
      required:
      - "type"
      - "items"
      properties:
        type:
          description: "The model type for the collection object (i.e., `event-collection`)."
          type: "string"
        items:
          description: "A collection of one or more batched resources. If `items`\
            \ is `null`\nor an empty array, no action is taken."
          type: "array"
          items:
            description: "A batched resource representing one or more resources to\
              \ which\nthese changes should apply."
            type: "object"
            required:
            - "type"
            - "id"
            properties:
              type:
                description: "The type of resource represented (i.e., `event`)."
                type: "string"
              id:
                description: "Identifies one or more resources for which changes may\
                  \ be\napplied. This property accepts several different types of\n\
                  values:\n\n* `[]`: If the `id` property is an empty array, then\
                  \ the\nchanges will apply to all resources applicable to the context\n\
                  of the operation.\n* `number[]`: If the value is an array of integers,\
                  \ then the\nchanges will apply to each of the resources identified\
                  \ by the\nnumbers. If any of these numbers are negative (i.e., prefixed\n\
                  with a minus sign, `-`), the changes will not apply to\nresources\
                  \ identified by those numbers, even if the same number\nis present\
                  \ in the array in its positive form.\n* `null` or _not present_:\
                  \ An undefined state. The changes\nwill not be applied to any resources.\n\
                  \nThis functionality allows a great degree of flexibility to\nbatch\
                  \ processing of API resources. We can ask that the changes\nbe applied\
                  \ to all resources for the given `type` by providing\nan empty array.\
                  \ We can apply the changes to all resources\nexcept a few (e.g.,\
                  \ `\"id\": [-45, -76, -32]`). We can apply the\nchanges to some\
                  \ resources, but not others (e.g., `\"id\": [-32,\n56, 45, -6, 18,\
                  \ 32]`—in this example, the changes will not be\napplied to the\
                  \ resource identified by `32`)."
                type: "array"
                items:
                  description: "A positive or negative integer, identifying a resource\
                    \ to\nwhich these changes should or should not (denoted by the\n\
                    minus sign) apply."
                  type: "number"
    Brand:
      title: "Brand"
      description: "A brand."
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "brand"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this brand."
          type: "integer"
        name:
          description: "The name of this brand."
          type: "string"
        email:
          description: "The email address for this brand."
          type: "string"
          format: "email"
        phone:
          description: "The phone number for this brand."
          type: "string"
        website:
          description: "The URL for this brand's website."
          format: "uri"
          nullable: true
          type: "string"
        address:
          allOf:
          - description: "The mailing address for this brand."
            nullable: true
          - $ref: "#/components/schemas/Address"
        isDefault:
          description: "Whether this is the default brand for the logged-in user's\
            \ studio."
          type: "boolean"
        subdomain:
          description: "The ShootProof subdomain for this brand."
          type: "string"
        customDomain:
          description: "A custom domain for this brand, if applicable."
          format: "hostname"
          nullable: true
          type: "string"
        galleryDomain:
          description: "The domain for this brand's galleries."
          type: "string"
          format: "uri"
        facebookFanPageUrl:
          description: "The URL for this brand's Facebook fan page."
          format: "uri"
          nullable: true
          type: "string"
        twitterHandle:
          description: "The Twitter username for this brand."
          nullable: true
          type: "string"
        instagramUsername:
          description: "The Instagram username for this brand."
          nullable: true
          type: "string"
        homepageBrandThemeId:
          description: "The identifier for this brand's homepage brand theme."
          type: "integer"
        homepageBrandTheme:
          $ref: "#/components/schemas/BrandTheme"
        useDefaultWatermark:
          description: "Whether or not the Brand's default watermark should be applied\
            \ at\nupload time."
          type: "boolean"
        locale:
          description: "The locale defined for this brand."
          type: "string"
        taxIdentifier:
          description: "The tax ID defined for this brand."
          nullable: true
          type: "string"
        taxMethod:
          description: "The tax method for this brand."
          nullable: true
          type: "string"
          enum:
          - "exclusive"
          - "inclusive"
        labCatalogs:
          title: "Lab Catalog"
          description: "An array of lab catalogs to which this brand has access."
          type: "array"
          items:
            $ref: "#/components/schemas/LabCatalog"
        created:
          description: "The creation date of this brand."
          type: "string"
          format: "date-time"
        automationSendHour:
          description: "The hour during which email automations for this brand will\
            \ be sent, relative to the brand's time zone."
          type: "integer"
          minimum: 0
          maximum: 23
    BrandCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - properties:
          type:
            enum:
            - "brand-collection"
          items:
            title: "Brand"
            type: "array"
            items:
              $ref: "#/components/schemas/Brand"
    BrandLogo:
      allOf:
      - title: "Brand Logo"
        properties:
          type:
            enum:
            - "brand-logo"
      - $ref: "#/components/schemas/BaseImage"
    BrandTheme:
      description: "A brand theme."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "brand-theme"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier of this brand theme."
          type: "integer"
        name:
          description: "The name of this brand theme."
          type: "string"
        emailBrandLogo:
          description: "The brand logo for use in email messages (and any other place\
            \ using\na white/neutral background such as contracts and invoices)."
          allOf:
          - $ref: "#/components/schemas/BrandLogo"
          - nullable: true
        eventBrandLogo:
          description: "The brand logo for use in event presentation."
          allOf:
          - $ref: "#/components/schemas/BrandLogo"
          - nullable: true
        colorScheme:
          description: "The color scheme for this brand theme.\n\n| ShootProof Identifier\
            \ | Description |\n| --------------------- | ----------- |\n| `dark` |\
            \ A \"dark\" color scheme should be used when displaying this brand theme.\
            \ |\n| `light` | A \"light\" color scheme should be used when displaying\
            \ this brand theme. |"
          type: "string"
          enum:
          - "dark"
          - "light"
        fontSet:
          description: "The font set for this brand theme.\n\n| ShootProof Identifier\
            \ | Primary Font Name | Secondary Font Name | Body Font Name |\n| ---------------------\
            \ | ----------------- | ------------------- | -------------- |\n| `brandon`\
            \ | Brandon | Brandon | Baskerville |\n| `freeland` | ProximaNova | Freeland\
            \ | ProximaNova |\n| `baskerville` | Baskerville | Baskerville | OpenSans-Regular\
            \ |\n| `blooming-elegant` | BloomingElegant-Regular | BloomingElegant-Regular\
            \ | Brandon |\n| `bambusa-pro-regular` | BambusaPro-Regular | BambusaPro-Regular\
            \ | OpenSans-Regular |\n| `scandiebox-one` | SBOne | SBOne | OpenSans-Regular\
            \ |"
          type: "string"
          enum:
          - "brandon"
          - "freeland"
          - "baskerville"
          - "blooming-elegant"
          - "bambusa-pro-regular"
          - "scandiebox-one"
        primaryColor:
          description: "The primary hex color code for this brand theme."
          type: "string"
          example: "777777"
        secondaryColor:
          description: "The secondary hex color code for this brand theme."
          type: "string"
          example: "ffffff"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    BrandThemeCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - type: "object"
        description: "A collection of brand themes"
        properties:
          type:
            enum:
            - "brand-theme-collection"
          items:
            type: "array"
            items:
              $ref: "#/components/schemas/BrandTheme"
    BrandWatermark:
      title: "Brand Watermark"
      description: "A brand watermark."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "watermark"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier of this brand watermark."
          type: "integer"
        name:
          description: "The name of this brand watermark."
          type: "string"
        isDefault:
          description: "Denotes whether this is the brand's default watermark"
          type: "boolean"
        created:
          description: "Datetime of creation"
          type: "string"
          format: "date-time"
    Contact:
      allOf:
      - title: "Brand Contact"
        required:
        - "type"
        - "email"
        - "name"
        description: "A contact that belongs to a brand."
        properties:
          brandId:
            allOf:
            - description: "When creating a contact, a `brandId` may be provided to\
                \ create\nthe contact under a different brand.\n\n*This is deprecated\
                \ in favor of using the other brand's contact\ncollection resource\
                \ to create contacts for the brand.*"
              writeOnly: true
              deprecated: true
            - $ref: "#/components/schemas/Id"
          address:
            allOf:
            - description: "The address for this contact."
              nullable: true
            - $ref: "#/components/schemas/Address"
          birthDate:
            description: "The date on which this contact was born."
            type: "string"
            format: "date"
            nullable: true
          birthDateDisplay:
            description: "The date on which this contact was born, properly formatted\
              \ according to the brand’s locale."
            type: "string"
            format: "date"
            readOnly: true
          notes:
            description: "Notes made by the studio about this contact."
            type: "string"
            nullable: true
          referringContactId:
            allOf:
            - description: "The identifier for the contact who referred this contact."
              nullable: true
            - $ref: "#/components/schemas/Id"
          referringContact:
            allOf:
            - description: "The contact who referred this contact."
              nullable: true
              readOnly: true
            - $ref: "#/components/schemas/ContactMinimal"
          refereeContacts:
            title: "Contact"
            description: "Contacts that have been referred by this contact."
            type: "array"
            items:
              $ref: "#/components/schemas/ContactMinimal"
            readOnly: true
          tags:
            description: "Tags describing this contact."
            type: "array"
            uniqueItems: true
            items:
              type: "string"
          created:
            description: "The date on which this contact was created"
            type: "string"
            format: "date-time"
            readOnly: true
          resourceCounts:
            type: "object"
            properties:
              numContracts:
                description: "The number of contracts with which this contact is associated."
                type: "integer"
              numInvoices:
                description: "The number of invoices with which this contact is associated."
                type: "integer"
              numEvents:
                description: "The number of events with which this contact is associated."
                type: "integer"
            readOnly: true
      - title: "Base Contact"
        description: "The base definition for a contact."
        type: "object"
        properties:
          type:
            allOf:
            - enum:
              - "contact"
            - $ref: "#/components/schemas/Type"
          links:
            $ref: "#/components/schemas/Links"
          id:
            $ref: "#/components/schemas/Id"
          name:
            description: "The full name for this contact."
            type: "string"
            nullable: true
          firstName:
            description: "The first name for this contact."
            type: "string"
            nullable: true
          lastName:
            description: "The last name for this contact."
            type: "string"
            nullable: true
          email:
            description: "The email address for this contact."
            type: "string"
            format: "email"
          phone:
            description: "The phone number for this contact."
            oneOf:
            - type: "string"
            - type: "integer"
            nullable: true
          businessName:
            description: "The name for the business with which this contact is associated."
            type: "string"
            nullable: true
          thirdPartyId:
            description: "The identifier for this contact in the source system from\
              \ which it\noriginated."
            oneOf:
            - type: "integer"
            - type: "string"
            nullable: true
          created:
            description: "The date on which this contact was created"
            type: "string"
            format: "date-time"
            readOnly: true
    ContactCollection:
      allOf:
      - title: "Collection of Contacts"
        properties:
          type:
            enum:
            - "contact-collection"
          items:
            title: "Contact"
            type: "array"
            items:
              $ref: "#/components/schemas/Contact"
      - $ref: "#/components/schemas/List"
    ContactCollectionMinimal:
      allOf:
      - title: "Collection of Contacts"
        properties:
          type:
            enum:
            - "contact-collection"
          items:
            title: "Contact"
            type: "array"
            items:
              $ref: "#/components/schemas/ContactMinimal"
      - $ref: "#/components/schemas/List"
    ContactEmail:
      allOf:
      - title: "Contact Email Message"
        description: "An email message to a contact."
        required:
        - "contactId"
        properties:
          contactId:
            allOf:
            - description: "The identifier for the contact to whom the email message\
                \ should\nbe sent."
            - $ref: "#/components/schemas/Id"
      - $ref: "#/components/schemas/StudioToClientEmail"
    ContactMinimal:
      title: "Contact"
      description: "A minimal representation of a contact."
      type: "object"
      properties:
        type:
          allOf:
          - enum:
            - "contact"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The full name for this contact."
          type: "string"
          nullable: true
        firstName:
          description: "The first name for this contact."
          type: "string"
          nullable: true
        lastName:
          description: "The last name for this contact."
          type: "string"
          nullable: true
        email:
          description: "The email address for this contact."
          type: "string"
          format: "email"
        phone:
          description: "The phone number for this contact."
          oneOf:
          - type: "string"
          - type: "integer"
          nullable: true
        address:
          allOf:
          - description: "The address for this contact."
            nullable: true
          - $ref: "#/components/schemas/Address"
    ContactRecentActivity:
      title: "Contact Recent Activity"
      description: "The recent activity for a contact."
      type: "object"
      properties:
        type:
          allOf:
          - enum:
            - "contact-recent-activity"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        activityType:
          description: "Human-readable description of the type of activity."
          type: "string"
        relevantId:
          $ref: "#/components/schemas/Id"
        customInvoiceId:
          description: "Identifier of the custom invoice related to this activity."
          type: "integer"
          nullable: true
        activityDate:
          description: "The date on which this activity took place."
          type: "string"
          format: "date-time"
          nullable: true
    ContactRecentActivityCollection:
      allOf:
      - title: "Collection of Recent Activity for a Contact"
        properties:
          type:
            enum:
            - "contact-recent-activity-collection"
          items:
            title: "Contact Recent Activity"
            type: "array"
            items:
              $ref: "#/components/schemas/ContactRecentActivity"
      - $ref: "#/components/schemas/List"
    Contract:
      title: "Contract"
      type: "object"
      required:
      - "type"
      - "name"
      - "brandThemeId"
      - "contactIds"
      - "bodyHtml"
      - "expirationDate"
      - "languageCode"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract"
        links:
          allOf:
          - $ref: "#/components/schemas/Links"
          - readOnly: true
        id:
          $ref: "#/components/schemas/Id"
        publicId:
          description: "The public identifier for this contract (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
          readOnly: true
        name:
          description: "The name for this contract."
          type: "string"
        contractTemplateId:
          allOf:
          - $ref: "#/components/schemas/Id"
          - nullable: true
        contractTemplate:
          allOf:
          - $ref: "#/components/schemas/ContractTemplate"
          - readOnly: true
        contactIds:
          description: "An array of unique contact ids to link to contract"
          type: "array"
          writeOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Id"
        brandThemeId:
          $ref: "#/components/schemas/Id"
        brandTheme:
          allOf:
          - $ref: "#/components/schemas/BrandTheme"
          - readOnly: true
        contacts:
          allOf:
          - $ref: "#/components/schemas/ContactCollectionMinimal"
          - description: "A collection of contacts associated with this contract"
            readOnly: true
        bodyHtml:
          description: "The HTML body of the contract."
          type: "string"
        bodyContainsMagicBlank:
          description: "Indicates if the HTML body of the contract contains one or\
            \ more\n'magic blank' placeholder strings."
          type: "boolean"
          readOnly: true
        contractStatus:
          title: "Contract Status"
          description: "The current status of the contract.\n\n| Status | Description\
            \ |\n| ------ | ----------- |\n| `draft` | The contract is a draft and\
            \ has not been sent to the client. |\n| `awaiting-client-signature` |\
            \ The contract has been sent to the client and is awaiting their signature.\
            \ |\n| `awaiting-studio-countersign` | The client has signed the contract,\
            \ and it is ready for the studio to countersign. |\n| `completed` | The\
            \ client and studio have both signed the contract. |\n| `canceled` | The\
            \ studio has canceled the contract. |\n| `expired` | The expiration date\
            \ specified on the contract has passed while the contract was in the `draft`\
            \ or `awaiting-client-signature` states. |"
          type: "string"
          enum:
          - "draft"
          - "awaiting-client-signature"
          - "awaiting-studio-countersign"
          - "completed"
          - "canceled"
          - "expired"
        isHidden:
          description: "Whether the contract has been marked 'hidden'."
          type: "boolean"
        isEditable:
          description: "Whether the contract is able to be edited."
          type: "boolean"
        shootDate:
          description: "This contract covers a photo shoot or event that took place\
            \ on this\ndate."
          type: "string"
          format: "date-time"
          nullable: true
        expirationDate:
          description: "The date on which this contract expires."
          type: "string"
          format: "date-time"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in this\n\
            contract."
          type: "string"
          example: "en_US"
        created:
          description: "The creation date of this contract."
          type: "string"
          format: "date-time"
          readOnly: true
        activity:
          title: "Contract Activity"
          description: "A list of activities that have occurred with this contract."
          type: "array"
          items:
            $ref: "#/components/schemas/ContractActivity"
          readOnly: true
        signatureStudio:
          allOf:
          - description: "The contract signature for the studio."
            readOnly: true
            nullable: true
          - $ref: "#/components/schemas/ContractSignature"
        signatureClient:
          allOf:
          - description: "The contract signature for the client."
            readOnly: true
            nullable: true
          - $ref: "#/components/schemas/ContractSignature"
        invoices:
          title: "Invoice"
          description: "An array of linked invoices."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceMinimal"
          readOnly: true
        cancelationMessage:
          description: "Optional cancelation message to include in studio-to-client\
            \ email\nsent when contract status moves to canceled state. As of this\n\
            writing, value only used on `PATCH` requests."
          type: "string"
          nullable: true
    ContractActivity:
      description: "Activity performed on a contract."
      type: "object"
      properties:
        contractActivityAction:
          description: "The type of activity.\n\n| Status | Description |\n| ------\
            \ | ----------- |\n| `studio-edited` | The contract was edited by the\
            \ studio. |\n| `sent-client` | The contract was sent to the client. |\n\
            | `client-viewed` | The client viewed the contract. |\n| `client-signed`\
            \ | The client signed the contract. |\n| `studio-signed` | The studio\
            \ signed the contract. |"
          type: "string"
          enum:
          - "studio-edited"
          - "sent-client"
          - "client-viewed"
          - "client-signed"
          - "studio-signed"
        created:
          description: "The date on which this activity took place."
          type: "string"
          format: "date-time"
    ContractCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "Collection of Contracts"
        properties:
          type:
            enum:
            - "contract-collection"
          items:
            title: "Contract"
            type: "array"
            items:
              $ref: "#/components/schemas/ContractInList"
    ContractEmail:
      allOf:
      - description: "An email message to a client about their contract."
      - $ref: "#/components/schemas/StudioToClientEmail"
    ContractInList:
      title: "Contract"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        publicId:
          description: "The public identifier for this contract (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        name:
          description: "The name for this contract."
          type: "string"
        contacts:
          description: "A collection of contacts associated with this contract"
          readOnly: true
          items:
            $ref: "#/components/schemas/ContactCollectionMinimal"
        bodyContainsMagicBlank:
          description: "Indicates if the HTML body of the contract contains one or\
            \ more\n*magic blank* placeholder strings."
          type: "boolean"
          readOnly: true
        expirationDate:
          description: "The date on which this contract expires."
          type: "string"
          format: "date-time"
        contractStatus:
          $ref: "#/components/schemas/Contract/properties/contractStatus"
        invoices:
          title: "Invoice"
          description: "An array of linked invoices."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceMinimal"
        created:
          description: "The creation date of this contract."
          type: "string"
          format: "date-time"
        isEditable:
          description: "Whether the contract is able to be edited."
          type: "boolean"
    ContractMinimal:
      title: "Contract"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        publicId:
          description: "The public identifier for this contract (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        name:
          description: "The name for this contract."
          type: "string"
        bodyContainsMagicBlank:
          description: "Indicates if the HTML body of the contract contains one or\
            \ more\n'magic blank' placeholder strings."
          type: "boolean"
        contractStatus:
          $ref: "#/components/schemas/Contract/properties/contractStatus"
        isHidden:
          description: "Whether the contract has been marked 'hidden'."
          type: "boolean"
        expirationDate:
          description: "The date on which this contract expires."
          type: "string"
          format: "date-time"
    ContractSignature:
      title: "Contract Signature"
      description: "A contract signature."
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract-signature"
        signatureType:
          description: "The type of signature.\n\n| Status | Description |\n| ------\
            \ | ----------- |\n| `studio` | The signature was created by the studio.\
            \ |\n| `client` | The signature was created by the client. |"
          type: "string"
          enum:
          - "studio"
          - "client"
        publicId:
          description: "The public identifier for this contract signature. This is\
            \ used on\nall public screens and printable views of the contract as a\n\
            transaction identifier."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        ipAddress:
          description: "The IP address of the user agent recording the signature."
          type: "string"
          format: "ipv4"
        userAgent:
          description: "The full user agent identifier string of the user agent recording\n\
            the signature."
          type: "string"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
        signature:
          $ref: "#/components/schemas/Signature"
    ContractTemplate:
      title: "Contract Template"
      type: "object"
      required:
      - "type"
      - "name"
      - "brandThemeId"
      - "bodyHtml"
      - "languageCode"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract-template"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name for this contract template."
          type: "string"
        brandThemeId:
          $ref: "#/components/schemas/Id"
        brandTheme:
          allOf:
          - readOnly: true
          - $ref: "#/components/schemas/BrandTheme"
        bodyHtml:
          description: "The HTML body of the contract template."
          type: "string"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in this\n\
            contract template."
          type: "string"
          example: "en_US"
        created:
          description: "The creation date of this contract template."
          type: "string"
          format: "date-time"
          readOnly: true
    ContractTemplateCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "Collection of Contract Templates"
        properties:
          type:
            enum:
            - "contract-template-collection"
          items:
            title: "Contract Template"
            type: "array"
            items:
              $ref: "#/components/schemas/ContractTemplateInList"
    ContractTemplateInList:
      title: "Contract Template"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "contract-template"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name for this contract template."
          type: "string"
        created:
          description: "The creation date of this contract template."
          type: "string"
          format: "date-time"
    CoverPhoto:
      description: "A cover photo."
      allOf:
      - type: "object"
        required:
        - "type"
        - "focalPointPercentages"
        - "coverPhotoStatus"
        - "coverPhotoType"
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "cover-photo"
          photoId:
            description: "If using an existing event photo as the cover photo, the\
              \ identifier\nfor the event photo."
            type: "integer"
            writeOnly: true
            nullable: true
          coverPhotoStatus:
            description: "The current status of this cover photo."
            type: "string"
            enum:
            - "active"
            - "pending"
            - "deleted"
            readOnly: true
          coverPhotoType:
            description: "The slug string name of the cover photo type."
            type: "string"
            enum:
            - "event"
            - "event-album"
            readOnly: true
          focalPointPercentages:
            description: "A pair of x,y coordinates on a rectangular coordinate system,\n\
              defining a focal point to use when rendering the cover photo.\nThese\
              \ numbers represent percentages and not fixed pixels."
            type: "object"
            required:
            - "x"
            - "y"
            properties:
              x:
                description: "The x-coordinate for the focal point, as a percentage.\
                  \ (i.e.\n`(x / width) * 100`)"
                type: "number"
              "y":
                description: "The y-coordinate for the focal point, as a percentage.\
                  \ (i.e.\n`(y / height) * 100`)"
                type: "number"
      - $ref: "#/components/schemas/BaseImage"
    CreditCard:
      title: "Credit Card"
      description: "A credit card."
      type: "object"
      required:
      - "type"
      - "nameOnCard"
      - "cardNumber"
      - "cardType"
      - "expirationMonth"
      - "expirationYear"
      - "cvvCode"
      - "billingPostalCode"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "credit-card"
        nameOnCard:
          description: "The card-holder name."
          type: "string"
        cardNumber:
          description: "The card number (masked in responses)."
          type: "string"
        cardType:
          description: "The type of credit card."
          type: "string"
          enum:
          - "amex"
          - "discover"
          - "mastercard"
          - "visa"
          readOnly: true
        expirationMonth:
          description: "The card expiration month."
          oneOf:
          - type: "string"
          - type: "integer"
        expirationYear:
          description: "The card expiration year."
          oneOf:
          - type: "string"
          - type: "integer"
        cvvCode:
          description: "The card CVV/CVC/CSC code."
          oneOf:
          - type: "string"
          - type: "integer"
          writeOnly: true
        billingPostalCode:
          description: "The billing address postal code."
          type: "string"
          pattern: "^[A-Za-z0-9 -]{0,10}$"
    CuratedEmailAutomation:
      title: "Curated Email Automation"
      description: "A curated automated email message that should be sent to a specified\
        \ group of\nrecipients at a configured time."
      type: "object"
      required:
      - "type"
      - "name"
      - "emailTemplateId"
      - "sendType"
      - "sendTypeValue"
      - "recipientType"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "curated-email-automation"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name for this curated email automation."
          type: "string"
          example: "Gallery Expiring in 7 Days"
        emailTemplateId:
          allOf:
          - description: "The identifier for the email template to use with this email\
              \ automation."
            example: "b1c6d4d5-552e-47d2-8e3c-6c69bd73a338"
          - $ref: "#/components/schemas/Id"
        sendType:
          description: "When to send this automated email message.\n\nAPI validation\
            \ of the `sendType` is based on the `resourceType` of the\nemail template\
            \ specified by `emailTemplateId`. Refer to the following\ntable for details\
            \ on which values are acceptable for `sendType` and under\nwhich conditions\
            \ they are acceptable.\n\n| ShootProof Identifier | For Email Templates\
            \ With Resource Type | Description |\n| --------------------- | --------------------------------------\
            \ | ----------- |\n| `days-after-event-expiration-date` | `event` | Send\
            \ this email `sendTypeValue` number of days after the event expiration\
            \ date. |\n| `days-after-event-release-date` | `event` | Send this email\
            \ `sendTypeValue` number of days after the event release date. |\n| `days-after-event-shoot-date`\
            \ | `event` | Send this email `sendTypeValue` number of days after the\
            \ event shoot date. |\n| `days-after-final-payment-due` | `invoice` |\
            \ Send this email `sendTypeValue` number of days after the final payment\
            \ is due. |\n| `days-after-order-due-date`| `event` | Send this email\
            \ `sendTypeValue` number of days after the order due date. |\n| `days-before-event-expiration-date`\
            \ | `event` | Send this email `sendTypeValue` number of days before the\
            \ event expiration date. |\n| `days-before-final-payment-due` | `invoice`\
            \ | Send this email `sendTypeValue` number of days before the final payment\
            \ is due. |\n| `days-before-order-due-date` | `event` | Send this email\
            \ `sendTypeValue` number of days before the order due date. |"
          type: "string"
          enum:
          - "days-after-event-expiration-date"
          - "days-after-event-release-date"
          - "days-after-event-shoot-date"
          - "days-after-final-payment-due"
          - "days-after-order-due-date"
          - "days-before-event-expiration-date"
          - "days-before-final-payment-due"
          - "days-before-order-due-date"
        sendTypeValue:
          description: "Specifies the number of units (e.g., days, hours, etc.) to\
            \ use for the\nselected `sendType`."
          type: "integer"
        recipientType:
          description: "Who to send this automation email message to.\n\nAPI validation\
            \ of the `recipientType` is based on the `resourceType` of\nthe email\
            \ template specified by `emailTemplateId`. Refer to the following\ntable\
            \ for details on which values are acceptable for `recipientType` and\n\
            under which conditions they are acceptable.\n\n| ShootProof Identifier\
            \ | For Email Templates With Resource Type | Description |\n| ---------------------\
            \ | -------------------------------------- | ----------- |\n| `event-visitors-all`\
            \ | `event` | Send this email to all event visitors. |\n| `event-visitors-with-cart-items`\
            \ | `event` | Send this email to event visitors who have items in their\
            \ carts. |\n| `event-visitors-with-favorites` | `event` | Send this email\
            \ to event visitors who have favorited items in the event. |\n| `event-visitors-with-orders`\
            \ | `event` | Send this email to event visitors who **have** placed an\
            \ order. |\n| `event-visitors-without-orders` | `event` | Send this email\
            \ to event visitors who **have not** placed and order. |\n| `invoice-contact`\
            \ | `invoice` | Send this email to the contact(s) listed for the invoice.\
            \ |"
          type: "string"
          enum:
          - "event-visitors-all"
          - "event-visitors-with-cart-items"
          - "event-visitors-with-favorites"
          - "event-visitors-with-orders"
          - "event-visitors-without-orders"
          - "invoice-contact"
        copyStudioOnEmail:
          description: "Send a copy of this email message to the studio at the same\
            \ time it is\nsent to the recipients."
          type: "boolean"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    CuratedEmailAutomationGroup:
      title: "Curated Email Automation Group"
      description: "A curated automated email group created internally to assist studios\
        \ in creating their own email automations.\nThese resources can only be read\
        \ from the API."
      type: "object"
      required:
      - "type"
      - "name"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "curated-email-automation-group"
        id:
          $ref: "#/components/schemas/Id"
        links:
          $ref: "#/components/schemas/Links"
        name:
          description: "The name for this email automation group."
          type: "string"
          example: "My Wedding Automation"
        automations:
          title: "Email Automations"
          description: "A collection of automated email messages that should be sent\
            \ to a\nspecified group of recipients at a configured time."
          type: "array"
          items:
            $ref: "#/components/schemas/CuratedEmailAutomation"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    CuratedEmailAutomationGroupCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "Curated Email Automation Groups"
        properties:
          type:
            enum:
            - "curated-email-automation-group-collection"
          items:
            title: "Curated Email Automation Group"
            type: "array"
            items:
              $ref: "#/components/schemas/CuratedEmailAutomationGroup"
    DigitalRule:
      title: "Digital Rule"
      description: "A digital rule."
      type: "object"
      required:
      - "type"
      - "id"
      - "name"
      - "resolution"
      - "downloadAll"
      properties:
        type:
          description: "The type of object represented"
          type: "string"
          enum:
          - "digital-rule"
        id:
          description: "The identifier for this digital rule."
          type: "integer"
        name:
          description: "Human readable name for this digital rule."
          type: "string"
          maxLength: 100
        resolution:
          description: "Length, in pixels, of longest side of image resulting from\
            \ this\nrule. If `null`, the rule will deliver the original full size\n\
            resolution"
          type: "integer"
          nullable: true
        downloadAll:
          description: "Whether this rule allows for the bulk download of all images\
            \ in the\ngallery/album."
          type: "boolean"
        downloadPin:
          description: "The presence of a `downloadPin` requires PIN entry for free\
            \ digital\ndownloads. Must contain only digits."
          type: "string"
          minLength: 4
          maxLength: 8
          nullable: true
        requireDownloadPin:
          description: "Flag indicating whether the DigitalRule requires a `downloadPin`.\
            \ This\nallows rules derived from brand event defaults rules to inherit\
            \ the\nrequirement for a `downloadPin` from the brand event defaults rules."
          type: "boolean"
          default: false
          readOnly: true
        downloadLimit:
          description: "The maximum number of images a single user is allowed to download\n\
            from the gallery/album."
          type: "integer"
          nullable: true
        brandWatermarkId:
          description: "ID of the brand watermark that will be applied to each image\n\
            generated according to this rule"
          type: "integer"
          nullable: true
        brandWatermark:
          allOf:
          - nullable: true
            readOnly: true
          - $ref: "#/components/schemas/BrandWatermark"
        printRelease:
          description: "The print release that will be included with images generated\n\
            according to this rule."
          type: "string"
          maxLength: 7500
          nullable: true
        created:
          description: "The creation date of this digital rule."
          type: "string"
          format: "date-time"
          readOnly: true
    DigitalRuleCollection:
      title: "Digital Rules Collection"
      description: "A collection of digital rules."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object"
            type: "string"
            enum:
            - "digital-rule-collection"
          items:
            type: "array"
            title: "Digital Rule"
            description: "A list of digital rules."
            items:
              $ref: "#/components/schemas/DigitalRule"
      - $ref: "#/components/schemas/List"
    Dpa:
      x-internal: true
      title: "Data Processing Addendum"
      description: "A signed Data Processing Addendum (DPA) document. An `alternate`\
        \ link\nrelationship to a PDF for download is provided."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "dpa"
        links:
          allOf:
          - readOnly: true
          - $ref: "#/components/schemas/Links"
        id:
          description: "An identifier for this signed copy of the Data Processing\
            \ Addendum."
          type: "string"
          format: "uuid"
          readOnly: true
        ipAddress:
          description: "The IP address of the signatory."
          type: "string"
          format: "ipv4"
          readOnly: true
        userAgent:
          description: "The user agent identifier of the signatory."
          type: "string"
          readOnly: true
        created:
          description: "The time at which the DPA was signed and submitted."
          type: "string"
          format: "date-time"
          readOnly: true
        customer:
          description: "The customer for which this DPA is being signed."
          type: "object"
          writeOnly: true
          properties:
            name:
              description: "The legal name of the customer for and on behalf of whom\
                \ this\nDPA is being signed."
              type: "string"
            signatory:
              description: "The signatory for the customer."
              type: "object"
              properties:
                name:
                  description: "The name of the person signing for the customer."
                  type: "string"
                title:
                  description: "The title of the person signing for the customer."
                  type: "string"
                address:
                  description: "The address of the person signing for the customer."
                  type: "string"
                date:
                  description: "The date of the signature. The date may be provided\
                    \ in any\nformat."
                  type: "string"
                signature:
                  description: "The signature for the signatory."
                  type: "object"
                  properties:
                    signaturePaths:
                      description: "The SVG paths that define this signature."
                      type: "string"
                    svgViewbox:
                      description: "The SVG viewbox that defines the dimensions of\
                        \ this\nsignature."
                      type: "string"
        exhibit1:
          description: "Fields provided under the EXHIBIT 1 section of the DPA."
          type: "object"
          writeOnly: true
          properties:
            dataExporter:
              description: "The data exporter party to this DPA."
              type: "object"
              properties:
                name:
                  description: "The name of the data exporting organization."
                  type: "string"
                address:
                  description: "The address of the data exporting organization."
                  type: "string"
                phone:
                  description: "The phone number of the data exporting organization."
                  type: "string"
                fax:
                  description: "The fax number of the data exporting organization."
                  type: "string"
                email:
                  description: "The email address of the data exporting organization."
                  type: "string"
                other:
                  description: "Other information identifying the data exporting\n\
                    organization."
                  type: "string"
                signatory:
                  description: "The signatory for the data exporting organization."
                  type: "object"
                  properties:
                    name:
                      description: "The name of the person signing for the data exporting\n\
                        organization."
                      type: "string"
                    title:
                      description: "The title of the person signing for the data exporting\n\
                        organization."
                      type: "string"
                    address:
                      description: "The address of the person signing for the data\
                        \ exporting\norganization."
                      type: "string"
                    signature:
                      description: "The signature for the signatory."
                      type: "object"
                      properties:
                        signaturePaths:
                          description: "The SVG paths that define this signature."
                          type: "string"
                        svgViewbox:
                          description: "The SVG viewbox that defines the dimensions\
                            \ of this\nsignature."
                          type: "string"
            annexA:
              description: "Fields provided under the ANNEX A section of EXHIBIT 1."
              type: "object"
              properties:
                dataExporter:
                  description: "The data exporter party to this DPA."
                  type: "object"
                  properties:
                    name:
                      description: "The name of the data exporting organization."
                      type: "string"
                    signatory:
                      description: "The signatory for the data exporting organization."
                      type: "object"
                      properties:
                        name:
                          description: "The name of the person signing for the data\n\
                            exporting organization."
                          type: "string"
                        signature:
                          description: "The signature for the signatory."
                          type: "object"
                          properties:
                            signaturePaths:
                              description: "The SVG paths that define this signature."
                              type: "string"
                            svgViewbox:
                              description: "The SVG viewbox that defines the dimensions\
                                \ of\nthis signature."
                              type: "string"
            annexB:
              description: "Fields provided under the ANNEX B section of EXHIBIT 1."
              type: "object"
              properties:
                dataExporter:
                  description: "The data exporter party to this DPA."
                  type: "object"
                  properties:
                    signatory:
                      description: "The signatory for the data exporting organization."
                      type: "object"
                      properties:
                        name:
                          description: "The name of the person signing for the data\n\
                            exporting organization."
                          type: "string"
                        signature:
                          description: "The signature for the signatory."
                          type: "object"
                          properties:
                            signaturePaths:
                              description: "The SVG paths that define this signature."
                              type: "string"
                            svgViewbox:
                              description: "The SVG viewbox that defines the dimensions\
                                \ of\nthis signature."
                              type: "string"
    DpaCollection:
      x-internal: true
      description: "The base resource for reading and signing a Data Processing Addendum."
      allOf:
      - properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "dpa-collection"
      - $ref: "#/components/schemas/List"
    EmailAutomation:
      title: "Email Automation"
      description: "An automated email message that should be sent to a specified\
        \ group of\nrecipients at a configured time."
      type: "object"
      required:
      - "type"
      - "name"
      - "emailTemplateId"
      - "sendType"
      - "sendTypeValue"
      - "recipientType"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "email-automation"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name for this email automation."
          type: "string"
          example: "Gallery Expiring in 7 Days"
        clonedFromId:
          allOf:
          - description: "If cloned from another automation, the identifier for the\
              \ automation\nfrom which this was cloned."
            example: "b1c6d4d5-552e-47d2-8e3c-6c69bd73a338"
            nullable: true
          - $ref: "#/components/schemas/Id"
        isClonedFromSpAutomation:
          description: "If this automation was cloned from a ShootProof-created email\
            \ automation,\nthen this property will be `true`."
          type: "boolean"
          readOnly: true
        emailAutomationGroupId:
          allOf:
          - description: "The identifier for the email automation group for which\
              \ this is associated with."
            example: "b1c6d4d5-552e-47d2-8e3c-6c69bd73a338"
          - $ref: "#/components/schemas/Id"
        emailTemplateId:
          allOf:
          - description: "The identifier for the email template to use with this email\
              \ automation."
            example: "b1c6d4d5-552e-47d2-8e3c-6c69bd73a338"
          - $ref: "#/components/schemas/Id"
        sendType:
          description: "When to send this automated email message.\n\nAPI validation\
            \ of the `sendType` is based on the `resourceType` of the\nemail template\
            \ specified by `emailTemplateId`. Refer to the following\ntable for details\
            \ on which values are acceptable for `sendType` and under\nwhich conditions\
            \ they are acceptable.\n\n| ShootProof Identifier | For Email Templates\
            \ With Resource Type | Description |\n| --------------------- | --------------------------------------\
            \ | ----------- |\n| `days-after-event-expiration-date` | `event` | Send\
            \ this email `sendTypeValue` number of days after the event expiration\
            \ date. |\n| `days-after-event-release-date` | `event` | Send this email\
            \ `sendTypeValue` number of days after the event release date. |\n| `days-after-event-shoot-date`\
            \ | `event` | Send this email `sendTypeValue` number of days after the\
            \ event shoot date. |\n| `days-after-final-payment-due` | `invoice` |\
            \ Send this email `sendTypeValue` number of days after the final payment\
            \ is due. |\n| `days-after-order-due-date`| `event` | Send this email\
            \ `sendTypeValue` number of days after the order due date. |\n| `days-before-event-expiration-date`\
            \ | `event` | Send this email `sendTypeValue` number of days before the\
            \ event expiration date. |\n| `days-before-final-payment-due` | `invoice`\
            \ | Send this email `sendTypeValue` number of days before the final payment\
            \ is due. |\n| `days-before-order-due-date` | `event` | Send this email\
            \ `sendTypeValue` number of days before the order due date. |"
          type: "string"
          enum:
          - "days-after-event-expiration-date"
          - "days-after-event-release-date"
          - "days-after-event-shoot-date"
          - "days-after-final-payment-due"
          - "days-after-order-due-date"
          - "days-before-event-expiration-date"
          - "days-before-final-payment-due"
          - "days-before-order-due-date"
        sendTypeValue:
          description: "Specifies the number of units (e.g., days, hours, etc.) to\
            \ use for the\nselected `sendType`."
          type: "integer"
        recipientType:
          description: "Who to send this automation email message to.\n\nAPI validation\
            \ of the `recipientType` is based on the `resourceType` of\nthe email\
            \ template specified by `emailTemplateId`. Refer to the following\ntable\
            \ for details on which values are acceptable for `recipientType` and\n\
            under which conditions they are acceptable.\n\n| ShootProof Identifier\
            \ | For Email Templates With Resource Type | Description |\n| ---------------------\
            \ | -------------------------------------- | ----------- |\n| `event-visitors-all`\
            \ | `event` | Send this email to all event visitors. |\n| `event-visitors-with-cart-items`\
            \ | `event` | Send this email to event visitors who have items in their\
            \ carts. |\n| `event-visitors-with-favorites` | `event` | Send this email\
            \ to event visitors who have favorited items in the event. |\n| `event-visitors-with-orders`\
            \ | `event` | Send this email to event visitors who **have** placed an\
            \ order. |\n| `event-visitors-without-orders` | `event` | Send this email\
            \ to event visitors who **have not** placed and order. |\n| `invoice-contact`\
            \ | `invoice` | Send this email to the contact(s) listed for the invoice.\
            \ |"
          type: "string"
          enum:
          - "event-visitors-all"
          - "event-visitors-with-cart-items"
          - "event-visitors-with-favorites"
          - "event-visitors-with-orders"
          - "event-visitors-without-orders"
          - "invoice-contact"
        copyStudioOnEmail:
          description: "Send a copy of this email message to the studio at the same\
            \ time it is\nsent to the recipients."
          type: "boolean"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    EmailAutomationGroup:
      title: "Email Automation Group"
      type: "object"
      required:
      - "type"
      - "name"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "email-automation-group"
        id:
          $ref: "#/components/schemas/Id"
        links:
          $ref: "#/components/schemas/Links"
        name:
          description: "The name for this email automation group."
          type: "string"
          example: "My Wedding Automation"
          maxLength: 250
        clonedFromId:
          allOf:
          - description: "If cloned from another automation group, the identifier\
              \ for the group\nfrom which this was cloned."
            example: "b1c6d4d5-552e-47d2-8e3c-6c69bd73a338"
            nullable: true
          - $ref: "#/components/schemas/Id"
        isClonedFromSpAutomationGroup:
          description: "If this automation group was cloned from a ShootProof-created\
            \ email\nautomation group, then this property will be `true`."
          type: "boolean"
          readOnly: true
        linkedEventsCount:
          description: "The total number of non-deleted events that are using the\
            \ automation\ngroup."
          type: "integer"
          readOnly: true
        automations:
          title: "Email Automations"
          description: "A collection of automated email messages that should be sent\
            \ to a\nspecified group of recipients at a configured time."
          type: "array"
          items:
            $ref: "#/components/schemas/EmailAutomation"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    EmailAutomationGroupCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "Email Automation Groups"
        properties:
          type:
            enum:
            - "email-automation-group-collection"
          items:
            title: "Email Automation Group"
            type: "array"
            items:
              $ref: "#/components/schemas/EmailAutomationGroup"
    EmailCollection:
      allOf:
      - title: "Collection of Email Messages"
        properties:
          type:
            enum:
            - "email-collection"
          items:
            title: "Email Message"
            type: "array"
            items:
              $ref: "#/components/schemas/BasicEmailMessage"
      - $ref: "#/components/schemas/List"
    EmailTemplate:
      title: "Email Template"
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "email-template"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        emailTemplateType:
          $ref: "#/components/schemas/EmailTemplateType/properties/emailTemplateType"
        name:
          description: "The name of this email template."
          type: "string"
        subject:
          description: "The email subject line to use for this template."
          type: "string"
        headline:
          description: "If a headline is displayed in the email, this is the text\
            \ of that\nheadline."
          type: "string"
        buttonText:
          description: "If a call-to-action button is displayed in the email, this\
            \ is the text\nlabel that will appear on the button."
          type: "string"
        body:
          description: "The user-entered body content of the email message, in HTML\
            \ format."
          type: "string"
        htmlEmailCss:
          description: "CSS styles that may be used to style a representation of the\
            \ email\nmessage, providing the studio user an opportunity to preview\
            \ their\nmessage before sending it."
          type: "string"
          readOnly: true
        htmlEmail:
          description: "The full HTML email template, complete with in-lined CSS,\
            \ headers,\nand footers. This may be used to render a representation of\
            \ the email\nmessage, allowing the studio user an opportunity to preview\
            \ their\nmessage before sending it."
          type: "string"
          readOnly: true
        resourceType:
          allOf:
          - readOnly: true
          - $ref: "#/components/schemas/EmailTemplateType/properties/resourceType"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    EmailTemplateCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "A collection of email templates"
        properties:
          type:
            enum:
            - "email-template-collection"
          items:
            title: "Email Template"
            type: "array"
            items:
              $ref: "#/components/schemas/EmailTemplate"
    EmailTemplateType:
      title: "Email Template Type"
      type: "object"
      required:
      - "type"
      - "emailTemplateType"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "email-template-type"
        links:
          $ref: "#/components/schemas/Links"
        emailTemplateType:
          description: "The constant ShootProof identifier for the email template\
            \ type.\n\n| ShootProof Identifier | Description |\n| ---------------------\
            \ | ----------- |\n| `contract-ready` | Describes an email template that\
            \ may be sent to a studio's client when a contract is ready to view. |\n\
            | `documents-ready` | Describes an email template that may be sent to\
            \ a studio's client when they have documents (i.e., invoice and contract)\
            \ ready to view. |\n| `email-admin-access-url-to-linked-contact` | Describes\
            \ an email template that may be used to give a linked contact access to\
            \ an event while it's in pre-release. |\n| `email-event-album-link` |\
            \ Describes an email template that may be used to share a specific album\
            \ within an event. |\n| `email-event-link` | Describes an email template\
            \ that may be used to share an event. |\n| `email-mobile-app-link` | Describes\
            \ an email template that may be used to share a link to a mobile app with\
            \ a studio's client. |\n| `event-expiring-notice` | Describes an email\
            \ template that may be used to notify event visitors of an upcoming event\
            \ expiration. |\n| `event-released-to-linked-contact` | Describes an email\
            \ template that may be used to notify an event's linked contact that an\
            \ event is now active. |\n| `event-released-to-visitors` | Describes an\
            \ email template that may be used to notify event visitors that an event\
            \ is now active. |\n| `event-upload-complete` | Describes an email template\
            \ that may be used as an internal notification to the studio user that\
            \ an upload is complete in their ShootProof account. |\n| `event-visitor-message`\
            \ | Describes an email template that may be used to send general messages\
            \ to event visitors. |\n| `invoice-final-payment-due-remainder` | Describes\
            \ an email template that may be used to notify a studio's client that\
            \ their final invoice payment will be due soon. |\n| `invoice-message`\
            \ | Describes an email template that may be used to send general messages\
            \ about an invoice to a studio's client. |\n| `invoice-past-due-notice`\
            \ | Describes an email template that may be used to notify a studio's\
            \ client that their invoice is past due. |\n| `invoice-ready` | Describes\
            \ an email template that may be sent to a studio's client when an invoice\
            \ is ready to view. |\n| `order-status-notice` | Describes an email template\
            \ that may be sent to a studio's client when the status of their order\
            \ changes. |"
          type: "string"
          enum:
          - "contract-ready"
          - "documents-ready"
          - "email-admin-access-url-to-linked-contact"
          - "email-event-album-link"
          - "email-event-link"
          - "email-mobile-app-link"
          - "event-expiring-notice"
          - "event-released-to-linked-contact"
          - "event-released-to-visitors"
          - "event-upload-complete"
          - "event-visitor-message"
          - "invoice-final-payment-due-reminder"
          - "invoice-message"
          - "invoice-past-due-notice"
          - "invoice-ready"
          - "order-status-notice"
        resourceType:
          description: "If present, this describes the type of resource represented\
            \ by this email\ntemplate."
          type: "string"
          nullable: true
          enum:
          - "contract"
          - "event"
          - "event-album"
          - "invoice"
          - "mobile-app"
          - "order"
        defaults:
          description: "The system default values for this email template type."
          type: "object"
          nullable: true
          properties:
            description:
              description: "A description of this email template type."
              type: "string"
              nullable: true
            subject:
              description: "The default subject line for this email template type."
              type: "string"
              nullable: true
            body:
              description: "The default message body of this email template type.\
                \ The message\nbody includes HTML tags."
              type: "string"
              nullable: true
            htmlEmail:
              description: "The full HTML email template, complete with in-lined CSS,\n\
                headers, and footers."
              type: "string"
              nullable: true
            htmlEmailCss:
              description: "The CSS that will be used to style the email message."
              type: "string"
              nullable: true
            headline:
              description: "The default headline used in the body of the email template."
              type: "string"
              nullable: true
            buttonText:
              description: "The default text label for the button used in the body\
                \ of the email\ntemplate."
              type: "string"
              nullable: true
            buttonTextHelper:
              description: "Helper text provided to help the studio user understand\
                \ the action\ntaken when their client clicks on the button in the\
                \ email message."
              type: "string"
              nullable: true
    EmailTemplateTypeCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "A collection of email template types"
        properties:
          type:
            enum:
            - "email-template-type-collection"
          items:
            title: "Email Template Type"
            type: "array"
            items:
              $ref: "#/components/schemas/EmailTemplateType"
    Error:
      description: "An error."
      type: "object"
      properties:
        type:
          description: "A namespace URI uniquely identifying the error type."
          type: "string"
          format: "uri"
          example: "https://developer.shootproof.com/errors#error-bad-request"
        title:
          description: "A short description of the error encountered."
          type: "string"
          example: "Bad Request"
        detail:
          description: "A longer description of of the error encountered."
          type: "string"
          example: "There was a problem with your request. Please see `info` for more\
            \ information."
        status:
          description: "The HTTP status code associated with this error."
          type: "integer"
          example: 400
        info:
          description: "Additional information that may be provided to aid in error\n\
            resolution."
          type: "object"
          properties:
            reason:
              description: "An optional reason for the error response.\n\nIn some\
                \ cases, more information is required to convey information\nabout\
                \ the error to the client. In these cases, one of the following\n\
                reason slugs may be used.\n\n| Reason Slug | Description |\n| -----------\
                \ | ----------- |\n| `contract-not-ready-to-countersign` | The contract\
                \ is in a state that does not allow countersigning. Its status must\
                \ be `ready-to-countersign` to perform this action. |\n| `event-photo-count-limit`\
                \ | The event has reached the maximum number of photos allowed. |\n\
                | `plan-does-not-allow-uploads` | The studio is in a plan that does\
                \ not allow uploads or they have reached the limit of photos the plan\
                \ allows. |"
              type: "string"
              enum:
              - "contract-not-ready-to-countersign"
              - "event-photo-count-limit"
              - "plan-does-not-allow-uploads"
    ErrorValidation:
      allOf:
      - description: "A validation error."
        properties:
          info:
            description: "Additional information that may be provided to aid in error\n\
              resolution."
            type: "object"
            properties:
              errors:
                description: "If the error response is a result of validation errors,\
                  \ it\nwill most likely be a `400 Bad Request` response and contain\n\
                  this `info.errors` property. Each property name in the\n`errors`\
                  \ object is a property that failed validation. These\nproperties\
                  \ contain objects with property names in the form\nof internal validation\
                  \ error message slugs paired with\nhuman-readable string values\
                  \ describing the validation\nfailure. Each property may have multiple\
                  \ validation failure\nmessages."
                type: "object"
                example:
                  type:
                    isEmpty: "Value is required and can't be empty"
                  name:
                    notUnique: "The name must be unique"
      - $ref: "#/components/schemas/Error"
    Event:
      allOf:
      - title: "Event"
        description: "An event."
        required:
        - "name"
        - "eventDate"
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "event"
          id:
            $ref: "#/components/schemas/Id"
          links:
            $ref: "#/components/schemas/Links"
          name:
            description: "The name of this event."
            type: "string"
            maxLength: 100
          urlSlug:
            description: "The slug used to uniquely identify this event in URLs."
            pattern: "^[\\w-]{0,30}$"
            nullable: true
            type: "string"
          photoSortType:
            description: "The type of sorting to apply to photos in this event.\n\n\
              This affects only the top-level \"all photos\" view for the event\n\
              and does not cascade down through event albums and sub-albums.\nTo apply\
              \ a photo sort type to all albums and sub-albums, use a\nbatch update\
              \ operation on an album collection resource."
            type: "string"
            enum:
            - "custom"
            - "name-asc"
            - "name-desc"
            - "shootDate-asc"
            - "shootDate-desc"
            default: "name-asc"
          albumSortType:
            description: "The type of sorting to apply to albums in this event.\n\n\
              This affects only the top-level albums view for the event and\ndoes\
              \ not cascade down through sub-albums. To apply an album sort\ntype\
              \ to sub-albums, use a batch update operation on an album\ncollection\
              \ resource."
            type: "string"
            enum:
            - "custom"
            - "name-asc"
            - "name-desc"
            default: "name-asc"
          contactId:
            allOf:
            - nullable: true
            - $ref: "#/components/schemas/Id"
          contact:
            allOf:
            - description: "The contact associated with this event (if applicable)."
              readOnly: true
              nullable: true
            - $ref: "#/components/schemas/EventContact"
          photosCount:
            description: "The total number of photos within this event, including\
              \ photos\nin albums."
            type: "number"
            readOnly: true
          photosNotInAnAlbumCount:
            description: "Number of photos within this event that are not in any albums."
            type: "number"
            readOnly: true
          photosInQueueCount:
            description: "The total number of photos in the queue to be processed\
              \ for this\nevent."
            type: "number"
            readOnly: true
          cartsCount:
            description: "The number of active carts with items for this event."
            type: "number"
            readOnly: true
          ordersCount:
            description: "The total number of orders for this event."
            type: "number"
            readOnly: true
          visitorsCount:
            description: "The number of event visitors who provided their email address."
            type: "number"
            readOnly: true
          visitorsLastActiveDate:
            description: "The date on which an event visitor was last active."
            format: "date-time"
            nullable: true
            type: "string"
          shares:
            description: "The number of times this event has been shared via various\n\
              channels."
            type: "object"
            readOnly: true
            properties:
              facebookCount:
                type: "number"
              twitterCount:
                type: "number"
              pinterestCount:
                type: "number"
              linkCount:
                type: "number"
          photoFavoritesCount:
            description: "The number of times photos in this event were favorited."
            type: "number"
            readOnly: true
          eventDate:
            description: "The date on which this event took place."
            format: "date-time"
            nullable: true
            type: "string"
          releaseDate:
            description: "The date on which this event will be released."
            format: "date-time"
            nullable: true
            type: "string"
          lastReleasedDate:
            description: "The date on which this event was last released. This value\
              \ is\nonly ever set by the system when the event is released. If the\n\
              event is released multiple times, this value will always be the\ndate/time\
              \ that the event was last released."
            format: "date-time"
            readOnly: true
            nullable: true
            type: "string"
          expirationDate:
            description: "The date on which this event expired."
            format: "date-time"
            nullable: true
            type: "string"
          orderDueDate:
            description: "The date on which orders for the event are due."
            format: "date-time"
            nullable: true
            type: "string"
          showExpirationDate:
            description: "Whether to show the expiration date to visitors."
            type: "boolean"
          eventPassword:
            description: "If the event access level requires a password, this is the\n\
              password that must be used to access the event."
            maxLength: 30
            nullable: true
            type: "string"
          digitalRules:
            title: "Digital Rule"
            description: "Collection of digital rules available for this event. Digital\n\
              rules describe configurations for free digitals downloads."
            type: "array"
            items:
              $ref: "#/components/schemas/DigitalRule"
          coverPhoto:
            allOf:
            - description: "A cover photo for the event."
              readOnly: true
              nullable: true
            - $ref: "#/components/schemas/CoverPhoto"
          eventPhotoTags:
            title: "Event Photo Tag"
            description: "Photo tags associated with this event."
            readOnly: true
            type: "array"
            items:
              $ref: "#/components/schemas/EventPhotoTag"
          created:
            description: "The creation date of this event."
            type: "string"
            format: "date-time"
            readOnly: true
      - $ref: "#/components/schemas/EventSettings"
    EventAlbum:
      title: "Event Album"
      description: "An event album.\n\nTo enumerate the child albums and photos of\
        \ this album, see\n`links.children`."
      type: "object"
      required:
      - "type"
      - "name"
      - "isHidden"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-album"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the event album."
          type: "integer"
          readOnly: true
        eventId:
          description: "The numeric identifier for the event to which this album belongs."
          type: "integer"
          readOnly: true
        parentAlbumId:
          description: "The identifier for the event album's parent album, if applicable."
          nullable: true
          type: "integer"
        name:
          description: "The event album name."
          type: "string"
          maxLength: 50
        photoSortType:
          description: "The type of sorting to apply to photos in this album.\n\n\
            This affects only the photos in this album and does not cascade down\n\
            through to sub-albums. To apply a photo sort type to all sub-albums,\n\
            use a batch update operation on an album collection resource or\nalbum\
            \ children collection resource."
          type: "string"
          enum:
          - "custom"
          - "name-asc"
          - "name-desc"
          - "shootDate-asc"
          - "shootDate-desc"
          default: "name-asc"
        albumSortType:
          description: "The type of sorting to apply to sub-albums of this album.\n\
            \nThis affects only the sub-albums in this album and does not cascade\n\
            down through to their sub-albums. To apply an album sort type to all\n\
            sub-albums, use a batch update operation on an album collection\nresource\
            \ or album children collection resource."
          type: "string"
          enum:
          - "custom"
          - "name-asc"
          - "name-desc"
          default: "name-asc"
        previousAlbumId:
          description: "The numeric identifier for the album that precedes this album\
            \ when\nthe `event.albumSortType` or `album.albumSortType` for the event\
            \ or\nalbum in which this album appears is set to `custom`.\n\nIf this\
            \ album resource has a `parentAlbumId`, the `previousAlbumId`\nrefers\
            \ to the preceding album in the collection of sub-albums for\nthe album.\
            \ If this album resource does not have a `parentAlbumId`\n(i.e., it is\
            \ `null`), the `previousAlbumId` refers to the preceding\nalbum in the\
            \ collection of albums for the event identified by\n`eventId`.\n\nIf the\
            \ `albumSortType` for the event or album in which this album\nappears\
            \ is not set to `custom`, the `previousAlbumId` will be\n`null`. Likewise,\
            \ if the `albumSortType` is `custom` and this is the\nfirst album in the\
            \ sequence, the value of `previousAlbumId` will be\n`null`."
          readOnly: true
          nullable: true
          type: "integer"
        albumPassword:
          description: "A password that visitors must use to access the event album."
          maxLength: 30
          nullable: true
          type: "string"
        isHidden:
          description: "Whether the album has been marked 'hidden'."
          type: "boolean"
        photosCount:
          description: "The number of photos in the event album."
          type: "integer"
          readOnly: true
        albumsCount:
          description: "The number of sub-albums in the event album."
          type: "integer"
          readOnly: true
        coverPhoto:
          description: "A cover photo for the event album."
          readOnly: true
          allOf:
          - title: "Cover Photo"
            nullable: true
          - $ref: "#/components/schemas/CoverPhoto"
        digitalRules:
          title: "Digital Rule"
          description: "Collection of digital rules available for this album. Digital\
            \ rules\ndescribe configurations for free digitals downloads."
          type: "array"
          items:
            $ref: "#/components/schemas/DigitalRule"
        created:
          description: "The creation date of the event album."
          type: "string"
          format: "date-time"
          readOnly: true
    EventAlbumChildrenCollection:
      allOf:
      - title: "Event Album Children Collection"
        description: "A collection of event album children. The `items` array may\
          \ contain\nobjects with `type` of either `event-album` or `event-album-photo`."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-album-children-collection"
          items:
            type: "array"
            items:
              oneOf:
              - $ref: "#/components/schemas/EventAlbumInList"
              - $ref: "#/components/schemas/EventPhoto"
      - $ref: "#/components/schemas/List"
    EventAlbumChildrenCollectionInPatch:
      title: "Event Album Children Collection"
      description: "A collection of event album children (sub-albums or photos) to\
        \ be\nupdated."
      allOf:
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              description: "A batch of changes to apply to one or more event albums\
                \ or\nevent album photos. You may apply batch changes to both event\n\
                albums and event album photos in the same batch request."
              oneOf:
              - type: "object"
                properties:
                  type:
                    description: "The type of resource represented."
                    type: "string"
                    enum:
                    - "event-album"
                  parentAlbumId:
                    description: "The identifier for the event album's parent album,\
                      \ if\napplicable."
                    nullable: true
                    type: "integer"
                  photoSortType:
                    description: "The type of sorting to apply to photos in this album.\n\
                      \nIf this batch operation is not limited by an array of\nevent\
                      \ album identifiers, this will apply to all albums\nand sub-albums\
                      \ in the current collection."
                    type: "string"
                    enum:
                    - "custom"
                    - "name-asc"
                    - "name-desc"
                    - "shootDate-asc"
                    - "shootDate-desc"
                  albumSortType:
                    description: "The type of sorting to apply to sub-albums of this\n\
                      album.\n\nIf this batch operation is not limited by an array\
                      \ of\nevent album identifiers, this will apply to all albums\n\
                      and sub-albums in the current collection."
                    type: "string"
                    enum:
                    - "custom"
                    - "name-asc"
                    - "name-desc"
                  previousAlbumId:
                    description: "The numeric identifier for the album that precedes\n\
                      this album when the `event.albumSortType` or\n`album.albumSortType`\
                      \ for the event or album in which\nthis album appears is set\
                      \ to `custom`.\n\nThis may only be used on a changeset for a\
                      \ single\nevent album identifer. If multiple event album\nidentifiers\
                      \ are present in the `id` array, a\nvalidation failure error\
                      \ will occur."
                    nullable: true
                    type: "integer"
                  albumPassword:
                    description: "A password that visitors must use to access the\
                      \ event\nalbum."
                    maxLength: 30
                    nullable: true
                    type: "string"
              - type: "object"
                properties:
                  type:
                    description: "The type of resource represented."
                    type: "string"
                    enum:
                    - "event-album-photo"
                  isHidden:
                    description: "Whether the photo(s) should be marked 'hidden.'"
                    type: "boolean"
                  watermarkId:
                    description: "The numeric identifier for the watermark to apply\
                      \ to\nthe photo(s).\n\n_**Please note:** If provided, all photos\
                      \ indicated by\nthe `id` property will be re-watermarked using\
                      \ the\nwatermark indicated by `watermarkId`. Only provide\n\
                      `watermarkId` if you wish to re-watermark the photos.\nIf the\
                      \ value is set to `null`, all photos indicated in\nthe `id`\
                      \ property will have their watermarks removed.\nIf the `watermarkId`\
                      \ is not provided, no change will\noccur._"
                    nullable: true
                    type: "integer"
                  previousPhotoId:
                    description: "The numeric identifier for the photo that precedes\n\
                      this photo when the `event.photoSortType` or\n`album.photoSortType`\
                      \ for the event or album in which\nthis photo appears is set\
                      \ to `custom`.\n\nThis may only be used on a changeset for a\
                      \ single\nevent photo identifer. If multiple event photo\nidentifiers\
                      \ are present in the `id` array, a\nvalidation failure error\
                      \ will occur."
                    nullable: true
                    type: "integer"
      - $ref: "#/components/schemas/BatchCollection"
    EventAlbumChildrenCollectionMinimal:
      title: "Event Album Children Collection"
      description: "A minimal collection of event album children, used when the `Prefer`\n\
        header is present in the request and requesting `return=minimal`.\n\nSince\
        \ the response may include data of either `event-album` or\n`event-album-photo`,\
        \ the `itemType` property is provided to indicate to\nwhat type of object\
        \ the data relates."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-album-children-collection"
          itemType:
            description: "The type of item represented by this collection."
            type: "string"
            enum:
            - "event-album"
            - "event-album-photo"
          id:
            description: "An array of album or photo IDs belonging to this collection."
            type: "array"
            items:
              type: "integer"
      - $ref: "#/components/schemas/List"
    EventAlbumCollection:
      title: "Event Album Collection"
      description: "A collection of all event albums for an event.\n\nYou may also\
        \ enumerate child albums and photos of these albums, use the\n`.items[n].links.children`\
        \ relationship of each album."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-album-collection"
          links:
            $ref: "#/components/schemas/Links"
          items:
            type: "array"
            items:
              $ref: "#/components/schemas/EventAlbumInList"
      - $ref: "#/components/schemas/List"
    EventAlbumCollectionInPatch:
      title: "Event Album Collection"
      description: "A collection of event albums to be updated."
      allOf:
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              description: "A batch of changes to apply to one or more events albums."
              type: "object"
              properties:
                parentAlbumId:
                  description: "The identifier for the event album's parent album,\
                    \ if\napplicable."
                  nullable: true
                  type: "integer"
                photoSortType:
                  description: "The type of sorting to apply to photos in this album.\n\
                    \nIf this batch operation is not limited by an array of\nevent\
                    \ album identifiers, this will apply to all albums and\nsub-albums\
                    \ in the current collection."
                  type: "string"
                  enum:
                  - "custom"
                  - "name-asc"
                  - "name-desc"
                  - "shootDate-asc"
                  - "shootDate-desc"
                albumSortType:
                  description: "The type of sorting to apply to sub-albums of this\
                    \ album.\n\nIf this batch operation is not limited by an array\
                    \ of\nevent album identifiers, this will apply to all albums and\n\
                    sub-albums in the current collection."
                  type: "string"
                  enum:
                  - "custom"
                  - "name-asc"
                  - "name-desc"
                previousAlbumId:
                  description: "The numeric identifier for the album that precedes\
                    \ this\nalbum when the `event.albumSortType` or\n`album.albumSortType`\
                    \ for the event or album in which this\nalbum appears is set to\
                    \ `custom`.\n\nThis may only be used on a changeset for a single\
                    \ event\nalbum identifer. If multiple event album identifiers\
                    \ are\npresent in the `id` array, a validation failure error will\n\
                    occur."
                  nullable: true
                  type: "integer"
                albumPassword:
                  description: "A password that visitors must use to access the event\n\
                    album."
                  maxLength: 30
                  nullable: true
                  type: "string"
      - $ref: "#/components/schemas/BatchCollection"
    EventAlbumCollectionMinimal:
      title: "Event Album Collection"
      description: "A minimal collection of all event albums for an event, used when\
        \ the\n`Prefer` header is present in the request and requesting\n`return=minimal`."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-album-collection"
          links:
            $ref: "#/components/schemas/Links"
          itemType:
            description: "The type of items this minimal collection represents."
            type: "string"
            enum:
            - "event-album"
          id:
            description: "An array of album IDs belonging to this collection."
            type: "array"
            items:
              type: "integer"
      - $ref: "#/components/schemas/List"
    EventAlbumInList:
      title: "Event Album"
      description: "An event album as viewed from a collection."
      type: "object"
      required:
      - "type"
      - "links"
      - "id"
      - "name"
      - "coverPhoto"
      - "created"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-album"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this event album."
          type: "integer"
        parentAlbumId:
          description: "The identifier for the parent album of this event album."
          readOnly: true
          nullable: true
          type: "integer"
        name:
          description: "The event album name."
          type: "string"
          maxLength: 50
        isHidden:
          description: "Whether the album has been marked 'hidden'."
          type: "boolean"
        photoSortType:
          description: "The type of sorting to apply to photos in this album.\n\n\
            This affects only the photos in this album and does not cascade down\n\
            through to sub-albums. To apply a photo sort type to all sub-albums,\n\
            use a batch update operation on an album collection resource or\nalbum\
            \ children collection resource."
          type: "string"
          enum:
          - "custom"
          - "name-asc"
          - "name-desc"
          - "shootDate-asc"
          - "shootDate-desc"
          default: "name-asc"
        albumSortType:
          description: "The type of sorting to apply to sub-albums of this album.\n\
            \nThis affects only the sub-albums in this album and does not cascade\n\
            down through to their sub-albums. To apply an album sort type to all\n\
            sub-albums, use a batch update operation on an album collection\nresource\
            \ or album children collection resource."
          type: "string"
          enum:
          - "custom"
          - "name-asc"
          - "name-desc"
          default: "name-asc"
        previousAlbumId:
          description: "The numeric identifier for the album that precedes this album\
            \ when\nthe `event.albumSortType` or `album.albumSortType` for the event\
            \ or\nalbum in which this album appears is set to `custom`.\n\nIf this\
            \ album resource has a `parentAlbumId`, the `previousAlbumId`\nrefers\
            \ to the preceding album in the collection of sub-albums for\nthe album.\
            \ If this album resource does not have a `parentAlbumId`\n(i.e., it is\
            \ `null`), the `previousAlbumId` refers to the preceding\nalbum in the\
            \ collection of albums for the event identified by\n`eventId`.\n\nIf the\
            \ `albumSortType` for the event or album in which this album\nappears\
            \ is not set to `custom`, the `previousAlbumId` will be\n`null`. Likewise,\
            \ if the `albumSortType` is `custom` and this is the\nfirst album in the\
            \ sequence, the value of `previousAlbumId` will be\n`null`."
          readOnly: true
          nullable: true
          type: "integer"
        photosCount:
          description: "The number of photos in the event album."
          type: "integer"
          readOnly: true
        albumsCount:
          description: "The number of sub-albums in the event album."
          type: "integer"
          readOnly: true
        coverPhoto:
          description: "A cover photo for the event album."
          allOf:
          - $ref: "#/components/schemas/CoverPhoto"
          - nullable: true
        albumPassword:
          description: "The event album password."
          type: "string"
          readOnly: true
          maxLength: 30
        created:
          description: "The creation date of this event album."
          type: "string"
          format: "date-time"
    EventArchiveCost:
      title: "Event Archive Cost"
      description: "An event's archive cost."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-archive-cost"
        links:
          $ref: "#/components/schemas/Links"
        archiveRate:
          description: "Archiving cost per gigabyte."
          type: "number"
          readOnly: true
        freeArchiveStorageSpaceGranted:
          description: "Amount of free archive storage space granted, in bytes. Typically\n\
            granted via referral of another studio.\n\nThis value is `null` if the\
            \ studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
        freeArchiveStorageSpaceRemaining:
          description: "Amount of free archive storage space remaining, in bytes.\n\
            \nThis value is `null` if the studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
        currentArchiveStorageSpaceUsed:
          description: "Amount of archive storage space currently in use, in bytes.\n\
            \nThis value is `null` if the studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
        eventTotalSize:
          description: "Total size of archive storage space, that event will use,\
            \ in bytes."
          type: "number"
          readOnly: true
        eventTotalCost:
          description: "Total monthly cost to archive this event in given `currencyCode`."
          type: "number"
          minimum: 0
          readOnly: true
        currencyCode:
          description: "Currency code that applies to the given `archiveRate`,\n`eventTotalCost`\
            \ and `minimumCharge` values."
          type: "string"
          readOnly: true
        eventWillIncurCost:
          description: "Indicates that choosing to archive this event will incur a\
            \ cost on\nnext billing date."
          type: "boolean"
          readOnly: true
        minimumChargeNumBytes:
          description: "The amount of archive storage space, that can be used until\
            \ the\nminimum charge is exceeded, in bytes."
          type: "number"
          minimum: 0
          readOnly: true
        minimumCharge:
          description: "Minimum monthly charge amount for archiving in given `currencyCode`.\n\
            Studio will pay this amount monthly when archiving up to\n`minimumChargeNumBytes`\
            \ worth of photos."
          type: "number"
          minimum: 0
          readOnly: true
        billingDay:
          description: "Day of the calendar month on which archiving costs will be\
            \ included\non a bill.\n\nFor example:\n\n* Value is `1` for studios in\
            \ a yearly photo plan; archiving costs\nare billed for on the 1st of every\
            \ calendar month.\n* Value is `X` for studios in a monthly photo plan,\
            \ where `X` is the\ncalendar day of when their photo plan is billed. \
            \ Monthly photo plan\nbills include archiving costs alongside their monthly\
            \ photo plan\ncosts."
          type: "number"
          readOnly: true
    EventCategory:
      title: "Event Category"
      description: "An event category."
      type: "object"
      required:
      - "type"
      - "id"
      - "name"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-category"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this event category."
          type: "integer"
        name:
          description: "The event category name."
          type: "string"
    EventCategoryCollection:
      title: "Event Category Collection"
      description: "A collection of event categories."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "event-category-collection"
          items:
            title: "Event Category"
            description: "An array of event categories."
            type: "array"
            items:
              $ref: "#/components/schemas/EventCategory"
      - $ref: "#/components/schemas/List"
    EventCollection:
      title: "Event Collection"
      description: "A collection of events."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-collection"
          meta:
            type: "object"
            required:
            - "eventTotals"
            properties:
              eventTotals:
                description: "Total counts for various types of events in various\
                  \ states."
                type: "object"
                required:
                - "all"
                - "active"
                - "inactive"
                - "preregistered"
                - "archived"
                properties:
                  all:
                    description: "The total number of events for the brand."
                    type: "integer"
                  active:
                    description: "The total number of active events for the brand."
                    type: "integer"
                  inactive:
                    description: "The total number of inactive events for the brand."
                    type: "integer"
                  preregistered:
                    description: "The total number of pre-registered events for the\
                      \ brand."
                    type: "integer"
                  archived:
                    description: "The total number of archived events for the brand."
                    type: "integer"
          items:
            title: "Event"
            type: "array"
            items:
              description: "An event as viewed from a collection."
              type: "object"
              required:
              - "type"
              - "links"
              - "id"
              - "name"
              - "eventStatus"
              - "eventAccessLevel"
              - "eventCategoryId"
              - "eventCategory"
              - "contactId"
              - "contactName"
              - "photosCount"
              - "eventDate"
              - "releaseDate"
              - "expirationDate"
              - "created"
              properties:
                type:
                  description: "The type of object represented."
                  type: "string"
                  enum:
                  - "event"
                links:
                  $ref: "#/components/schemas/Links"
                id:
                  description: "The identifier for this event."
                  type: "integer"
                name:
                  description: "The name of this event."
                  type: "string"
                eventStatus:
                  description: "The event status."
                  type: "string"
                  enum:
                  - "active"
                  - "inactive"
                  - "archived"
                isPreRegistration:
                  description: "Whether pre-registration mode is turned on for the\
                    \ event."
                  type: "boolean"
                eventAccessLevel:
                  description: "The event access level."
                  type: "string"
                  enum:
                  - "public-password"
                  - "public-no-password"
                  - "private-password"
                  - "private-no-password"
                eventCategoryId:
                  description: "The numeric identifier for the category of this event."
                  nullable: true
                  type: "integer"
                eventCategory:
                  description: "The human-readable name of the category of this event."
                  nullable: true
                  type: "string"
                contactId:
                  allOf:
                  - nullable: true
                  - $ref: "#/components/schemas/Id"
                contactName:
                  description: "The full name of the contact associated with this\
                    \ event."
                  nullable: true
                  type: "string"
                priceSheetId:
                  description: "The identifier for the price sheet assigned to the\
                    \ event."
                  type: "integer"
                  nullable: true
                photosCount:
                  description: "The total number of photos within this event, including\n\
                    photos in albums."
                  type: "integer"
                eventDate:
                  description: "The date on which this event took place."
                  format: "date-time"
                  nullable: true
                  type: "string"
                releaseDate:
                  description: "The date on which this event will be released."
                  format: "date-time"
                  nullable: true
                  type: "string"
                lastReleasedDate:
                  description: "The date on which this event was last released."
                  format: "date-time"
                  nullable: true
                  type: "string"
                expirationDate:
                  description: "The date on which this event expires."
                  format: "date-time"
                  nullable: true
                  type: "string"
                coverPhoto:
                  description: "A cover photo for the event."
                  readOnly: true
                  allOf:
                  - $ref: "#/components/schemas/CoverPhoto"
                  - nullable: true
                playlistId:
                  description: "The identifier for the playlist this event uses."
                  readOnly: true
                  nullable: true
                  type: "integer"
                createdBy:
                  description: "The ID of the user who created this event."
                  type: "integer"
                created:
                  description: "The creation date of this event."
                  type: "string"
                  format: "date-time"
      - $ref: "#/components/schemas/List"
    EventCollectionInPatch:
      title: "Event Collection"
      description: "A collection of events to be updated."
      allOf:
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              description: "A batch of changes to apply to one or more events."
              type: "object"
              properties:
                eventStatus:
                  description: "The event status."
                  type: "string"
                  enum:
                  - "active"
                  - "inactive"
                  - "archived"
                eventAccessLevel:
                  description: "The event access level."
                  type: "string"
                  enum:
                  - "public-password"
                  - "public-no-password"
                  - "private-password"
                  - "private-no-password"
                eventCategoryId:
                  description: "The numeric identifier for the category of this event."
                  nullable: true
                  type: "number"
                expirationDate:
                  description: "The date on which this event expires."
                  format: "date-time"
                  nullable: true
                  type: "string"
                priceSheetId:
                  description: "The identifier for the price sheet the event uses.\
                    \ If\n`null`, then the shopping cart for the event is turned\n\
                    off."
                  nullable: true
                  type: "number"
                playlistId:
                  description: "The identifier for the playlist the event uses."
                  nullable: true
                  type: "number"
                headline:
                  description: "Headline to display to event visitors."
                  maxLength: 100
                  nullable: true
                  type: "string"
                information:
                  description: "Information to display to event visitors."
                  maxLength: 2000
                  nullable: true
                  type: "string"
                videoUrl:
                  description: "The URL of a video to display to event visitors."
                  maxLength: 255
                  nullable: true
                  type: "string"
                emailAutomationGroupId:
                  description: "The identifier for the email automation group associated\n\
                    with the event."
                  nullable: true
                  type: "number"
                brandThemeId:
                  description: "The identifier for the brand theme the event uses."
                  nullable: true
                  type: "number"
      - $ref: "#/components/schemas/BatchCollection"
    EventContact:
      allOf:
      - title: "Event Contact"
        description: "A contact that is associated with an event."
        properties:
          type:
            enum:
            - "event-contact"
          photoFavoritesCount:
            description: "The number of times photos in this event were favorited\
              \ by the\ncontact."
            type: "integer"
            readOnly: true
          photoHiddenCount:
            description: "The number of times photos in this event were hidden by\
              \ the contact."
            type: "integer"
            readOnly: true
          eventContactPermissions:
            $ref: "#/components/schemas/EventContactPermissions"
          digitalRules:
            title: "Digital Rule"
            description: "Collection of digital rules available for this event. Digital\
              \ rules\ndescribe configurations for free digitals downloads."
            type: "array"
            items:
              $ref: "#/components/schemas/DigitalRule"
      - $ref: "#/components/schemas/Contact/allOf/1"
    EventContactDefaults:
      title: "Event Contact Defaults"
      description: "An event contact defaults object."
      type: "object"
      required:
      - "name"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-contact-defaults"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this event contact defaults object."
          type: "number"
          readOnly: true
        isDefault:
          description: "Whether the current preset is the default for contacts."
          type: "boolean"
        name:
          description: "A descriptive name for these event contact defaults settings."
          type: "string"
          maxLength: 100
        canHidePhotos:
          description: "Whether the contact is allowed to hide photos for a given\
            \ set of\nevent contact defaults."
          type: "boolean"
        canTagPhotos:
          description: "Whether the contact is allowed to tag photos for a given set\
            \ of\nevent contact defaults."
          type: "boolean"
        adminModePin:
          description: "Access code assigned to this contact default for a given set\
            \ of\nevent contact defaults."
          type: "string"
          minLength: 6
          maxLength: 30
          writeOnly: true
        eventPhotoTags:
          description: "An array of event photo tag objects for a given set of event\
            \ contact\ndefaults."
          type: "array"
          items:
            $ref: "#/components/schemas/EventContactDefaultsEventPhotoTag"
        created:
          description: "The creation date of this event contact defaults object."
          type: "string"
          format: "date-time"
          readOnly: true
    EventContactDefaultsCollection:
      title: "Event Contact Defaults Collection"
      description: "A collection of event contact defaults objects."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-contact-defaults-collection"
          items:
            type: "array"
            items:
              $ref: "#/components/schemas/EventContactDefaults"
      - $ref: "#/components/schemas/List"
    EventContactDefaultsEventPhotoTag:
      allOf:
      - title: "Event Photo Tag for Event Contact Defaults"
        description: "An event photo tag applied to a set of event contact defaults."
        type: "object"
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "event-contact-defaults-event-photo-tag"
      - $ref: "#/components/schemas/EventPhotoTag"
    EventContactPermissions:
      title: "Event Contact Permissions"
      description: "Permissions available for an event contact."
      type: "object"
      properties:
        canHidePhotos:
          description: "Denotes that event contact can hide photos."
          type: "boolean"
        canTagPhotos:
          description: "Denotes that event contact can tag photos."
          type: "boolean"
        adminModePin:
          description: "The PIN code for admin mode entry."
          type: "string"
          minLength: 6
          maxLength: 30
          nullable: true
        eventPhotoTags:
          description: "An array of event photo tag objects on this event contact's\n\
            permissions."
          type: "array"
          items:
            $ref: "#/components/schemas/EventContactPermissionsEventPhotoTag"
    EventContactPermissionsEventPhotoTag:
      allOf:
      - title: "Event Photo Tag for Event Contact"
        description: "An event photo tag applied to an event contact."
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "event-contact-permissions-event-photo-tag"
          photosCount:
            description: "The number of photos with this event photo tag applied."
            type: "number"
            readOnly: true
      - $ref: "#/components/schemas/EventPhotoTag"
    EventDefaults:
      allOf:
      - title: "Event Defaults"
        description: "An event defaults object."
        required:
        - "name"
        - "isDefault"
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "event-defaults"
          links:
            $ref: "#/components/schemas/Links"
          id:
            description: "The identifier for this event defaults object."
            type: "integer"
            readOnly: true
          name:
            description: "A descriptive name for these event defaults settings."
            type: "string"
            maxLength: 100
          isDefault:
            description: "Whether this is marked as the default event defaults."
            type: "boolean"
          created:
            description: "The creation date of this event defaults object."
            type: "string"
            format: "date-time"
            readOnly: true
          lastUpdated:
            description: "The date this event defaults object was last updated."
            type: "string"
            format: "date-time"
            readOnly: true
            nullable: true
          digitalRules:
            title: "Digital Rule"
            description: "Collection of digital rules available for this event defaults.\n\
              Digital rules describe configurations for free digitals\ndownloads."
            type: "array"
            items:
              $ref: "#/components/schemas/DigitalRule"
      - $ref: "#/components/schemas/EventSettings"
    EventDefaultsCollection:
      allOf:
      - title: "Event Defaults Collection"
        description: "A collection of event defaults objects."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-defaults-collection"
          items:
            type: "array"
            items:
              description: "An event defaults object as viewed from a collection."
              type: "object"
              required:
              - "type"
              - "links"
              - "id"
              - "name"
              - "isDefault"
              - "created"
              properties:
                type:
                  description: "The type of object represented."
                  type: "string"
                  enum:
                  - "event-defaults"
                links:
                  $ref: "#/components/schemas/Links"
                id:
                  description: "The identifier for this event defaults object."
                  type: "integer"
                name:
                  description: "A descriptive name for these event defaults settings."
                  type: "string"
                isDefault:
                  description: "Whether this is marked as the default event defaults."
                  type: "boolean"
                created:
                  description: "The creation date of this event defaults object."
                  type: "string"
                  format: "date-time"
      - $ref: "#/components/schemas/List"
    EventEmail:
      allOf:
      - title: "Event Email"
        description: "An email message to a client about their event."
        properties:
          recipientEmails:
            description: "Email address(es) to send the email to.\n\nRequired for\
              \ email types that can be sent to arbitrary\nrecipients.  Must be an\
              \ array of valid email addresses when\nrequired.\n\nWhen sending an\
              \ event email to one or more arbitrary recipients,\na studio-level limit\
              \ on the number of email recipients is\nenforced.  These are returned\
              \ as validation errors on the\n`recipientEmails` element..\n\nSimilarly,\
              \ a rate limit is enforced and returned on the\n`recipientEmails` element\
              \ as well.\n\nFor emails always intended for the event contact, at least\
              \ the\nevent contact's email address must be provided in the array.\
              \  If\nit is not provided, a validation error will be present on the\n\
              `recipientEmails` element.\n\nNote that for certain event-related emails,\
              \ both\n`recipientEmails` and the emails retrieved for the given\n`emailRecipientType`\
              \ value will be combined to send the email to\nmany recipients."
            type: "array"
            items:
              type: "string"
          emailRecipientType:
            description: "An optional email recipient type, which retrieves recipients\n\
              from the event's visitors.\n\nValid values are strings, which map to\
              \ the following types:\n\n* `all-event-visitors`: All visitors to this\
              \ gallery\n* `event-visitors-with-favorites`: Visitors with favorites\n\
              * `event-visitors-with-cart-items`: Visitors with items in their\ncart\n\
              * `event-visitors-with-orders`: Visitors who HAVE placed an\norder\n\
              * `event-visitors-without-orders`: Visitors who HAVE NOT placed\nan\
              \ order\n\nNote that for certain event-related emails, both\n`recipientEmails`\
              \ and the emails retrieved for the given\n`emailRecipientType` value\
              \ will be combined to send the email to\nmany recipients."
            type: "number"
            enum:
            - "all-event-visitors"
            - "event-visitors-with-favorites"
            - "event-visitors-with-cart-items"
            - "event-visitors-with-orders"
            - "event-visitors-without-orders"
      - $ref: "#/components/schemas/StudioToClientEmail"
    EventPhoto:
      allOf:
      - title: "Event Photo"
        description: "An event photo.\n\nTo get the event to which the photo belongs,\
          \ see `.links.parent`.\n\nTo get a display URL for this photo, see `.displayUrl`.\n\
          \nTo download the original image for this photo, see\n`.links.event-photo-original`."
        properties:
          type:
            description: "The type of object represented.\n\nFor a photo resource\
              \ loaded from the context of an event, `type`\nwill be `event-photo`.\
              \ When the photo resource is loaded from\nthe context of an album or\
              \ sub-album, the `type` will be\n`event-album-photo`."
            type: "string"
            enum:
            - "event-photo"
            - "event-album-photo"
          links:
            $ref: "#/components/schemas/Links"
          photoStatus:
            description: "The current status of this event photo."
            type: "string"
            enum:
            - "active"
            - "pending"
            - "error"
            readOnly: true
          eventId:
            description: "The numeric identifier for the event to which this photo\n\
              belongs."
            type: "integer"
            readOnly: true
          albumId:
            description: "The numeric identifier for the album to which this photo\n\
              belongs, if applicable.\n\nIf this photo resource has a `type` of `event-photo`,\
              \ the\n`albumId` property will be `null`. However, if the photo\nresource\
              \ has a `type` of `event-album-photo`, the `albumId`\nproperty will\
              \ contain a value."
            readOnly: true
            nullable: true
            type: "integer"
          belongsToAlbumIds:
            description: "An array of all album IDs to which this photo belongs."
            type: "array"
            items:
              type: "integer"
            readOnly: true
          previousPhotoId:
            description: "The numeric identifier for the photo that precedes this\
              \ photo\nwhen the `event.photoSortType` or `album.photoSortType` for\
              \ the\nevent or album in which this photo appears is set to `custom`.\n\
              \nIf this photo resource has a `type` of `event-photo`, the\n`previousPhotoId`\
              \ refers to the preceding photo in the\ncollection of photos for the\
              \ event. If this photo resource has a\n`type` of `event-album-photo`,\
              \ the `previousPhotoId` refers to\nthe preceding photo in the collection\
              \ of photos for the album\nidentified by `albumId`.\n\nIf the `photoSortType`\
              \ for the event or album in which this\nphoto appears is not set to\
              \ `custom`, the `previousPhotoId` will\nbe `null`. Likewise, if the\
              \ `photoSortType` is `custom` and this\nis the first photo in the sequence,\
              \ the value of\n`previousPhotoId` will be `null`."
            readOnly: true
            nullable: true
            type: "integer"
          isHidden:
            description: "Whether the photo has been marked 'hidden.'"
            type: "boolean"
          shares:
            description: "The number of times this event photo has been shared via\
              \ various\nchannels.\n\n_**NOTE:** This is not yet implemented. All\
              \ counts will yield a\nvalue of `0` until this feature is implemented._"
            type: "object"
            readOnly: true
            properties:
              facebookCount:
                type: "integer"
              twitterCount:
                type: "integer"
              pinterestCount:
                type: "integer"
              linkCount:
                type: "integer"
          favoritesCount:
            description: "The number of times this event photo has been favorited."
            type: "integer"
            readOnly: true
          lastReplaced:
            description: "The date on which the photo was last replaced, or `null`\
              \ if it\nhas never been replaced."
            format: "date-time"
            readOnly: true
            nullable: true
            type: "string"
          eventPhotoTags:
            description: "An array of tags set on this photo, if any."
            type: "array"
            items:
              $ref: "#/components/schemas/EventPhotoTag"
          shootDate:
            description: "The date on which this photo was taken (if available in\
              \ the EXIF\nmetadata when originally uploaded)."
            format: "date-time"
            readOnly: true
            nullable: true
            type: "string"
      - $ref: "#/components/schemas/BaseImage"
    EventPhotoCollection:
      allOf:
      - title: "Event Photo Collection"
        description: "A collection of event photos.\n\nTo get the event to which the\
          \ collection belongs, see `links.parent`."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-photo-collection"
          links:
            $ref: "#/components/schemas/Links"
          items:
            title: "Event Photo"
            type: "array"
            items:
              $ref: "#/components/schemas/EventPhoto"
      - $ref: "#/components/schemas/List"
    EventPhotoCollectionInPatch:
      allOf:
      - type: "object"
        title: "Event Photo Collection"
        description: "A collection of event photos to be updated."
        properties:
          items:
            type: "array"
            items:
              description: "A batch of changes to apply to one or more event photos."
              type: "object"
              properties:
                isHidden:
                  description: "Whether the photo(s) should be marked 'hidden.'"
                  type: "boolean"
                watermarkId:
                  description: "The numeric identifier for the watermark to apply\
                    \ to the\nphoto(s).\n\n_**Please note:** If provided, all photos\
                    \ indicated by the\n`id` property will be re-watermarked using\
                    \ the watermark\nindicated by `watermarkId`. Only provide `watermarkId`\
                    \ if\nyou wish to re-watermark the photos. If the value is set\n\
                    to `null`, all photos indicated in the `id` property will\nhave\
                    \ their watermarks removed. If the `watermarkId` is not\nprovided,\
                    \ no change will occur._"
                  nullable: true
                  type: "integer"
                previousPhotoId:
                  description: "The numeric identifier for the photo that precedes\
                    \ this\nphoto when the `event.photoSortType` or\n`album.photoSortType`\
                    \ for the event or album in which this\nphoto appears is set to\
                    \ `custom`.\n\nThis may only be used on a changeset for a single\
                    \ event\nphoto identifer. If multiple event photo identifiers\
                    \ are\npresent in the `id` array, a validation failure error will\n\
                    occur."
                  nullable: true
                  type: "integer"
      - $ref: "#/components/schemas/BatchCollection"
    EventPhotoCollectionMinimal:
      allOf:
      - title: "Event Photo Collection"
        description: "A minimal collection of event photos, used when the `Prefer`\
          \ header is\npresent in the request and requesting `return=minimal`."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "event-photo-collection"
          links:
            $ref: "#/components/schemas/Links"
          itemType:
            description: "The type of items this minimal collection represents."
            type: "string"
            enum:
            - "event-photo"
            - "event-album-photo"
          id:
            description: "An array of photo IDs belonging to this collection."
            type: "array"
            items:
              type: "integer"
      - $ref: "#/components/schemas/List"
    EventPhotoInPost:
      title: "Event Photo"
      description: "An event photo submitted for addition to the event."
      type: "object"
      required:
      - "type"
      - "name"
      - "filesize"
      - "randomKey"
      - "uploadUrlResponse"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-photo"
        name:
          description: "The original filename of the uploaded event photo."
          type: "string"
          maxLength: 250
        watermarkId:
          description: "The numeric identifier for the watermark applied to this photo,\
            \ if\napplicable."
          nullable: true
          type: "integer"
        albumId:
          description: "The numeric identifier for the album to which this photo is\
            \ being\nuploaded, if applicable. The album must belong to the event for\n\
            which this photo is being uploaded."
          nullable: true
          type: "integer"
        filesize:
          description: "The original filesize of the uploaded event photo."
          type: "number"
        randomKey:
          description: "The random key generated by the client and used to replace\
            \ the\n`${random_folder}` template variable when uploading the photo using\n\
            the photo upload policy."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        uploadTime:
          description: "The time in seconds (as a floating point number) it took to\
            \ upload\nthe photo to the URL specified in the photo upload policy."
          nullable: true
          type: "number"
        uploadUrlResponse:
          description: "The response returned as a result of a request to the `.uploadUrl`\n\
            specified in the photo upload policy."
          type: "object"
          required:
          - "contentType"
          - "rawBody"
          properties:
            contentType:
              description: "The value of the response's `Content-Type` header."
              type: "string"
            rawBody:
              description: "The raw response body."
              type: "string"
    EventPhotoInUpdate:
      title: "Event Photo"
      description: "An event photo submitted for updating.\n\nIf replacing the photo—\
        either through full update (`PUT`) or partial\nupdate (`PATCH`)—`filesize`,\
        \ `randomKey`, and `uploadUrlResponse` are\nall required; `uploadTime` is\
        \ recommended. Otherwise, they may be\nomitted from the request."
      type: "object"
      required:
      - "type"
      - "name"
      - "isHidden"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-photo"
        name:
          description: "The filename of the uploaded event photo."
          type: "string"
          maxLength: 250
        isHidden:
          description: "Whether the photo should be marked 'hidden.'"
          type: "boolean"
        watermarkId:
          description: "The numeric identifier for the watermark applied to this photo,\
            \ if\napplicable.\n\n_**Please note:** Only provide `watermarkId` if you\
            \ wish to\nre-watermark the photo. Using an identifier for a different\n\
            watermark will apply the new watermark to this photo. If the value\nis\
            \ set to `null` on a photo with a watermark, the watermark will be\nremoved.\
            \ If the `watermarkId` is not provided, no change will\noccur._"
          nullable: true
          type: "integer"
        filesize:
          description: "The original filesize of the uploaded event photo."
          type: "number"
        randomKey:
          description: "The random key generated by the client and used to replace\
            \ the\n`${random_folder}` template variable when uploading the photo using\n\
            the photo upload policy."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        uploadTime:
          description: "The time in seconds (as a floating point number) it took to\
            \ upload\nthe photo to the URL specified in the photo upload policy."
          nullable: true
          type: "number"
        uploadUrlResponse:
          description: "The response returned as a result of a request to the `.uploadUrl`\n\
            specified in the photo upload policy."
          type: "object"
          required:
          - "contentType"
          - "rawBody"
          properties:
            contentType:
              description: "The value of the response's `Content-Type` header."
              type: "string"
            rawBody:
              description: "The raw response body."
              type: "string"
    EventPhotoTag:
      title: "Event Photo Tag"
      description: "An event photo tag."
      type: "object"
      properties:
        links:
          $ref: "#/components/schemas/Links"
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "event-photo-tag"
        id:
          description: "The identifier for the event photo tag."
          type: "number"
        name:
          description: "The name for this event photo tag.\n\nAllows alphanumeric,\
            \ space, dash, and underscore characters."
          type: "string"
          pattern: "^[\\d\\s\\w\\-]{1,30}$"
        maximumPhotoCount:
          description: "The maximum number of event photos to which the tag may be\
            \ applied."
          type: "number"
        displayOrder:
          description: "The display order value for this event photo tag."
          type: "number"
    EventPhotoUploadPolicy:
      title: "Event Photo Upload Policy"
      description: "An event photo upload policy."
      type: "object"
      required:
      - "type"
      - "maxFileSize"
      - "uploadUrl"
      - "postParams"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          readOnly: true
          enum:
          - "event-photo-upload-policy"
        maxFileSize:
          description: "The maximum file size in bytes allowed for upload."
          type: "integer"
          readOnly: true
        uploadUrl:
          description: "The URL to which a POST request may be made to upload an image\
            \ for\nthe event."
          type: "string"
          format: "uri"
          readOnly: true
        expiration:
          description: "The generated policy is valid until this time."
          type: "string"
          format: "date-time"
          readOnly: true
        postParams:
          description: "Parameters that must be included as parameters in the upload\n\
            request.\n\nIn general, these parameter should be sent, unmodified, with\
            \ the\nrequest. The exception is when any of the values contain a template\n\
            variables, as noted."
          type: "object"
          required:
          - "AWSAccessKeyId"
          - "key"
          - "acl"
          - "Content-Type"
          - "policy"
          - "success_action_status"
          - "signature"
          readOnly: true
          properties:
            AWSAccessKeyId:
              description: "The AWS Access Key ID for the `.uploadUrl`."
              type: "string"
            key:
              description: "The storage key for the file, to be used by the `.uploadUrl`\
                \ for\nstoring the uploaded image.\n\nThis value contains the template\
                \ variable `${random_folder}`\nwhich must be a random 32-character\
                \ hexadecimal value generated\nby the client and replaced before sending\
                \ the request to the\n`.uploadUrl`.\n\nThis value also contains the\
                \ template variable `${filename}`,\nwhich MUST NOT be replaced and\
                \ should remain intact when sending\nthe request to the `.uploadUrl`."
              type: "string"
            acl:
              description: "The AWS access control level to be used for the upload."
              type: "string"
              enum:
              - "private"
            Content-Type:
              description: "The media type of the file to be uploaded."
              type: "string"
              enum:
              - "image/jpeg"
            policy:
              description: "The encoded policy document generated for the upload request."
              type: "string"
            success_action_status:
              description: "The HTTP status code expected in a successful response\
                \ from the\nrequest to `.uploadUrl'."
              type: "integer"
              enum:
              - 201
            signature:
              description: "The encoded signature to send with the request to `.uploadUrl`."
              type: "string"
    EventSettings:
      title: "Event Settings"
      description: "Event settings for an event or event defaults."
      type: "object"
      required:
      - "eventStatus"
      - "eventAccessLevel"
      - "brandThemeId"
      - "pickupOptions"
      - "viewType"
      - "landingLayoutType"
      - "languageCode"
      properties:
        eventStatus:
          description: "The event status."
          type: "string"
          enum:
          - "active"
          - "inactive"
          - "archived"
        isPreRegistration:
          description: "Whether pre-registration mode is turned on for the event."
          type: "boolean"
        preRegistrationMessage:
          description: "Text to display to visitors when the event is in pre-registration\n\
            mode."
          maxLength: 1000
          nullable: true
          type: "string"
        eventAccessLevel:
          description: "The event access level."
          type: "string"
          enum:
          - "public-password"
          - "public-no-password"
          - "private-password"
          - "private-no-password"
        headline:
          description: "Headline to display to event visitors."
          maxLength: 100
          nullable: true
          type: "string"
        information:
          description: "Information to display to event visitors."
          maxLength: 2000
          nullable: true
          type: "string"
        videoUrl:
          description: "The URL of a video to display to event visitors."
          maxLength: 255
          nullable: true
          type: "string"
        allowBlackWhiteFiltering:
          description: "Allow clients to see and order a black and white version of\
            \ an\nimage."
          type: "boolean"
        allowCropping:
          description: "Allow clients to crop photos on orders."
          type: "boolean"
        brandThemeId:
          description: "The identifier for the brand theme the event uses."
          type: "integer"
        brandTheme:
          $ref: "#/components/schemas/BrandTheme"
          readOnly: true
        requireEmail:
          description: "Whether an email address is required to view the event."
          type: "boolean"
        showHomepageLink:
          description: "Whether to show a link to the studio homepage."
          type: "boolean"
        homepageLinkTo:
          description: "The URL to which the homepage link should send users. This\
            \ is\nrequired if `showHomepageLink` is `true`.\n\nValid values are:\n\
            \n* `studio_homepage`: The homepage link points to the ShootProof\nhomepage\
            \ for the brand.\n* `studio_website`: The homepage link points to the\
            \ website URL set\nfor the brand."
          enum:
          - "studio_homepage"
          - "studio_website"
          nullable: true
          type: "string"
        showSocialSharingLinks:
          description: "Whether to display social media sharing links for the event."
          type: "boolean"
        socialSharingMessage:
          description: "The default message to include when a social sharing link\
            \ is\nclicked."
          maxLength: 93
          nullable: true
          type: "string"
        priceSheetId:
          description: "The identifier for the price sheet the event uses. If `null`,\
            \ then\nthe shopping cart for the event is turned off."
          oneOf:
          - type: "integer"
          - type: "string"
          nullable: true
        priceSheet:
          description: "The price sheet for the event, if applicable. (TODO: price\
            \ sheets\nnot supported in the API at this time.)"
          readOnly: true
          nullable: true
        pickupOptions:
          description: "An array of order pickup options supported by the event."
          type: "array"
          items:
            description: "A string identifying a pickup option."
            type: "string"
            enum:
            - "studio"
            - "dropship"
        viewType:
          description: "The layout type for the event photo pages. The possible view\
            \ types\nare:\n\n* `vmason`: Cascade layout\n* `hmason`: Subway layout"
          type: "string"
          enum:
          - "vmason"
          - "hmason"
        thumbnailSize:
          description: "Relative size of thumbnails for display."
          nullable: true
          type: "string"
          enum:
          - "s"
          - "m"
          - "l"
          - "xl"
          x-internal: true
        thumbnailGutterWidth:
          description: "Relative size of thumbnail gutter width for display."
          type: "string"
          enum:
          - "s"
          - "m"
          - "l"
          - "xl"
          x-internal: true
        landingLayoutType:
          description: "The layout type for the event landing page. The possible landing\n\
            layout types are:\n\n* `basic`: Accent\n* `full-bottom`: Limelight\n*\
            \ `full-bottom-alt`: Foundation\n* `full-center`: Marquee\n* `hexagon`:\
            \ Symmetry\n* `split`: Detail\n* `no-cover`: Headline"
          type: "string"
          enum:
          - "full-bottom"
          - "full-center"
          - "split"
          - "basic"
          - "no-cover"
        eventCategoryId:
          description: "The category identifier associated with the event."
          nullable: true
          type: "integer"
        eventCategory:
          description: "The human-readable name of the category of the event."
          readOnly: true
          nullable: true
          type: "string"
        emailAutomationGroupId:
          description: "The identifier for the email automation group associated with\
            \ the\nevent."
          nullable: true
          type: "integer"
        hideAlbums:
          description: "Whether to hide all the albums in an event.\n\nThis is only\
            \ available if the studio has been flagged in the admin\nwith this permission."
          type: "boolean"
        hideAllPhotosAlbum:
          description: "Whether to hide the \"All Photos\" default photo album."
          type: "boolean"
        hidePhotoCountAlbums:
          description: "Whether to hide the photo count for all albums in the client\
            \ facing\ngallery."
          type: "boolean"
        minimumOrderAmount:
          description: "The minimum amount required for any order placed for the event."
          nullable: true
          type: "number"
        showFilenames:
          description: "Whether to show the filenames of photos in the event."
          type: "boolean"
        exifSearchFieldLabel:
          description: "The label for the EXIF data search field for the event.\n\n\
            This is only available if the studio has been flagged in the admin\nwith\
            \ this permission."
          maxLength: 40
          nullable: true
          type: "string"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in the\
            \ event."
          type: "string"
        allowFreeDigitals:
          description: "Whether to allow clients to download free digitals from the\
            \ event."
          type: "boolean"
        allowFreeDigitalsDownloadAll:
          description: "If `allowFreeDigitals` is true, whether to allow clients to\
            \ download\nthe entire event."
          type: "boolean"
        printRelease:
          description: "Print release text that is sent to the client when\nShootProof-fulfilled\
            \ digitals are downloaded. Some HTML is allowed."
          maxLength: 7500
          nullable: true
          type: "string"
        playlistId:
          description: "The identifier for the playlist the event uses."
          nullable: true
          type: "integer"
        playlist:
          description: "The playlist for the event, if applicable. (TODO: playlists\
            \ not\nsupported in the API at this time.)"
          readOnly: true
          nullable: true
        musicAutoPlay:
          description: "If there is a playlist defined, whether to auto-play the music\
            \ when\nthe even loads in the browser."
          type: "boolean"
        allowAddAllToCart:
          description: "Whether to show \"Buy All\" buttons, allowing clients to add\
            \ all\nphotos in the event to their cart. If this is set to true, \n`priceSheetShowPackagesOnly`\
            \ MUST be false."
          type: "boolean"
        priceSheetShowPackagesOnly:
          description: "Whether to limit the display of price sheet items to only\
            \ those that are packages.\nIf this is set to true, `allowAddAllToCart`\
            \ MUST be false."
          type: "boolean"
        autoArchiveDays:
          description: "If provided, the number of days after event expiration to\n\
            automatically archive the event."
          nullable: true
          type: "integer"
        allowPayLater:
          description: "Whether to allow clients to pay later."
          type: "boolean"
        checkoutText:
          description: "If provided, a message shown to the client at checkout."
          maxLength: 1000
          nullable: true
          type: "string"
        autoSetAlbumCovers:
          description: "Whether to autogenerate album cover images from the first\
            \ image in\nthe album."
          type: "boolean"
    Feedback:
      title: "Feedback"
      description: "A feedback entry."
      type: "object"
      required:
      - "featureName"
      x-internal: true
      properties:
        featureName:
          description: "String indicating the feature that the feedback is for. Typically\n\
            should not be user-provided, but only provided by\nShootProof-authored\
            \ client code."
          type: "string"
          enum:
          - "Invoices"
          - "Gallery Management"
        category:
          description: "String indicating additional information about the feedback\
            \ being\ngiven about the feature. Typically should not be user-provided,\
            \ but\nonly provided by ShootProof-authored client code."
          type: "string"
        rating:
          description: "Rating value, 1-3. One or both of `rating` and `message` must\
            \ be\nprovided."
          type: "integer"
          enum:
          - 1
          - 2
          - 3
        message:
          description: "Free-form feedback from end user. One or both of `rating`\
            \ and\n`message` must be provided."
          type: "string"
          maximum: 1000
    Id:
      title: "Entity Identifier"
      description: "An entity identifier. It may be either an integer or a universally\
        \ unique\nidentifier (UUID) represented as a string."
      oneOf:
      - title: "UUID Entity Identifier"
        description: "A UUID identifier for the entity."
        type: "string"
        format: "uuid"
        example: "74b84967-14a9-4709-a076-30b6da39744d"
      - title: "Integer Entity Identifier"
        description: "An integer identifier for the entity."
        type: "integer"
        example: 12345
    ImageDisplayUrl:
      description: "An image display URL. All properties are optional and should not\
        \ be\nrelied upon as always available."
      type: "object"
      readOnly: true
      example:
        thumb: "https://example.com/e7e2797.jpg"
        large: "https://example.com/98f3a6c.jpg"
      properties:
        thumb:
          description: "A URL indicating a thumbnail-sized version of the image."
          type: "string"
          format: "uri"
        small:
          description: "A URL indicating a small-sized version of the image."
          type: "string"
          format: "uri"
        medium:
          description: "A URL indicating a medium-sized version of the image."
          type: "string"
          format: "uri"
        mediumLarge:
          description: "A URL indicating a medium-to-large-sized version of the image."
          type: "string"
          format: "uri"
        large:
          description: "A URL indicating a large-sized version of the image."
          type: "string"
          format: "uri"
        extraLarge:
          description: "A URL indicating an extra-large-sized version of the image."
          type: "string"
          format: "uri"
        extraLarge2:
          description: "A URL indicating an extra-large-2-sized version of the image."
          type: "string"
          format: "uri"
        extraLarge3:
          description: "A URL indicating an extra-large-3-sized version of the image."
          type: "string"
          format: "uri"
        original:
          description: "A URL indicating an original version of the image."
          type: "string"
          format: "uri"
    Invoice:
      title: "Invoice"
      description: "An invoice."
      type: "object"
      required:
      - "type"
      - "brandThemeId"
      - "contactId"
      - "issueDate"
      - "acceptedPaymentTypes"
      - "salesTaxPercent"
      - "languageCode"
      - "subtotal"
      - "grandTotal"
      - "items"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this invoice."
          type: "integer"
        publicId:
          description: "The public identifier for this invoice (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
          readOnly: true
        customInvoiceId:
          description: "A client-facing identifier for this invoice, starting at 1000\
            \ for\neach studio."
          type: "integer"
          readOnly: true
        invoiceStatus:
          description: "The human-readable name of the current status of this invoice."
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid-in-full"
          - "canceled"
          - "archived"
        invoiceTemplateId:
          description: "The identifier for the invoice template from which this invoice\
            \ was\ncreated."
          nullable: true
          type: "integer"
        brandThemeId:
          description: "The identifier for the brand theme this invoice uses."
          type: "integer"
        brandTheme:
          $ref: "#/components/schemas/BrandTheme"
        contactId:
          $ref: "#/components/schemas/Id"
        contact:
          allOf:
          - readOnly: true
          - $ref: "#/components/schemas/Contact"
        emailAutomationGroupId:
          description: "The identifier for the email automation group this invoice\
            \ uses."
          nullable: true
          type: "integer"
        issueDate:
          description: "The date on which this invoice was issued."
          type: "string"
          format: "date-time"
        finalDueDate:
          description: "The date on which this invoice must be paid in full."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
        acceptedPaymentTypes:
          description: "An array of payment types this invoice accepts."
          type: "array"
          items:
            description: "A string identifying a specific payment type."
            type: "string"
            enum:
            - "cash-check"
            - "credit-card"
        salesTaxPercent:
          description: "A decimal number from 0-100, specifying the sales tax percentage."
          nullable: true
          type: "number"
          minimum: 0
          maximum: 100
        salesTaxTitle:
          description: "A label to apply to the sales tax percent on the invoice when\
            \ viewed\nby the client."
          nullable: true
          type: "string"
        retainerPercent:
          description: "Suggested amount of retainer in a percentage from 1-100. If\
            \ a\nretainer is defined, one of `retainerPercent` or\n`retainerFixedAmount`\
            \ will be non-null."
          minimum: 1
          maximum: 100
          nullable: true
          type: "number"
        retainerFixedAmount:
          description: "Suggested fixed amount of retainer. If a retainer is defined,\
            \ one of\n`retainerPercent` or `retainerFixedAmount` will be non-null."
          nullable: true
          type: "number"
        invoiceRetainerLabel:
          description: "This label represents how the studio wishes to refer to the\
            \ initial\npayment represented by `retainerPercent` or `retainerFixedAmount`\
            \ for this\ninvoice. This property is required if `retainerPercent` or\n\
            `retainerFixedAmount` contain non-null values.\n\nThe following labels\
            \ are available. You are responsible for displaying\nappropriate human-readable\
            \ strings for these labels, translated for your\naudience.\n\n| ShootProof\
            \ Identifier | Description |\n| --------------------- | ----------- |\n\
            | `non-refundable-payment` | The initial payment should be referred to\
            \ as a \"non-refundable payment\" when displaying the invoice to the studio's\
            \ customer. |\n| `deposit` | The initial payment should be referred to\
            \ as a \"deposit\" when displaying the invoice to the studio's customer.\
            \ |\n| `retainer` | The initial payment should be referred to as a \"\
            retainer\" when displaying the invoice to the studio's customer. |"
          nullable: true
          type: "string"
          enum:
          - "non-refundable-payment"
          - "deposit"
          - "retainer"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in this\
            \ invoice."
          type: "string"
        currencyCode:
          description: "Identifies the currency used for this invoice."
          type: "string"
          readOnly: true
        currencySymbol:
          description: "The currency symbol for the currency used for this invoice."
          type: "string"
          readOnly: true
        subtotal:
          description: "The invoice subtotal."
          type: "number"
        taxableSubtotal:
          description: "The taxable subtotal of the invoice, based on its taxable\
            \ items."
          type: "number"
        salesTaxTotal:
          description: "The total amount of sales tax on the invoice."
          type: "number"
        grandTotal:
          description: "The invoice grand total."
          type: "number"
        retainerTotal:
          description: "The total amount for the invoice retainer."
          type: "number"
          readOnly: true
        paidTotal:
          description: "The total amount of this invoice that has been paid."
          type: "number"
          readOnly: true
        dueTotal:
          description: "The total amount of this invoice that is due."
          type: "number"
          readOnly: true
        discountTotal:
          description: "The total amount of all discounts applied to this invoice."
          type: "number"
          readOnly: true
        paymentConfirmationText:
          description: "A message sent to the client upon receipt of payment."
          type: "string"
        notesToClient:
          description: "Notes to display on the invoice for the client."
          type: "string"
        creditCardOnFile:
          description: "The credit card on file for this invoice, if applicable."
          allOf:
          - $ref: "#/components/schemas/InvoiceCreditCard"
          - nullable: true
        items:
          description: "An array of line items for this invoice."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceItem"
        discounts:
          description: "An array of discounts applied to this invoice template."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceDiscount"
          maxItems: 1
        installments:
          description: "An array of invoice installments, defining the installment\
            \ schedule\nfor this invoice. Installments are required for invoices having\
            \ a grandTotal\ngreater than zero, but disallowed for Invoices having\
            \ a grandTotal of zero."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceInstallment"
        payments:
          description: "An array of invoice payments, showing a history of all payments\
            \ made\non this invoice."
          readOnly: true
          type: "array"
          items:
            $ref: "#/components/schemas/InvoicePayment"
        creditCardTransactions:
          title: "Credit Card Transaction for Invoice"
          description: "An array of invoice credit card transactions, showing all\
            \ attempts\nto charge a card for this invoice, including approved/declined\n\
            attempts."
          readOnly: true
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceCreditCardTransaction"
        activity:
          description: "A list of activities that have occurred with this invoice."
          readOnly: true
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceActivity"
        contracts:
          description: "An array of linked contracts."
          type: "array"
          items:
            $ref: "#/components/schemas/ContractMinimal"
          readOnly: true
        created:
          description: "The creation date of this invoice."
          type: "string"
          format: "date-time"
          readOnly: true
        isHidden:
          description: "Whether or not the invoice should be hidden"
          type: "boolean"
        cancelationMessage:
          description: "Optional cancelation message to include in studio-to-client\
            \ emails\nsent when invoice status moves to canceled state."
          type: "string"
    InvoiceActivity:
      title: "Invoice Activity"
      description: "Activity performed on an invoice."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-activity"
        invoiceActivityAction:
          description: "The slug string name for the activity."
          type: "string"
          enum:
          - "studio-created"
          - "studio-edited"
          - "studio-canceled"
          - "payment-received"
          - "sent-client"
          - "autopay-enabled"
          - "autopay-disabled"
          - "client-viewed"
          - "studio-viewed"
          - "payment-refund"
        amount:
          description: "The amount of money related to the activity, if applicable."
          nullable: true
          type: "number"
        currencyCode:
          description: "Identifies the currency for the amount, if applicable."
          nullable: true
          type: "string"
        currencySymbol:
          description: "The currency symbol for the currency used for this invoice\
            \ activity,\nif applicable."
          nullable: true
          type: "string"
        created:
          description: "The date on which this activity took place."
          type: "string"
          format: "date-time"
    InvoiceCollection:
      allOf:
      - title: "Invoice Collection"
        description: "A collection of invoices"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "invoice-collection"
          meta:
            type: "object"
            required:
            - "invoiceTotals"
            properties:
              invoiceTotals:
                description: "Total counts for various types of invoices in various\
                  \ states."
                type: "object"
                required:
                - "all"
                - "awaiting_payment"
                - "overdue"
                - "paid"
                - "canceled_hidden"
                properties:
                  all:
                    description: "The total number of invoices for the brand."
                    type: "integer"
                  awaiting_payment:
                    description: "The total number of invoices for the brand considered\n\
                      to be awaiting payment"
                    type: "integer"
                  overdue:
                    description: "The total number of invoices for the brand considered\n\
                      to be overdue"
                    type: "integer"
                  paid:
                    description: "The total number of invoices for the brand considered\n\
                      to be paid"
                    type: "integer"
                  canceled_hidden:
                    description: "The total number of invoices for the brand considered\n\
                      to be canceled OR hidden"
                    type: "integer"
          items:
            type: "array"
            items:
              $ref: "#/components/schemas/InvoiceInList"
      - $ref: "#/components/schemas/List"
    InvoiceCreditCard:
      title: "Credit Card for Invoice"
      description: "A credit card for an invoice payment."
      type: "object"
      allOf:
      - type: "object"
        required:
        - "emailAddress"
        - "enableAutoPay"
        properties:
          emailAddress:
            description: "The email address for the person making the payment."
            type: "string"
            format: "email"
          enableAutoPay:
            description: "Whether auto-pay should be turned on for this credit card\
              \ on the\ngiven invoice."
            type: "boolean"
      - $ref: "#/components/schemas/CreditCard"
    InvoiceCreditCardTransaction:
      title: "Credit Card Transaction for Invoice"
      description: "An invoice credit card transaction."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-credit-card-transaction"
        id:
          description: "The identifier for this invoice credit card transaction."
          type: "integer"
        invoiceId:
          description: "Invoice identifier to which this credit card transaction relates."
          type: "integer"
        invoicePaymentId:
          description: "Invoice payment identifier to which this credit card transaction\n\
            relates."
          type: "integer"
          nullable: true
        amount:
          description: "The amount for which this transactoin was made."
          type: "number"
        currencyCode:
          description: "Identifies the currency in which this transaction was made."
          type: "string"
        result:
          description: "The slug string of the result of this invoice credit card\
            \ transaction."
          type: "string"
          enum:
          - "approved"
          - "declined"
        maskedCreditCardNumber:
          description: "The masked credit card number used for this invoice credit\
            \ card\ntransaction."
          type: "string"
          readOnly: true
        created:
          description: "The date on which this transaction was logged in the system."
          type: "string"
          format: "date-time"
          readOnly: true
    InvoiceDiscount:
      allOf:
      - $ref: "#/components/schemas/InvoiceDiscountBase"
      - title: "Invoice Discount"
        description: "An invoice discount may be added to an [invoice](https://developer.shootproof.com/reference/studio/components/schemas/invoice/)\n\
          or [invoice template](https://developer.shootproof.com/reference/studio/components/schemas/invoice-template/)\n\
          to reduce the total amount of the invoice by the specified discount value."
        properties:
          type:
            enum:
            - "invoice-discount"
    InvoiceDiscountBase:
      type: "object"
      required:
      - "type"
      - "name"
      - "discountType"
      - "value"
      properties:
        type:
          $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "A short name to use for this discount."
          type: "string"
          maxLength: 20
          example: "25% Off Special"
        description:
          description: "A description of the discount for use as display text on the\
            \ invoice."
          type: "string"
          example: "Take 25% off your entire order as a special “Thank You” for your\
            \ business."
        discountType:
          description: "The type of discount represented by the value."
          type: "string"
          enum:
          - "percent"
          - "fixed"
        value:
          description: "The amount this discount represents. This value may be a fixed\
            \ amount (if\n`discountType` is \"fixed\") or a number between `0.0` and\
            \ `100.0`,\nrepresenting a percentage of the total invoice (if `discountType`\
            \ is\n\"percent\").\n\nThe discount value is allowed to be greater than\
            \ the grand total of the\ninvoice. In this case, the grand total will\
            \ never be less than `0.00`."
          type: "number"
          minimum: 0
          example: 25
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    InvoiceDiscountTemplate:
      allOf:
      - $ref: "#/components/schemas/InvoiceDiscountBase"
      - title: "Invoice Discount Template"
        description: "An invoice discount template may be used when adding a discount\
          \ to an\n[invoice](https://developer.shootproof.com/reference/studio/components/schemas/invoice/)\n\
          or [invoice template](https://developer.shootproof.com/reference/studio/components/schemas/invoice-template/).\n\
          It is a useful way to store invoice discounts for repeated use."
        properties:
          type:
            enum:
            - "invoice-discount-template"
    InvoiceDiscountTemplateCollection:
      allOf:
      - $ref: "#/components/schemas/List"
      - title: "Collection of Invoice Discount Templates"
        properties:
          type:
            enum:
            - "invoice-discount-template-collection"
          items:
            title: "Invoice Discount Template"
            type: "array"
            items:
              $ref: "#/components/schemas/InvoiceDiscountTemplate"
    InvoiceEmail:
      allOf:
      - type: "object"
        description: "An email message to a client about their invoice."
        properties:
          emailTemplateId:
            description: "The identifier for the email template chosen (if applicable)."
            type: "integer"
      - $ref: "#/components/schemas/StudioToClientEmail"
    InvoiceInList:
      title: "Invoice"
      description: "An invoice as viewed from a collection."
      type: "object"
      required:
      - "type"
      - "links"
      - "id"
      - "publicId"
      - "customInvoiceId"
      - "invoiceStatusId"
      - "invoiceStatus"
      - "contactId"
      - "contactName"
      - "finalDueDate"
      - "currencyCode"
      - "grandTotal"
      - "amountDue"
      - "created"
      - "isHidden"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this invoice."
          type: "integer"
        publicId:
          description: "The public identifier for this invoice (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
        customInvoiceId:
          description: "A client-facing identifier for this invoice, starting at 1000\
            \ for\neach studio."
          type: "integer"
        invoiceStatus:
          description: "The human-readable name of the current status of this invoice."
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid-in-full"
          - "canceled"
          - "archived"
        contactId:
          $ref: "#/components/schemas/Id"
        contactName:
          description: "The full name of the contact associated with this invoice."
          type: "string"
        finalDueDate:
          description: "The date on which this invoice must be paid in full."
          format: "date-time"
          nullable: true
          type: "string"
        retainerPercent:
          description: "Suggested amount of retainer in a percentage from 1-100. If\
            \ a\nretainer is defined, one of `retainerPercent` or\n`retainerFixedAmount`\
            \ will be non-null."
          minimum: 1
          maximum: 100
          nullable: true
          type: "number"
        retainerFixedAmount:
          description: "Suggested fixed amount of retainer. If a retainer is defined,\
            \ one of\n`retainerPercent` or `retainerFixedAmount` will be non-null."
          nullable: true
          type: "number"
        currencyCode:
          description: "Identifies the currency represented in `price`."
          type: "string"
        currencySymbol:
          description: "The currency symbol for the currency used for this invoice."
          type: "string"
        grandTotal:
          description: "The grand total of all items on the invoice, including any\n\
            applicable sales tax."
          nullable: true
          type: "number"
        amountDue:
          description: "The total amount remaining to be paid on this invoice against\
            \ the\ngrand total."
          nullable: true
          type: "number"
        installments:
          description: "An array of invoice installments, defining the installment\
            \ schedule\nfor this invoice."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceInstallment"
        contracts:
          description: "An array of linked contracts."
          type: "array"
          items:
            $ref: "#/components/schemas/ContractMinimal"
        created:
          description: "The creation date of this invoice."
          type: "string"
          format: "date-time"
        isHidden:
          description: "Whether or not the invoice is hidden"
          type: "boolean"
    InvoiceInstallment:
      title: "Invoice Installment"
      description: "An invoice installment."
      type: "object"
      required:
      - "type"
      - "isRetainer"
      - "isFixed"
      - "amount"
      - "dueDate"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-installment"
        id:
          description: "The identifier for this invoice installment."
          type: "integer"
        invoiceInstallmentStatus:
          description: "The status slug for this invoice installment."
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid-in-full"
          readOnly: true
        isRetainer:
          description: "Whether this installment represents a retainer for a job."
          type: "boolean"
        isFixed:
          description: "Whether this amount is fixed.\n\nIf the installment amount\
            \ is flagged as `fixed`, then it may not\nchange automatically due to\
            \ recalculations based on changes to the\ninvoice grand total or other\
            \ installment amounts. It may only change\nif the user directly edits\
            \ this amount."
          type: "boolean"
        amount:
          description: "The amount due for this installment."
          type: "number"
        dueDate:
          description: "The date on which this installment is due."
          type: "string"
          format: "date-time"
    InvoiceItem:
      title: "Invoice Item"
      description: "An invoice item."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      - "itemPrice"
      - "quantity"
      - "totalPrice"
      - "isTaxable"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-item"
        id:
          description: "The identifier for this invoice item."
          type: "integer"
        invoiceItemTemplateId:
          description: "The identifier of the invoice item template from which this\
            \ item was\ncreated, if applicable."
          nullable: true
          type: "integer"
        name:
          description: "The name of this invoice item."
          type: "string"
        description:
          description: "A description for this invoice item."
          type: "string"
        displayOrder:
          description: "The order in which this item should appear in the list of\
            \ items."
          type: "integer"
        itemPrice:
          description: "The price for a single one of this invoice item."
          type: "number"
        quantity:
          description: "The quantity purchased of this invoice item."
          type: "integer"
        totalPrice:
          description: "The invoice item price multiplied by the quantity."
          type: "number"
        isTaxable:
          description: "Whether this invoice item is taxable."
          type: "boolean"
    InvoiceItemTemplate:
      title: "Invoice Item Template"
      description: "An invoice item template."
      type: "object"
      required:
      - "type"
      - "name"
      - "itemPrice"
      - "quantity"
      - "totalPrice"
      - "isTaxable"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-item-template"
        id:
          description: "The identifier for this invoice item template."
          type: "integer"
        links:
          $ref: "#/components/schemas/Links"
        name:
          description: "The name of this invoice item template."
          type: "string"
        description:
          description: "A description for this invoice item template."
          type: "string"
        itemPrice:
          description: "The price for a single one of this invoice item template."
          type: "number"
        quantity:
          description: "The default quantity for this invoice item template."
          type: "integer"
        totalPrice:
          description: "The invoice item template price multiplied by the quantity."
          type: "number"
        isTaxable:
          description: "Whether this invoice item template is taxable."
          type: "boolean"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    InvoiceMinimal:
      title: "Invoice"
      description: "A minimal representation of an invoice."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this invoice."
          type: "integer"
        publicId:
          description: "The public identifier for this invoice (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
          readOnly: true
        customInvoiceId:
          description: "A client-facing identifier for this invoice, starting at 1000\
            \ for\neach studio."
          type: "integer"
          readOnly: true
        invoiceStatus:
          description: "The human-readable name of the current status of this invoice."
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid-in-full"
          - "canceled"
          - "archived"
        finalDueDate:
          description: "The date on which this invoice must be paid in full."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
    InvoicePayment:
      title: "Invoice Payment"
      description: "An invoice payment."
      type: "object"
      required:
      - "type"
      - "amount"
      - "paymentFundsType"
      - "paymentDate"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-payment"
        id:
          description: "The identifier for this invoice payment."
          type: "integer"
        amount:
          description: "The amount of this payment."
          type: "number"
        currencyCode:
          description: "Identifies the currency in which this payment was made. This\
            \ is\nalways the currency of the invoice; it cannot be set when making\
            \ a\npayment."
          type: "string"
          readOnly: true
        currencySymbol:
          description: "The currency symbol for the currency used for this payment."
          type: "string"
          readOnly: true
        nameOnCard:
          description: "The card-holder name."
          type: "string"
        billingPostalCode:
          description: "The billing address postal code. May be `null` for invoice\
            \ payments\nmade prior to the introduction of this value."
          type: "string"
          pattern: "^[A-Za-z0-9 -]{0,10}$"
        emailAddress:
          description: "The email address for the person making the payment."
          type: "string"
          format: "email"
        paymentFundsType:
          description: "The type of funds received for this payment."
          type: "string"
          enum:
          - "cash"
          - "check"
          - "credit-card"
        checkNumber:
          description: "If this payment was made by check, the check number for the\
            \ payment."
          nullable: true
          type: "integer"
        paymentDate:
          description: "The date on which this payment was made."
          type: "string"
          format: "date-time"
        isPaymentOnHold:
          description: "If `paymentFundsType` is \"credit-card\" and payment was made\
            \ with\nShootProof Payments, this flag indicates whether the funds for\
            \ this\npayment are currently on hold. This is typically the case during\
            \ a\nfive-day period after credit payment was made, but before ShootProof\n\
            releases the profit to the Studio.\n\n* If `false`, the payment has been\
            \ released.\n* If `null`, releasing of funds is not applicable such as\
            \ when made\nwith cash/check, or a non-ShootProof Payments gateway, such\
            \ as\nAuthorize.Net, Braintree, or PayPal Pro.\n* If either `isPaymentOnHold`\
            \ or `isPaymentReleased` are non-null,\nonly one of them will be `true`\
            \ at any point a time."
          readOnly: true
          nullable: true
          type: "boolean"
        isPaymentReleased:
          description: "If `paymentFundsType` is \"credit-card\" and payment was made\
            \ with\nShootProof Payments, this flag indicates whether the funds from\
            \ this\npayment have been released.\n\n* If `false`, the payment is still\
            \ on hold.\n* If `null`, releasing of funds is not applicable such as\
            \ when made\nwith cash/check, or a non-ShootProof Payments gateway, such\
            \ as\nAuthorize.Net, Braintree, or PayPal Pro.\n* If either `isPaymentOnHold`\
            \ or `isPaymentReleased` are non-null,\nonly one of them will be `true`\
            \ at any point a time."
          readOnly: true
          nullable: true
          type: "boolean"
        paymentReleasedDate:
          description: "If `isPaymentReleased` is `true`, this indicates the date\
            \ on which\nthe payment was released."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
        isRefundable:
          description: "Whether the payment is able to be refunded."
          type: "boolean"
          readOnly: true
        amountLessRefunds:
          description: "The total amount of this payment, minus any refunds applied\
            \ to it.\nThis is `null` if the payment is a refund."
          nullable: true
          type: "number"
        note:
          description: "A note about the payment."
          nullable: true
          type: "string"
        wasAutomated:
          description: "Indicates that payment was made via automated payment processor."
          type: "boolean"
          readOnly: true
        usedCurrentInvoiceCreditCard:
          description: "Indicates that payment was made with the current invoice credit\
            \ card\non file."
          type: "boolean"
          readOnly: true
        creditCard:
          description: "When creating a new invoice payment, include the credit card\n\
            property with this object, if paying by credit card. If you wish to\n\
            use the invoice credit card that is already on file, set this\nproperty\
            \ to boolean `true`.\n\nThis property is `null` in responses."
          oneOf:
          - allOf:
            - nullable: true
            - $ref: "#/components/schemas/InvoiceCreditCard"
          - description: "`true` to use the invoice credit card on file for this payment."
            type: "boolean"
            nullable: true
        created:
          description: "The date on which this payment was logged in the system."
          type: "string"
          format: "date-time"
          readOnly: true
    InvoiceRefund:
      title: "Invoice Refund"
      description: "An invoice refund."
      type: "object"
      required:
      - "type"
      - "invoicePaymentId"
      - "amount"
      - "refundDate"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-refund"
        invoicePaymentId:
          description: "The identifier for the invoice payment to refund."
          type: "integer"
        amount:
          description: "The amount of the payment to refund."
          type: "number"
        refundDate:
          description: "The date on which this refund was made."
          type: "string"
          format: "date-time"
        note:
          description: "A note about the refund."
          nullable: true
          type: "string"
        emailAdditionalMessage:
          description: "Optional message to include in email sent to client and payer.\
            \ May\ninclude HTML tags, but only whitelisted tags will be included."
          nullable: true
          type: "string"
    InvoiceTemplate:
      title: "Invoice Template"
      description: "An invoice template."
      type: "object"
      required:
      - "type"
      - "name"
      - "brandThemeId"
      - "acceptedPaymentTypes"
      - "languageCode"
      - "items"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "invoice-template"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this invoice template"
          type: "integer"
        name:
          description: "The name of this invoice template."
          type: "string"
        brandThemeId:
          description: "The identifier for the brand theme this invoice template uses."
          type: "integer"
        brandTheme:
          $ref: "#/components/schemas/BrandTheme"
        emailAutomationGroupId:
          description: "The identifier for the email automation group this invoice\
            \ template\nuses."
          nullable: true
          type: "integer"
        acceptedPaymentTypes:
          description: "An array of payment types this invoice template accepts."
          type: "array"
          items:
            description: "A string identifying a specific payment type."
            type: "string"
            enum:
            - "cash-check"
            - "credit-card"
        salesTaxPercent:
          description: "A decimal number from 0-100, specifying the sales tax percentage.\
            \ Required\nif `salesTaxTitle` has a non-zero length value."
          type: "number"
          minimum: 0
          maximum: 100
        salesTaxTitle:
          description: "A label to apply to the sales tax percent on the invoice when\
            \ viewed\nby the client. Required if `salesTaxPercent` has a non-zero\
            \ length value."
          type: "string"
        retainerPercent:
          description: "Suggested amount of retainer in a percentage from 1-100. If\
            \ a\nretainer is defined, one of `retainerPercent` or\n`retainerFixedAmount`\
            \ will be non-null."
          minimum: 1
          maximum: 100
          nullable: true
          type: "number"
        retainerFixedAmount:
          description: "Suggested fixed amount of retainer. If a retainer is defined,\
            \ one of\n`retainerPercent` or `retainerFixedAmount` will be non-null."
          nullable: true
          type: "number"
        invoiceRetainerLabel:
          description: "This label represents how the studio wishes to refer to the\
            \ initial\npayment represented by `retainerPercent` or `retainerFixedAmount`\
            \ for this\ninvoice. This property is required if `retainerPercent` or\n\
            `retainerFixedAmount` contain non-null values.\n\nThe following labels\
            \ are available. You are responsible for displaying\nappropriate human-readable\
            \ strings for these labels, translated for your\naudience.\n\n| ShootProof\
            \ Identifier | Description |\n| --------------------- | ----------- |\n\
            | `non-refundable-payment` | The initial payment should be referred to\
            \ as a \"non-refundable payment\" when displaying the invoice to the studio's\
            \ customer. |\n| `deposit` | The initial payment should be referred to\
            \ as a \"deposit\" when displaying the invoice to the studio's customer.\
            \ |\n| `retainer` | The initial payment should be referred to as a \"\
            retainer\" when displaying the invoice to the studio's customer. |"
          nullable: true
          type: "string"
          enum:
          - "non-refundable-payment"
          - "deposit"
          - "retainer"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in this\
            \ invoice\ntemplate."
          type: "string"
        currencyCode:
          description: "Identifies the currency represented in `price`."
          type: "string"
          readOnly: true
        currencySymbol:
          description: "The currency symbol for the currency used for this invoice\
            \ template."
          type: "string"
          readOnly: true
        subtotal:
          description: "The invoice template subtotal."
          type: "number"
        taxableSubtotal:
          description: "The taxable subtotal of the invoice template, based on its\
            \ taxable\nitems."
          type: "number"
        salesTaxTotal:
          description: "The total amount of sales tax on the invoice template."
          type: "number"
        grandTotal:
          description: "The invoice template grand total."
          type: "number"
        paymentConfirmationText:
          description: "A message sent to the client upon receipt of payment."
          type: "string"
        notesToClient:
          description: "Notes to display on the invoice for the client."
          type: "string"
        items:
          description: "An array of line items for this invoice template."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceItem"
        discounts:
          description: "An array of discounts applied to this invoice template."
          type: "array"
          items:
            $ref: "#/components/schemas/InvoiceDiscount"
          maxItems: 1
        created:
          description: "The creation date of this invoice."
          type: "string"
          format: "date-time"
          readOnly: true
    Lab:
      title: "Lab"
      description: "A lab."
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "lab"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of this lab."
          type: "string"
          example: "Acme Lab"
    LabCatalog:
      title: "Lab Catalog"
      description: "A lab catalog."
      type: "object"
      properties:
        type:
          allOf:
          - enum:
            - "lab-catalog"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this lab catalog, or `null` if this is\
            \ the\n\"empty\" lab catalog."
          nullable: true
          type: "integer"
        description:
          description: "Derived in the lab catalog transformer. Deprecated due to\
            \ lack of translation."
          type: "string"
          deprecated: true
        isLabFulfilled:
          description: "Whether this represents a catalog of lab-fulfilled items."
          type: "boolean"
        currencyCode:
          description: "The type of currency used for this lab catalog, or `null`\
            \ if this\ncatalog has no currency code set."
          nullable: true
          type: "string"
        currencySymbol:
          description: "The currency symbol for the type of currency used for this\
            \ lab\ncatalog."
          nullable: true
          type: "string"
        boundsDisplaySort:
          description: "Returns a slug that denotes whether width precedes height\
            \ (or vice versa)\nwhen displaying bounds (e.g. 8\" x 10\" vs 10\" x 8\"\
            )."
          type: "string"
          enum:
          - "width-height"
          - "height-width"
        lab:
          allOf:
          - description: "The lab to which this lab catalog belongs, or `null` if\
              \ this is the\n\"empty\" lab catalog."
            nullable: true
          - $ref: "#/components/schemas/Lab"
    LabCatalogAddOnOption:
      title: "Lab Catalog Add-on Option"
      description: "An optional add-on which can be added to an item ordered from\
        \ a lab\ncatalog."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "lab-catalog-add-on-option"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the lab catalog add-on option."
          type: "integer"
        addOnGroup:
          description: "The type of add-on for which the option is one possible choice."
          type: "string"
        optionId:
          description: "An external ID of the add-on option as defined in the lab's\
            \ catalog."
          nullable: true
          type: "string"
        label:
          description: "The name of the option as defined and used externally by the\
            \ lab."
          type: "string"
        retailPrice:
          description: "A decimal value of the retail price of the add-on option."
          type: "number"
        displayName:
          description: "The name of the add-on option to be used when displaying the\
            \ option\nto a user."
          type: "string"
        description:
          description: "Display text shown to the user in order to give them information\n\
            concerning the option."
          type: "string"
    LabCatalogCollection:
      title: "Lab Catalog Collection"
      description: "A collection of lab catalogs."
      allOf:
      - $ref: "#/components/schemas/List"
      - type: "object"
        properties:
          type:
            allOf:
            - enum:
              - "lab-catalog-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Lab Catalog"
            type: "array"
            items:
              $ref: "#/components/schemas/LabCatalog"
    LabCatalogGroup:
      title: "Lab Catalog Group"
      description: "A container for a collection of related products within the lab\
        \ catalog."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          allOf:
          - enum:
            - "lab-catalog-group"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the lab catalog group."
          type: "integer"
        name:
          description: "The name of the lab catalog group."
          type: "string"
        displayOrder:
          description: "The order in which the group should be displayed in a list\
            \ of groups\nfor a lab catalog."
          type: "integer"
        description:
          description: "Display text shown to the user in order to give them information\n\
            concerning the group and the type of products which it may contain."
          nullable: true
          type: "string"
    LabCatalogGroupCollection:
      title: "Lab Catalog Group Collection"
      type: "object"
      allOf:
      - properties:
          type:
            allOf:
            - enum:
              - "lab-catalog-group-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Lab Catalog Group"
            type: "array"
            items:
              $ref: "#/components/schemas/LabCatalogGroup"
      - $ref: "#/components/schemas/List"
    LabCatalogProduct:
      title: "Lab Catalog Product"
      description: "A product offered by the lab."
      type: "object"
      properties:
        type:
          allOf:
          - enum:
            - "lab-catalog-product"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the lab catalog product."
          type: "integer"
        name:
          description: "The name of the lab catalog product."
          type: "string"
        alternateDisplayName:
          description: "An alternate name for the product."
          nullable: true
          type: "string"
        description:
          description: "Display text shown to the user in order to give them information\n\
            concerning the product."
          nullable: true
          type: "string"
        bounds:
          description: "A comma delimited list that specifies the product bounds."
          type: "string"
        boundsName:
          description: "The name given to the bounds description for the product."
          type: "string"
          nullable: true
        retailPrice:
          description: "A decimal value of the retail price of the product."
          type: "number"
        productSize:
          description: "The size of the product in human readable terms."
          nullable: true
          type: "string"
        isBestseller:
          description: "Denotes if the item is a best seller, meaning that the product\n\
            should appear in a new price sheet that is created with the 'Best\nSeller'\
            \ option selected."
          type: "boolean"
        labCatalogGroupId:
          allOf:
          - nullable: true
          - $ref: "#/components/schemas/Id"
    LabCatalogProductCollection:
      title: "Lab Catalog Product Collection"
      type: "object"
      allOf:
      - properties:
          type:
            allOf:
            - enum:
              - "lab-catalog-product-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Lab Catalog Product"
            type: "array"
            items:
              $ref: "#/components/schemas/LabCatalogProduct"
      - $ref: "#/components/schemas/List"
    LabCatalogShippingOption:
      title: "Lab Catalog Shipping Option"
      description: "An option by which to ship products ordered from the lab catalog."
      type: "object"
      properties:
        type:
          allOf:
          - enum:
            - "lab-catalog-shipping-option"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of the lab catalog shipping option."
          type: "string"
          example: "APC International"
        description:
          description: "Display text shown to the user in order to give them information\n\
            concerning the shipping option."
          nullable: true
          type: "string"
          example: "16x20 and larger"
        retailPrice:
          description: "A decimal value of the retail price of the shipping option,\n\
            converted to the currency of the brand."
          type: "number"
          example: 6.45
        minimumLabCost:
          description: "A decimal value of the minimum lab cost required to utilize\
            \ this shipping\noption, converted to the currency of the brand."
          type: "number"
          example: 15.01
        maximumLabCost:
          description: "A decimal value of the maximum lab cost available to utilize\
            \ this shipping\noption, converted to the currency of the brand."
          type: "number"
          example: 9999.99
        maximumProductSize:
          description: "An object that specifies the maximum product size for this\
            \ shipping option in inches."
          type: "object"
          nullable: true
          required:
          - "width"
          - "height"
          properties:
            width:
              description: "The number of inches of maximum width."
              type: "number"
              example: 8
            height:
              description: "The number of inches of maximum height."
              type: "number"
              example: 12
        labShippingCode:
          description: "Code used by the lab to identify this shipping option."
          type: "string"
          example: "USPS First LTR_DS_TP"
        countryCode:
          description: "Two-character ISO-3166 code identifying the destination country\
            \ where this\nshipping option is available."
          type: "string"
          nullable: true
          example: "UK"
        citiesAvailable:
          description: "An array of destination cities or localities where this shipping\
            \ option is\navailable. Applicable to couriers."
          type: "array"
          nullable: true
          items:
            description: "Names of cities or localities where this shipping option\
              \ is available"
            type: "string"
        transitDays:
          description: "General description of number of transit days."
          type: "string"
          example: "2-5 Days"
        hasTracking:
          description: "Is tracking available for this method?"
          type: "boolean"
          example: true
        printsOnly:
          description: "Is this option available only for prints? Applicable to postal\
            \ services\nwith package size/weight limits."
          type: "boolean"
          example: false
    LabCatalogShippingOptionCollection:
      title: "Lab Catalog Shipping Option Collection"
      type: "object"
      allOf:
      - properties:
          type:
            allOf:
            - enum:
              - "lab-catalog-shipping-option-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Lab Catalog Shipping Option"
            type: "array"
            items:
              $ref: "#/components/schemas/LabCatalogShippingOption"
      - $ref: "#/components/schemas/List"
    Link:
      title: "Hypermedia Link Relationship"
      description: "The target URL indicated in the `href` property is related to\
        \ the current\nresource according to the defined semantics of the link relationship\
        \ name.\n\nA link relationship may consist of one or more links, with varying\
        \ titles and\ntypes."
      oneOf:
      - type: "object"
        title: "Single Link"
        properties:
          href:
            description: "The hypertext reference to a related resource."
            type: "string"
            format: "uri"
          title:
            description: "A descriptive title for the link."
            type: "string"
          type:
            description: "A media type hint for the resource identified by the href.\
              \ This can be\nuseful to indicate alternate representations of a resource,\
              \ such as a PDF\n(`application/pdf`), CSV (`text/csv`), or JPEG (`image/jpeg`)\
              \ file.\n\nIf this property is missing, the assumed media type of the\
              \ target URL is\nthe default API media type of `application/vnd+shootproof.json`."
            type: "string"
            default: "application/vnd+shootproof.json"
          templated:
            description: "Whether the given href is a templated URL using [RFC\n6570](https://tools.ietf.org/html/rfc6570)\
              \ format."
            type: "boolean"
            default: false
      - type: "array"
        title: "Array of Links"
        items:
          $ref: "#/components/schemas/Link/oneOf/0"
    Links:
      title: "Link Relationships"
      description: "Each property defines a hypertext link relationship as indicated\
        \ by a link\nobject or array of link objects. The target URL of each hypertext\
        \ link\nrelationship is related to the current resource according to the defined\n\
        semantics of the link relationship property name."
      readOnly: true
      required:
      - "self"
      type: "object"
      example:
        self:
          href: "https://example.com/2bba030"
          title: "Example Link Relationship"
          type: "application/vnd+shootproof.json"
          templated: false
      properties:
        alternate:
          allOf:
          - title: "Alternate Representation"
            description: "The target URL is an alternate representation of the current\
              \ resource.\nUsually, this will include a `type` property to indicate\
              \ the media type\nof the alternate representation."
          - $ref: "#/components/schemas/Link"
        brand-context:
          allOf:
          - title: "Brand Context"
            description: "The target URL indicates the brand authorized for the current\
              \ context,\nbased on the access token.\n\n*This relationship is deprecated\
              \ and should not be relied on. Access\ntokens obtained through the OAuth\
              \ flow are not tied to a specific brand.*"
            deprecated: true
          - $ref: "#/components/schemas/Link"
        brand-homepage:
          allOf:
          - title: "Gallery Homepage"
            description: "The target URL is Client Gallery homepage for the brand\
              \ related to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
        brand-theme:
          allOf:
          - title: "Brand Theme"
            description: "The target URL is a brand theme or collection of brand themes\
              \ related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        brand:
          allOf:
          - title: "Brand"
            description: "The target URL is a brand or collection of brands related\
              \ to the current\nresource."
          - $ref: "#/components/schemas/Link"
        canonical:
          allOf:
          - title: "Canonical URL"
            description: "The target URL is the primary location of the current resource\
              \ (i.e. the\ncurrent resource may be subordinate to another resource,\
              \ and the target\nURL indicates its permanent location)."
          - $ref: "#/components/schemas/Link"
        children:
          allOf:
          - title: "Children"
            description: "The target URL is a collection of resources that is subordinate\
              \ to the\ncurrent resource. That is, the current resource is a parent\
              \ of the\nchildren, and the children belong to this resource."
          - $ref: "#/components/schemas/Link"
        client-admin:
          allOf:
          - title: "Client Galleries Customer Admin URL"
            description: "The target URL is the location of the studio client admin\
              \ for the current\nresource in the Client Galleries website. The media\
              \ type of the target URL\nis assumed to be `text/html` unless otherwise\
              \ indicated."
          - $ref: "#/components/schemas/Link"
        client:
          allOf:
          - title: "Client Galleries URL"
            description: "The target URL is the location of the current resource in\
              \ the Client\nGalleries website. The media type of the target URL is\
              \ assumed to be\n`text/html` unless otherwise indicated."
          - $ref: "#/components/schemas/Link"
        collection:
          allOf:
          - title: "Containing Collection"
            description: "The target URL is the location of a collection of similar\
              \ resources of\nwhich the current resource is a member."
          - $ref: "#/components/schemas/Link"
        contact-referee:
          allOf:
          - title: "Contact Referee"
            description: "The target URL is a list of available contacts that may\
              \ be selected as\nreferred by the current resource."
          - $ref: "#/components/schemas/Link"
        contact-referred-by:
          allOf:
          - title: "Contact Referred By"
            description: "The target URL is a list of available contacts that may\
              \ be selected as\nhaving referred the current resource."
          - $ref: "#/components/schemas/Link"
        contact-tag:
          allOf:
          - title: "Contact Tag"
            description: "The target URL is a list of contact tags available to apply\
              \ to the current\nresource."
          - $ref: "#/components/schemas/Link"
        contact:
          allOf:
          - title: "Contact"
            description: "The target URL is a contact or collection of contacts related\
              \ to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
        contract-signature:
          allOf:
          - title: "Contract Signature"
            description: "The target URL is a contract signature or collection of\
              \ contract\nsignatures related to the current resource."
          - $ref: "#/components/schemas/Link"
        contract-template:
          allOf:
          - title: "Contract Template"
            description: "The target URL is a contract template or collection of contract\
              \ templates\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        contract:
          allOf:
          - title: "Contract"
            description: "The target URL is a contract or collection of contracts\
              \ related to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
        derivedfrom:
          allOf:
          - title: "Derived From"
            description: "The target URL is the location of a resource from which\
              \ the current\nresource is derived (or a subset of)."
          - $ref: "#/components/schemas/Link"
        email-automation-group:
          allOf:
          - title: "Email Automation Group"
            description: "The target URL is an email automation group or collection\
              \ of email\nautomation groups related to the current resource."
          - $ref: "#/components/schemas/Link"
        email-template-type:
          allOf:
          - title: "Email Template Type"
            description: "The target URL is an email template type or collection of\
              \ email template\ntypes related to the current resource."
          - $ref: "#/components/schemas/Link"
        email-template:
          allOf:
          - title: "Email Template"
            description: "The target URL is an email template or collection of email\
              \ templates\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        email:
          allOf:
          - title: "Email"
            description: "The target URL may be an email message or collection of\
              \ email messages\nrelated to the current resource. It may also be used\
              \ to create an email\nmessage related to the current resource."
          - $ref: "#/components/schemas/Link"
        event-album-passwords:
          allOf:
          - title: "Event Album Passwords"
            description: "The target URL is a listing of all passwords for all event\
              \ albums related\nto the current resource. If the `type` indicates a\
              \ different format (i.e.\n`text/csv`), then the URL is a link to a downloadable\
              \ version of the\ntarget resource."
          - $ref: "#/components/schemas/Link"
        event-album:
          allOf:
          - title: "Event Album"
            description: "The target URL is an event album or collection of event\
              \ albums related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        event-album-photo:
          allOf:
          - title: "Event Album Photo"
            description: "The target URL is an event album photo or collection of\
              \ event album photos\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        event-archive-cost:
          allOf:
          - title: "Event Archive Cost"
            description: "The target URL is an event archive cost related to the current\
              \ resource."
          - $ref: "#/components/schemas/Link"
        event-category:
          allOf:
          - title: "Event Category"
            description: "The target URL is an event category or collection of event\
              \ categories\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        event-contact-photo-favorite:
          allOf:
          - title: "Event Contact Favorited Photo"
            description: "The target URL is a photo or collection of photos related\
              \ to the current\nresource and favorited by the context event contact."
          - $ref: "#/components/schemas/Link"
        event-contact-photo-hidden:
          allOf:
          - title: "Event Contact Hidden Photo"
            description: "The target URL is a photo or collection of photos related\
              \ to the current\nresource and hidden by the context event contact."
          - $ref: "#/components/schemas/Link"
        event-contact-photo-share:
          allOf:
          - title: "Event Contact Shared Photo"
            description: "The target URL is a photo or collection of photos related\
              \ to the current\nresource and shared by the context event contact."
          - $ref: "#/components/schemas/Link"
        event-contact-photo-tag:
          allOf:
          - title: "Event Contact Tagged Photo"
            description: "The target URL is a photo or collection of photos related\
              \ to the current\nresource and tagged by the context event contact.\n\
              \nWhen `templated` is `true`, this is a [templated\nURL](https://tools.ietf.org/html/rfc6570).\
              \ The template parameter\n`filterPhotoTag` may be used with the tag\
              \ name or a comma-separated list\nof tag names to filter tagged photo\
              \ results."
          - $ref: "#/components/schemas/Link"
        event-contact:
          allOf:
          - title: "Event Contact"
            description: "The target URL is an event contact or collection of event\
              \ contacts related\nto the current resource."
          - $ref: "#/components/schemas/Link"
        event-defaults:
          allOf:
          - title: "Event Defaults"
            description: "The target URL is a set of event defaults settings or collection\
              \ of more\nthan one set of event defaults settings related to the current\
              \ resource."
          - $ref: "#/components/schemas/Link"
        event-photo-original:
          allOf:
          - title: "Event Photo Original"
            description: "The target URL is the original uploaded photo related to\
              \ the current\nresource."
          - $ref: "#/components/schemas/Link"
        event-photo-upload-policy:
          allOf:
          - title: "Event Photo Upload Policy"
            description: "The target URL may be used to generate an event photo upload\
              \ policy\nrelated to the current resource. This is the first step in\
              \ the process to\nupload new event photos to an event resource."
          - $ref: "#/components/schemas/Link"
        event-photo:
          allOf:
          - title: "Event Photo"
            description: "The target URL is an event photo or collection of event\
              \ photos related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        event-visitor:
          allOf:
          - title: "Event Visitor"
            description: "The target URL is an event visitor or collection of event\
              \ visitors related\nto the current resource."
          - $ref: "#/components/schemas/Link"
        event:
          allOf:
          - title: "Event"
            description: "The target URL is an event or collection of events related\
              \ to the current\nresource."
          - $ref: "#/components/schemas/Link"
        invoice-credit-card:
          allOf:
          - title: "Invoice Credit Card"
            description: "The target URL may be used to manipulate the invoice credit\
              \ card related\nto the current resource. The current resource may be\
              \ an invoice or may\nhave an invoice related to it, for which the target\
              \ URL may be used."
          - $ref: "#/components/schemas/Link"
        invoice-item-template:
          allOf:
          - title: "Invoice Item Template"
            description: "The target URL is an invoice item template or collection\
              \ of invoice item\ntemplates related to the current resource."
          - $ref: "#/components/schemas/Link"
        invoice-payment:
          allOf:
          - title: "Invoice Payment"
            description: "The target URL may be used to make an invoice payment related\
              \ to the\ncurrent resource. The current resource may be an invoice or\
              \ may have an\ninvoice related to it, for which the target URL may be\
              \ used."
          - $ref: "#/components/schemas/Link"
        invoice-refund:
          allOf:
          - title: "Invoice Refund"
            description: "The target URL may be used to make an invoice refund related\
              \ to the\ncurrent resource. The current resource may be an invoice or\
              \ may have an\ninvoice related to it, for which the target URL may be\
              \ used."
          - $ref: "#/components/schemas/Link"
        invoice-template:
          allOf:
          - title: "Invoice Template"
            description: "The target URL is an invoice template or collection of invoice\
              \ templates\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        invoice:
          allOf:
          - title: "Invoice"
            description: "The target URL is an invoice or collection of invoices related\
              \ to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
        lab:
          allOf:
          - title: "Lab"
            description: "The target URL is a lab related to the current resource."
          - $ref: "#/components/schemas/Link"
        lab-catalog-self-fulfilled:
          allOf:
          - title: "Self-fulfilled Lab Catalog"
            description: "The target URL is a self-fulfilled lab catalog or collection\
              \ of\nself-fulfilled lab catalogs related to the current resource."
          - $ref: "#/components/schemas/Link"
        lab-catalog:
          allOf:
          - title: "Lab Catalog"
            description: "The target URL is a lab catalog or collection of lab catalogs\
              \ related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        lab-catalog-shipping-option:
          allOf:
          - title: "Lab Catalog Shipping Option"
            description: "The target URL is a lab catalog shipping option or collection\
              \ of\nlab catalog shipping options related to the current resource."
          - $ref: "#/components/schemas/Link"
        market-department:
          allOf:
          - title: "Market Department"
            description: "The target URL is a market department or collection of market\
              \ departments\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        market-product:
          allOf:
          - title: "Market Product"
            description: "The target URL is a market product or collection of market\
              \ products\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        market-vendor:
          allOf:
          - title: "Market Vendor"
            description: "The target URL is a market vendor or collection of market\
              \ vendors related\nto the current resource."
          - $ref: "#/components/schemas/Link"
        me:
          allOf:
          - title: "Me"
            description: "The target URL is the profile for the authenticated access\
              \ token.\n\nUsually this is the Studio Panel user who has granted authorization\
              \ and\nan access token."
          - $ref: "#/components/schemas/Link"
        mobile-app:
          allOf:
          - title: "Mobile App"
            description: "The target URL is a mobile app or collection of mobile apps\
              \ related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        order-payment:
          allOf:
          - title: "Order Payment"
            description: "The target URL is an order payment or collection of order\
              \ payments related\nto the current resource."
          - $ref: "#/components/schemas/Link"
        order:
          allOf:
          - title: "Order"
            description: "The target URL is an order or collection of orders related\
              \ to the current\nresource."
          - $ref: "#/components/schemas/Link"
        parent:
          allOf:
          - title: "Parent"
            description: "The target URL identifies a parent resource for the current\
              \ resource.\nIt is often used on subordinate resources or collections\
              \ to identify\nthe resource to which they belong."
          - $ref: "#/components/schemas/Link"
        playlist:
          allOf:
          - title: "Music Playlist"
            description: "The target URL is a music playlist or collection of music\
              \ playlists\nrelated to the current resource."
          - $ref: "#/components/schemas/Link"
        portal:
          allOf:
          - title: "Studio-Client Portal URL"
            description: "The target URL is the location of the current resource in\
              \ the\nStudio-Client Portal website. The media type of the target URL\
              \ is assumed\nto be `text/html` unless otherwise indicated."
          - $ref: "#/components/schemas/Link"
        price-sheet-discount:
          allOf:
          - title: "Price Sheet Discount"
            description: "The target URL is a price sheet discount or collection of\
              \ price sheet\ndiscounts related to the current resource."
          - $ref: "#/components/schemas/Link"
        price-sheet-event:
          allOf:
          - title: "Price Sheet Event"
            description: "The target URL is an event associated to a price sheet or\
              \ a collection of\nevents associated to a price sheet related to the\
              \ current resource."
          - $ref: "#/components/schemas/Link"
        price-sheet-item:
          allOf:
          - title: "Price Sheet Item"
            description: "The target URL is a collection of price sheet items related\
              \ to the current resource."
          - $ref: "#/components/schemas/Link"
        price-sheet-item-image:
          allOf:
          - title: "Price Sheet Item Image"
            description: "The target URL is a collection of images associated to a\
              \ price sheet item related to the current resource."
          - $ref: "#/components/schemas/Link"
        price-sheet:
          allOf:
          - title: "Price Sheet"
            description: "The target URL is a price sheet or collection of price sheets\
              \ related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        price-sheet-shipping-option:
          allOf:
          - title: "Price Sheet Shipping Option"
            description: "The target URL is a price sheet shipping option or collection\
              \ of price sheet\nshipping options related to the current resource."
          - $ref: "#/components/schemas/Link"
        search:
          allOf:
          - title: "Search"
            description: "The target URL is a location that may be used to search\
              \ or filter results\nfor the current resource."
          - $ref: "#/components/schemas/Link"
        self:
          allOf:
          - title: "Self"
            description: "The target URL is the current resource's own location. It\
              \ may not be the\ncanonical location of the resource; if this is the\
              \ case, the `canonical`\nrelationship might be present to indicate the\
              \ resource's canonical URL."
          - $ref: "#/components/schemas/Link"
        shorturl:
          allOf:
          - title: "Shortened URL"
            description: "The target URL may be used to create a shortened URL for\
              \ use with social\nsharing."
          - $ref: "#/components/schemas/Link"
        signature:
          allOf:
          - title: "Signature"
            description: "The target URL is a signature or collection of signatures\
              \ related to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
        tax-profile:
          allOf:
          - title: "Tax Profile"
            description: "The target URL is a tax profile or collection of tax profiles\
              \ related to\nthe current resource."
          - $ref: "#/components/schemas/Link"
        token-replacement:
          allOf:
          - title: "Token Replacement"
            description: "The target URL may be used to replace tokens in the current\
              \ resource.\nTokens available to pass for replacement are indicated\
              \ by the [URI\ntemplate](https://tools.ietf.org/html/rfc6570) parameters."
          - $ref: "#/components/schemas/Link"
        watermark:
          allOf:
          - title: "Watermark"
            description: "The target URL is a watermark or collection of watermarks\
              \ related to the\ncurrent resource."
          - $ref: "#/components/schemas/Link"
    List:
      title: "Collection"
      description: "A collection (or list) of resources."
      type: "object"
      required:
      - "type"
      - "items"
      properties:
        meta:
          description: "Metadata describing the current result set."
          type: "object"
          readOnly: true
          properties:
            currentPage:
              description: "The current page of results returned."
              type: "integer"
            totalPages:
              description: "The total number of pages in the result set. This is affected\
                \ by\nthe `rows` parameter (`totalItems / rows == totalPages`)."
              type: "integer"
            totalItems:
              description: "The total number of items in the result set. This may\
                \ be\naffected by active search/filter parameters."
              type: "integer"
            rows:
              description: "The number of rows returned per page for the current result\
                \ set."
              type: "integer"
        links:
          $ref: "#/components/schemas/Links"
        type:
          $ref: "#/components/schemas/Type"
        items:
          description: "A collection of resources returned in the current result set."
          type: "array"
          items:
            type: "object"
    MarketDepartment:
      title: "Market Department"
      description: "A market department."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "market-department"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this market department."
          type: "integer"
        name:
          description: "The name of this market department."
          type: "string"
    MarketOrder:
      title: "Market Order"
      description: "A market order."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "market-order"
        links:
          $ref: "#/components/schemas/Links"
        order:
          description: "Order details for this market order."
          type: "object"
          properties:
            id:
              description: "The identifier for the order."
              type: "integer"
            email:
              description: "The email address for the user who placed the order."
              type: "string"
              format: "email"
            created:
              description: "The date and time at which the order was made."
              type: "string"
              format: "date-time"
        products:
          title: "Market Product"
          description: "The products purchased in this market order."
          type: "array"
          items:
            $ref: "#/components/schemas/MarketProduct"
    MarketProduct:
      title: "Market Product"
      description: "A market product."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "market-product"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this market product."
          type: "integer"
        marketVendorId:
          description: "The numeric identifier for the market vendor for this market\n\
            product."
          type: "integer"
        marketVendor:
          description: "The human-readable name for the market vendor for this market\n\
            product."
          type: "string"
        marketDepartmentId:
          description: "The numeric identifier for the market department for this\
            \ market\nproduct."
          type: "integer"
        marketDepartment:
          description: "The human-readable name for the market department for this\
            \ market\nproduct."
          type: "string"
        marketProductTypeId:
          description: "The numeric identifier for the market product type."
          type: "integer"
        marketProductType:
          description: "The human-readable name for the market product type."
          type: "string"
        marketProductStatusId:
          description: "The numeric identifier for the market product status."
          type: "integer"
        name:
          description: "The name of this market product."
          type: "string"
        description:
          description: "A description that provides more information about this market\n\
            product."
          type: "string"
        price:
          description: "The price of this market product in the currency identified\
            \ in\n`currencyCode`."
          type: "number"
        currencyCode:
          description: "Identifies the currency represented in `price`."
          type: "string"
        marketProductIconUrl:
          description: "The URL for an icon representing this market product."
          type: "string"
          format: "uri"
        isBundle:
          description: "Whether this market product is a bundle of multiple market\
            \ products."
          type: "boolean"
        bundleProducts:
          description: "If `isBundle` is `true`, `bundleProducts` will contain an\
            \ array of\nmarket products. If there are no bundle products, this will\
            \ be\n`false`."
          oneOf:
          - title: "Market Product"
            type: "array"
            items:
              $ref: "#/components/schemas/MarketProduct"
          - description: "If this is not a bundle of products, `bundleProducts` will\
              \ be `false`."
            type: "boolean"
        hasPurchased:
          description: "Whether the studio has previously purchased this market product."
          type: "boolean"
        created:
          description: "The date and time at which the order was made."
          type: "string"
          format: "date-time"
    MarketPurchasedProduct:
      title: "Purchased Market Product"
      description: "A purchased market product."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "market-purchased-product"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this market purchased product."
          type: "integer"
        marketProductId:
          description: "The numeric identifier for the market product for which this\
            \ market\npurchased product was created."
          type: "integer"
        marketProductDefinition:
          description: "Defines specific features of this particular market purchased\n\
            product. This can differ based on the type of market product\npurchased.\
            \ If no definition is available, this will be `false`."
          type: "object"
          properties:
            contractTemplate:
              description: "If the market product is a contract template, the market\n\
                purchased product will contain this `contractTemplate` object\ndefining\
                \ the properties of the contract template."
              type: "object"
              properties:
                body:
                  description: "The full HTML body of the contract template that was\n\
                    purchased."
                  type: "string"
        created:
          description: "The date and time at which the order was made."
          type: "string"
          format: "date-time"
        marketProductChangeDates:
          description: "An array of dates the market product has changed, in reverse\n\
            chronological order."
          type: "array"
          items:
            description: "A date on which changes were made to this market product."
            type: "string"
            format: "date-time"
    MarketVendor:
      title: "Market Vendor"
      description: "A market vendor."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "market-vendor"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this market vendor."
          type: "integer"
        name:
          description: "The name of this market vendor."
          type: "string"
        description:
          description: "A description of this market vendor."
          type: "string"
        website:
          description: "A URL for the website of this market vendor."
          type: "string"
          format: "uri"
        photo:
          description: "An image for this this market vendor."
          type: "object"
          properties:
            url:
              description: "The URL for the market vendor photo."
              type: "string"
              format: "uri"
    MobileApp:
      title: "Mobile App"
      description: "A mobile app.\n\nNOTE: This MobleApp object is intended only to\
        \ define the fields\nnecessary for creating a mobile app from the context\
        \ of an Event. When\nwe implement a full-featured `/mobile-app` endpoint,\
        \ we will add\nadditional functionality to this object."
      type: "object"
      required:
      - "name"
      - "brandThemeId"
      - "viewType"
      - "languageCode"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "mobile-app"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this mobile app."
          type: "integer"
          readOnly: true
        name:
          description: "The name of the mobile app."
          type: "string"
          maxLength: 40
        brandThemeId:
          description: "The identifier for the brand theme this mobile app uses."
          type: "integer"
        brandTheme:
          $ref: "#/components/schemas/BrandTheme"
          readOnly: true
        eventId:
          description: "The identifier for the event to which is mobile app is related,\
            \ if\napplicable."
          nullable: true
          type: "integer"
        eventName:
          description: "The name for the event to which this mobile app is related,\
            \ if\napplicable."
          readOnly: true
          nullable: true
          type: "string"
        viewType:
          description: "The mobile app layout style. We support two layouts for mobile\
            \ apps:\n\n* `vmason`: Cascade layout\n* `hmason`: Subway layout"
          type: "string"
          enum:
          - "vmason"
          - "hmason"
        playlistId:
          description: "The identifier for the playlist this mobile app uses."
          nullable: true
          type: "integer"
        playlist:
          description: "The playlist for this mobile app, if applicable. *(TODO: playlists\n\
            not supported in the API at this time.)*"
          readOnly: true
          nullable: true
        showContactInfo:
          description: "Whether to show the studio contact information in the mobile\
            \ app."
          type: "boolean"
        showSocialSharing:
          description: "Whether to show the social sharing icons in the mobile app."
          type: "boolean"
        languageCode:
          description: "The Unicode CLDR language tag for the language used in this\
            \ mobile\napp."
          type: "string"
        photoIds:
          description: "An array of photo identifiers used when creating a new mobile\
            \ app\nfrom photos selected in an event or album. (This property is not\n\
            available in responses.)"
          type: "array"
          items:
            type: "integer"
        created:
          description: "The creation date of this mobile app."
          type: "string"
          format: "date-time"
          readOnly: true
    Notification:
      title: "Notification"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "notification"
        links:
          allOf:
          - $ref: "#/components/schemas/Links"
          - readOnly: true
        id:
          $ref: "#/components/schemas/Id"
        notificationType:
          description: "A string identifier to indicate the type of notification described\n\
            by this entity. This identifier may be one of the following strings\n\n\
            | ShootProof Identifier | Description |\n| --------------------- | -----------\
            \ |\n| `contract-canceled` | The contract indicated by the `contract`\
            \ link relation has been canceled. |\n| `contract-signed-by-client` |\
            \ The contract indicated by the `contract` link relation was signed by\
            \ the client. |\n| `event-photo-downloaded-by-event-contact` | The contact\
            \ indicated by the `contact` link relation download a photo for the event\
            \ indicated by the `event` link relation. |\n| `event-photo-favorited-by-event-contact`\
            \ | The contact indicated by the `contact` link relation favorited a photo\
            \ for the event indicated by the `event` link relation. |\n| `event-photo-hidden-by-event-contact`\
            \ | The contact indicated by the `contact` link relation marked a photo\
            \ as “hidden” for the event indicated by the `event` link relation. |\n\
            | `event-photo-tagged-by-event-contact` | The contact indicated by the\
            \ `contact` link relation tagged a photo for the event indicated by the\
            \ `event` link relation. |\n| `invoice-past-due` | The invoice indicated\
            \ by the `invoice` link relation is past due. |\n| `invoice-payment-received`\
            \ | The brand received a payment for the invoice indicated by the `invoice`\
            \ link relation. |\n| `order-approval-prolonged` | The order indicated\
            \ by the `order` link relation has been awaiting approval for a long period\
            \ of time.  |\n| `order-needs-approval` | The order indicated by the `order`\
            \ link relation is awaiting approval. |\n| `order-placed` | The order\
            \ indicated by the `order` link relation was just placed. |\n| `order-shipped-from-lab`\
            \ | The order indicated by the `order` link relation was shipped from\
            \ the lab. |\n| `studio-granted-archiving-space` | The studio was granted\
            \ more archiving space.  |\n| `studio-money-balance-increased` | The studio’\
            s money balance increased. |\n| `studio-photo-plan-next-bill-date-increased`\
            \ | The studio’s next billing date changed, often due to more free time\
            \ added to their plan. |\n| `studio-profit-released` | The studio’s money\
            \ was released to their bank account. |"
          type: "string"
          enum:
          - "contract-canceled"
          - "contract-signed-by-client"
          - "event-photo-downloaded-by-event-contact"
          - "event-photo-favorited-by-event-contact"
          - "event-photo-hidden-by-event-contact"
          - "event-photo-tagged-by-event-contact"
          - "invoice-past-due"
          - "invoice-payment-received"
          - "order-approval-prolonged"
          - "order-needs-approval"
          - "order-placed"
          - "order-shipped-from-lab"
          - "studio-granted-archiving-space"
          - "studio-money-balance-increased"
          - "studio-photo-plan-next-bill-date-increased"
          - "studio-profit-released"
          readOnly: true
        notificationGroup:
          description: "The notification group refers to the type of entity this notification\n\
            relates to. For example, if the `notificationType` is `event-photo-favorited-by-event-contact`,\n\
            the `notificationGroup` will be `event` since the notification is related\n\
            to an event."
          type: "string"
          enum:
          - "contract"
          - "event"
          - "invoice"
          - "order"
          - "studio"
          readOnly: true
        descriptor:
          description: "The value of the descriptor varies among notification types.\
            \ In general,\nthe descriptor may be used as a label for the entity described\
            \ in the\nnotification. For orders and invoices, the descriptor is often\
            \ the total\ncurrency amount related to the notification. For contracts\
            \ and events, the\ndescriptor is the name of the contract or event."
          type: "string"
          readOnly: true
        message:
          description: "The message may be used as the notification text. For example,\
            \ if the\n`notificationType` is `order-placed`, the `message` might be\
            \ “Jane Doe\nplaced a new order.”"
          type: "string"
          readOnly: true
        attributes:
          description: "Attributes are key-value pairs of data related to the notification.\n\
            \n_**WARNING!** This is a free-form bag of unstructured data. The properties\n\
            and values should not be relied upon by implementations; they are subject\n\
            to change._"
          type: "object"
          readOnly: true
          nullable: true
          deprecated: true
        dismissed:
          description: "If the notification is dismissed, this will be `true`. Otherwise,\
            \ it will\nbe `false`. Set `dismissed` to `true` to dismiss the notification."
          type: "boolean"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    NotificationCollection:
      allOf:
      - title: "Collection of Notifications"
        properties:
          type:
            enum:
            - "notification-collection"
          meta:
            properties:
              totalActiveNotifications:
                description: "The total number of active (not dismissed) notifications\
                  \ for the\nauthenticated user."
                type: "integer"
          items:
            title: "Notification"
            type: "array"
            items:
              $ref: "#/components/schemas/Notification"
      - $ref: "#/components/schemas/List"
    Order:
      x-beta: true
      title: "Order"
      description: "An order object. Orders are created by customers when they complete\
        \ a\npurchase checkout or by a studio user creating an order on behalf of\
        \ a\ncustomer."
      type: "object"
      required:
      - "type"
      - "brandId"
      - "eventId"
      - "customerEmail"
      - "labCatalogId"
      - "shippingAddress"
      - "billingAddress"
      properties:
        type:
          description: "The model type for the response object."
          type: "string"
          enum:
          - "order"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        eventId:
          description: "The identifier for the event this order originates from. This\
            \ can\nonly be null if the order is part of a combined order. This field\
            \ is\nread-only in update requests."
          deprecated: true
          nullable: true
          type: "integer"
        eventName:
          description: "The name of the event this order originates from."
          deprecated: true
          nullable: true
          readOnly: true
          type: "string"
        adjustment:
          type: "number"
          description: "Amount of adjustment applied to this order. Positive number\
            \ which is\nalways subtracted from subtotal. Derived from the sum of discount\n\
            amounts."
          readOnly: true
          nullable: true
        balanceDue:
          type: "number"
          description: "The amount of the balance presently due on this order. Should\
            \ equal\nthe sum of grand total and adjustments minus payments. This is\
            \ a\ncalculated property. @TODO: remove?"
          readOnly: true
        clientSelectedShippingId:
          type: "string"
          description: "Shipping option that the client chose at checkout. This field\
            \ is\nreadOnly in update requests."
          nullable: true
        combinedOrder:
          description: "Indicates whether this order was created by combining multiple\n\
            orders."
          type: "boolean"
          readOnly: true
        currencyCode:
          type: "string"
          description: "Currency code for the currency all order amounts are expressed\
            \ in."
          readOnly: true
        currencySymbol:
          type: "string"
          description: "Currency symbol of the currency all order amounts are expressed\
            \ in."
          readOnly: true
        customStatus:
          type: "string"
          description: "A custom order status provided by the studio"
          nullable: true
        customerEmail:
          description: "The email address of the customer having billing responsibility\
            \ for\nthis order."
          type: "string"
          format: "email"
        customerName:
          description: "The name of the customer having billing responsibility for\
            \ this order.\nRead-only because it's a property of the customer's address,\
            \ not the Order\nobject itself."
          type: "string"
          nullable: true
          readOnly: true
        customerPhone:
          description: "The phone number submitted with the order."
          nullable: true
          oneOf:
          - type: "string"
          - type: "number"
        customerCropSelected:
          description: "Whether this order contains items having a customer defined\
            \ crop."
          type: "boolean"
          readOnly: true
        digitalStatus:
          description: "String slug representation of the current digital status of\
            \ this\norder. Null if `fulfillmentType` does not contain `digital`.\n\
            'awaiting-studio' = awaiting studio approval. 'awaiting-payment' =\nnot\
            \ released because payment is incomplete. 'sent' = the download\nURL has\
            \ been emailed to the customer."
          enum:
          - "awaiting-studio"
          - "awaiting-payment"
          - "sent"
          readOnly: true
          nullable: true
          type: "string"
        digitalSentDate:
          description: "**Important: this property returns mock data. See example**.\
            \ The\ndate on which the digital order items were sent to the customer.\n\
            Null if `fulfillmentType` does not contain `digital` or if the\ndigital\
            \ items are not yet sent."
          format: "date-time"
          type: "string"
          readOnly: true
          example: "2018-03-19T02:19:51+00:00"
        digitalDownloadDate:
          description: "**Important: this property returns mock data. See example**.\
            \ The\ndate on which the digital order items were downloaded by the\n\
            customer. Null if `fulfillmentType` does not contain `digital` or if\n\
            the digital items have not yet been downloaded."
          format: "date-time"
          type: "string"
          readOnly: true
          nullable: true
          example: "null"
        fulfillmentTypes:
          description: "Array of slugs descriptions of the order fulfillment types.\
            \ An order\nmay have one or more fulfillment types. Determined by the\
            \ items in\nthe order."
          type: "array"
          items:
            type: "string"
            enum:
            - "lab"
            - "digital"
            - "self"
          readOnly: true
        grandTotal:
          type: "number"
          description: "The order grand total value, in the currency selected by the\
            \ order's\ncurrencyCode. Grand total is calculated by adding the item\
            \ price for\neach item and item option, subtracting discounts and applying\
            \ tax.\nGrand total is fixed to the time when order was placed by the\n\
            customer."
          readOnly: true
        labId:
          description: "The id of the lab fulfilling the order."
          readOnly: true
          nullable: true
          type: "number"
        itemCount:
          type: "number"
          description: "The number of items on this order."
          readOnly: true
        labName:
          description: "*Deprecated.* Please use the `lab-catalog` link relation to\
            \ obtain lab\ninformation related to this order."
          readOnly: true
          nullable: true
          type: "string"
          deprecated: true
        labApprovedByStudioDate:
          description: "The date on which this order was approved for processing by\
            \ lab."
          format: "date-time"
          type: "string"
          readOnly: true
          nullable: true
        labCatalogId:
          type: "integer"
          nullable: true
          description: "Identifier of the lab catalog containing the items which comprise\n\
            this order. This field is readOnly in update requests."
        labReceipts:
          type: "array"
          description: "Collection of records of lab receipts of orders."
          items:
            type: "object"
            description: "A lab receipt object. Indicates lab receipt of order from\
              \ studio."
            properties:
              id:
                type: "integer"
                description: "The record identifier for the receipt."
                readOnly: true
              receiptDate:
                description: "The date when this order was accepted by the lab, the\
                  \ receipt\ndate."
                format: "date-time"
                type: "string"
                readOnly: true
              labOrderNumber:
                type: "string"
                description: "The order number created by the lab for processing this\
                  \ SP\norder."
                readOnly: true
          readOnly: true
        labShipments:
          type: "array"
          description: "Lab shipments associated with this order"
          items:
            type: "object"
            description: "A lab shipment object."
            properties:
              id:
                type: "integer"
                description: "The record identifier for the shipment."
                readOnly: true
              labOrderNumber:
                type: "string"
                description: "The order number created by the lab for processing this\
                  \ SP\norder."
                readOnly: true
              labReference:
                type: "string"
                description: "Text field used by lab to reference the unique identifier\
                  \ the\norder was submitted to the lab with. Optional reference value\n\
                  that may be used by the lab."
                readOnly: true
              shipDate:
                description: "The date when this shipment was reported as `shipped`."
                format: "date-time"
                type: "string"
                readOnly: true
              trackingId:
                type: "string"
                description: "The shipment tracking ID, used for tracking the shipment."
                readOnly: true
              trackingUrl:
                type: "string"
                description: "The shipment tracking URL, used for tracking the shipment."
                readOnly: true
              created:
                description: "The creation date of this shipment record."
                format: "date-time"
                type: "string"
                readOnly: true
          readOnly: true
        labStatus:
          description: "The slug string name of the current status of lab fulfilled\
            \ orders.\nNull if order is studio-fulfilled. Alternately referred to\
            \ as `lab\nprogress`. This is null for any order not having a `fulfillmentType`\n\
            containing `lab`."
          enum:
          - "pending-copy-of-originals"
          - "copying-originals"
          - "pending-studio-confirmation"
          - "submit-to-lab"
          - "submitted-to-lab"
          - "lab-received"
          - "lab-completed"
          - "canceled"
          readOnly: true
          nullable: true
          type: "string"
        labSubmittedDate:
          type: "string"
          description: "The date on which this order's lab fulfilled items were submitted\
            \ to\nthe lab for fulfillment."
          format: "date-time"
          readOnly: true
          nullable: true
        clientNote:
          type: "string"
          description: "Client submitted note, added by the client/customer when the\
            \ order\nwas placed."
          nullable: true
        studioNote:
          type: "string"
          description: "Studio submitted note, added by the studio owner/user when\
            \ updating\nan order."
          nullable: true
        origin:
          description: "Indicates whether the order was placed by the studio or by\
            \ their client."
          type: "string"
          enum:
          - "client"
          - "studio"
          readOnly: true
        orderStatus:
          description: "The slug string name of the current status of this order.\
            \ See\n`customStatus` for description of interaction with that field.\n\
            @TODO: Determine whether the change history of lab statuses is\nrequired."
          enum:
          - "archived"
          - "canceled"
          - "completed"
          - "deleted"
          - "new"
          - "on-hold"
          - "pending"
          - "printing"
          - "shipped"
          nullable: true
          type: "string"
        parentOrderId:
          description: "*Deprecated.* Please use the `parent` link relation to obtain\
            \ parent order\ninformation related to this order."
          type: "number"
          readOnly: true
          nullable: true
          deprecated: true
        isPaid:
          deprecated: true
          description: "The `isPaid` property is `true` if the order is fully paid\
            \ or has been\nmarked as paid through the Studio Panel.\n\n*This property\
            \ is deprecated and may be removed in the future.*"
          type: "boolean"
          readOnly: true
        paymentStatus:
          description: "The slug string name of the current payment status of this\
            \ order.\nWhen the Order contains payments having a sum of not more than\
            \ $0,\nthe `paymentStatus` is `unpaid`. When the sum of an order's payments\n\
            are less than the order's `grandTotal`, the `paymentStatus` is\n'partially-paid'.\
            \ When the sum of all order payments equals (or\nexceeds) the order's\
            \ `grandTotal`, the `paymentStatus` is 'paid'."
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid"
          type: "string"
          readOnly: true
        pickupAtStudio:
          type: "boolean"
          description: "Flag indicating whether the order will be picked up at the\
            \ studio in\nlieu of being shipped. Applies to self fulfilled items or\
            \ items drop\nshipped from lab to studio."
        profitReleased:
          type: "boolean"
          description: "Flag indicating whether the order's profit has been released.\
            \ Funds\nare released to studio after 5 days, at which point this will\
            \ be\ntrue. Null if not applicable, only applicable when payment gateway\n\
            is ShootProof Payments."
          readOnly: true
        profitReleaseDate:
          type: "string"
          format: "date-time"
          description: "The date and time when order funds were released to the studio.\
            \ Null\nif not applicable."
          readOnly: true
          nullable: true
        retouchRequested:
          description: "Indicates whether the customer has requested retouching on\
            \ the order."
          type: "boolean"
          readOnly: true
          nullable: true
          x-internal: true
          x-beta: true
        roesOrderId:
          description: "The identifier for the order as recognized by ROES, if applicable."
          readOnly: true
          nullable: true
          type: "string"
        salesTax:
          type: "number"
          description: "Amount of sales tax applied to this order."
          readOnly: true
        salesTaxOnDigitals:
          type: "boolean"
          description: "Flag indicating whether or not sales tax is applied to digital\n\
            download items in this order. As indicated on the price sheet at the\n\
            time the order was placed."
          readOnly: true
        salesTaxOnShipping:
          type: "boolean"
          description: "Flag indicating whether or not sales tax is applied to the\
            \ shipping\namount. As indicated on the price sheet at the time the order\
            \ was\nplaced."
          readOnly: true
        salesTaxPercent:
          type: "number"
          description: "The percentage used to calculate sales tax amount."
          readOnly: true
        salesTaxStateId:
          type: "string"
          description: "The 2 character code identifying the US state for which sales\
            \ tax is\nbeing applied."
          readOnly: true
          nullable: true
        salesTaxTitle:
          type: "string"
          description: "The human readable string labeling the sales tax amount. This\
            \ is the\nsales tax label in use on the price sheet at the time the order\
            \ was\nplaced."
          readOnly: true
          nullable: true
        shippingAddress:
          description: "The address this order should be shipped to."
          allOf:
          - nullable: true
          - $ref: "#/components/schemas/Address"
        shippingCharge:
          type: "number"
          description: "Amount charged by the studio to the customer for shipping\
            \ of this\norder."
        tags:
          description: "Tags describing this order."
          type: "array"
          items:
            type: "string"
        vatNumber:
          description: "VAT number from the price sheet at the time the order was\
            \ placed."
          readOnly: true
          nullable: true
          type: "string"
        vatTotal:
          type: "number"
          description: "The amount of VAT calculated for and applied to this order."
          readOnly: true
        billingAddress:
          description: "The billing address for this order."
          allOf:
          - nullable: true
          - $ref: "#/components/schemas/Address"
        created:
          description: "The creation date of this order."
          format: "date-time"
          type: "string"
          readOnly: true
    OrderClientPayment:
      x-beta: true
      title: "Order Payment"
      description: "An order payment."
      type: "object"
      required:
      - "type"
      - "amount"
      - "paymentFundsType"
      - "paymentDate"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "order-payment"
        id:
          description: "The identifier for this order payment."
          type: "integer"
        amount:
          description: "The amount of this payment."
          type: "number"
        currencyCode:
          description: "Identifies the currency in which this payment was made. This\
            \ is\nalways the currency of the order; it cannot be set when making a\n\
            payment."
          type: "string"
          readOnly: true
        currencySymbol:
          description: "The currency symbol for the currency used for this payment."
          type: "string"
          readOnly: true
        nameOnCard:
          description: "The card-holder name."
          type: "string"
        billingPostalCode:
          description: "The billing address postal code. May be `null` for order payments\n\
            made prior to the introduction of this value."
          type: "string"
          pattern: "^[A-Za-z0-9 -]{0,10}$"
        emailAddress:
          description: "The email address for the person making the payment."
          type: "string"
          format: "email"
        paymentFundsType:
          description: "The type of funds received for this payment."
          type: "string"
          enum:
          - "cash"
          - "check"
          - "credit-card"
          - "invoice"
        checkNumber:
          description: "If this payment was made by check, the check number for the\
            \ payment."
          nullable: true
          type: "integer"
        paymentDate:
          description: "The date on which this payment was made."
          type: "string"
          format: "date-time"
        isPaymentOnHold:
          description: "If `paymentFundsType` is \"credit-card\" and payment was made\
            \ with\nShootProof Payments, this flag indicates whether the funds for\
            \ this\npayment are currently on hold. This is typically the case during\
            \ a\nfive-day period after credit payment was made, but before ShootProof\n\
            releases the profit to the Studio.\n\n* If `false`, the payment has been\
            \ released.\n* If `null`, releasing of funds is not applicable such as\
            \ when made\nwith cash/check, or a non-ShootProof Payments gateway, such\
            \ as\nAuthorize.Net, Braintree, or PayPal Pro.\n* If either `isPaymentOnHold`\
            \ or `isPaymentReleased` are non-null,\nonly one of them will be `true`\
            \ at any point a time."
          readOnly: true
          nullable: true
          type: "boolean"
        isPaymentReleased:
          description: "If `paymentFundsType` is \"credit-card\" and payment was made\
            \ with\nShootProof Payments, this flag indicates whether the funds from\
            \ this\npayment have been released.\n\n* If `false`, the payment is still\
            \ on hold.\n* If `null`, releasing of funds is not applicable such as\
            \ when made\nwith cash/check, or a non-ShootProof Payments gateway, such\
            \ as\nAuthorize.Net, Braintree, or PayPal Pro.\n* If either `isPaymentOnHold`\
            \ or `isPaymentReleased` are non-null,\nonly one of them will be `true`\
            \ at any point a time."
          readOnly: true
          nullable: true
          type: "boolean"
        paymentReleasedDate:
          description: "If `isPaymentReleased` is `true`, this indicates the date\
            \ on which\nthe payment was released."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
        isRefundable:
          description: "Whether the payment is able to be refunded."
          type: "boolean"
          readOnly: true
        note:
          description: "A note about the payment."
          nullable: true
          type: "string"
        created:
          description: "The date on which this payment was logged in the system."
          type: "string"
          format: "date-time"
          readOnly: true
    OrderClientPaymentCollection:
      allOf:
      - x-beta: true
        title: "Order Payment Collection"
        description: "A collection of order payments."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "order-payment-collection"
          items:
            title: "Order Payment"
            type: "array"
            items:
              $ref: "#/components/schemas/OrderClientPayment"
      - $ref: "#/components/schemas/List"
    OrderCollection:
      allOf:
      - x-beta: true
        title: "Order Collection"
        description: "A collection of orders."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "order-collection"
          items:
            title: "Order"
            type: "array"
            items:
              $ref: "#/components/schemas/Order"
      - $ref: "#/components/schemas/List"
    OrderInUpdate:
      allOf:
      - x-beta: true
        properties:
          eventId:
            description: "The identifier for the event this order originates from.\
              \ This\ncan only be null if the order is part of a combined order."
            readOnly: true
            nullable: true
            type: "integer"
          clientSelectedShippingId:
            type: "string"
            description: "Shipping option that the client chose at checkout."
            readOnly: true
          labCatalogId:
            type: "integer"
            description: "Identifier of the lab catalog containing the items which\n\
              comprise this order."
            readOnly: true
          notes:
            type: "object"
            description: "Order notes."
            properties:
              clientNote:
                type: "string"
                readOnly: true
                description: "Client submitted note, added by the client/customer\
                  \ when the\norder was placed."
              studioNote:
                type: "string"
                description: "Studio submitted note, added by the studio owner/user\
                  \ when\nupdating an order."
      - $ref: "#/components/schemas/Order"
    OrderItem:
      x-beta: true
      title: "OrderItem"
      description: "An order item object. Orders contain items."
      type: "object"
      required:
      - "labCatalogProductId"
      - "photoId"
      - "eventId"
      properties:
        albumPath:
          type: "string"
          description: "The string path through the album hierarchy to the album containing\n\
            the photo this item is based on. Captured at order creation time."
          readOnly: true
        altDisplayName:
          type: "string"
          description: "The (optional) alternate display name for this item."
        approved:
          type: "boolean"
          description: "Flag indicating whether this item has been marked as `approved`\n\
            within the context of this order. Items are individually approved in\n\
            the order."
          readOnly: true
        approvedDate:
          description: "The date the item was approved."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
        cropData:
          title: "Default Crop"
          description: "Defaults to center crop, overwritten by `clientCropData` if\
            \ present."
          type: "object"
          nullable: true
          required:
          - "maxX"
          - "maxY"
          - "minX"
          - "minY"
          properties:
            type:
              description: "The type of object represented."
              type: "string"
              enum:
              - "crop-data"
            minX:
              description: "Horizontal position of top left corner of crop, expressed\
                \ as a\npercentage (Float, 1-100), from left edge (x = 0) of image."
              type: "number"
              format: "float"
              minimum: 0
              maximum: 100
            minY:
              description: "Vertical position of top left corner of crop, expressed\
                \ as a\npercentage (Float, 1-100), from top edge (y = 0) of image."
              type: "number"
              format: "float"
              minimum: 0
              maximum: 100
            maxX:
              description: "Horizontal position of bottom right corner of crop, expressed\
                \ as\na percentage (Float, 1-100), from left edge (x = 0) of image."
              type: "number"
              format: "float"
              minimum: 0
              maximum: 100
            maxY:
              description: "Vertical position of bottom right corner of crop, expressed\
                \ as a\npercentage (Float, 1-100), from top edge (y = 0) of image."
              type: "number"
              format: "float"
              minimum: 0
              maximum: 100
        clientCropData:
          allOf:
          - title: "Customer-selected Crop"
            description: "Customer selected crop data, overwrites default crop if\
              \ provided."
          - $ref: "#/components/schemas/OrderItem/properties/cropData"
          readOnly: true
        clientNotes:
          description: "Notes provided by the customer when they added the item to\
            \ the\norder."
          type: "string"
          readOnly: true
        digitalDownloadPixels:
          type: "integer"
          description: "Max pixel dimension of the digital download."
          readOnly: true
        digitalDownloadTypeId:
          type: "integer"
          description: "Ref ID noting the digital download type."
          readOnly: true
        eventAlbumId:
          type: "integer"
          description: "The ID of the album containing the photo(s) making up this\
            \ order item."
        filterType:
          type: "string"
          description: "Filter applied to the photo for creation of this item."
          enum:
          - "none"
          - "black-and-white"
          - "sepia"
        fulfillmentType:
          description: "Slugs description of the order item fulfillment type."
          type: "string"
          enum:
          - "lab"
          - "digital"
          - "self"
          readOnly: true
        id:
          description: "The identifier for this order item, a UUID."
          type: "string"
          pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$"
          readOnly: true
        isAllFiles:
          description: "Flags whether the object is comprised of all photo files in\
            \ the\nevent."
          type: "boolean"
          readOnly: true
        isAlbumFiles:
          description: "Flags whether the object is comprised of all photo files in\
            \ the\nalbum."
          type: "boolean"
          readOnly: true
        name:
          description: "The human readable item name. Should be derived from the names\
            \ of\nthe item group and add on group names."
          type: "string"
        groupName:
          description: "The name of the price sheet categorization group to which\
            \ this item\nbelongs."
          type: "string"
          readOnly: true
        groupId:
          description: "The UUID of the price sheet categorization group to which\
            \ this item\nbelongs."
          type: "string"
          pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$"
          readOnly: true
        labCatalogProductId:
          $ref: "#/components/schemas/Id"
          description: "The ID referencing the item(s) in the lab catalog. During\
            \ order item creation, values from the lab\ncatalog product will be used\
            \ to fill elements of the order item."
        labProductRetailPrice:
          type: "number"
          description: "The retail price of this item in the lab catalog."
          readOnly: true
        originalPrice:
          type: "number"
          description: "Pre-discount retail price of the item."
          readOnly: true
        photoId:
          $ref: "#/components/schemas/Id"
          description: "The record identifier of the photo on which this item is based."
        photo:
          description: "The item's photo. May return an order-photo or an event-photo\n\
            resource."
          type: "object"
          oneOf:
          - $ref: "#/components/schemas/OrderItemPhoto"
          - $ref: "#/components/schemas/EventPhoto"
          readOnly: true
        price:
          type: "number"
          description: "The item price. This value is calculated as the sum of each\
            \ item\nadd-on's price."
          readOnly: true
        photoDpi:
          type: "number"
          description: "The photo DPI for this item, function of photo's pixel dimensions\
            \ and item\nsize. `null` if the DPI cannot be determined."
          readOnly: true
          nullable: true
        isLowPhotoDpi:
          type: "boolean"
          description: "Flag to indicate whether the photo DPI is beneath the threshold\
            \ for low\nDPI (`100`). `null` if the DPI cannot be determined."
          readOnly: true
          nullable: true
        quantity:
          type: "integer"
          description: "Number of instances of this item appearing in the order."
        size:
          type: "string"
          description: "The item size, expressed in terms of x1, y1, x2, y2 (top left,\n\
            bottom right, in inches)."
          readOnly: true
        status:
          type: "string"
          description: "The item status."
          enum:
          - "active"
          - "deleted"
          readOnly: true
        created:
          description: "The date on which this item was added to the order."
          type: "string"
          format: "date-time"
          example: "2018-04-24T16:20:00+0000"
          readOnly: true
          nullable: true
        origin:
          description: "Indicates the origin of the item in the order. Default is\
            \ `client`\nindicating a client/customer added the item to the order.\
            \ `studio`\nindicates that the item was added to the order by the studio."
          type: "string"
          enum:
          - "studio"
          - "client"
          default: "client"
          example: "client"
    OrderItemCollection:
      allOf:
      - x-beta: true
        title: "Order Item Collection"
        description: "A collection of order items."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "order-item-collection"
          items:
            title: "Order Item"
            type: "array"
            items:
              $ref: "#/components/schemas/OrderItem"
      - $ref: "#/components/schemas/List"
    OrderItemPhoto:
      allOf:
      - x-beta: true
        title: "Order Item Photo"
        description: "An order photo.\n\nTo get the event to which the photo belongs,\
          \ see `.links.event`.\n\nTo get the photo from which this order photo is\
          \ derived, see\n`.links.event-photo`.\n\nTo get a display URL for this photo,\
          \ see `.displayUrl`."
        properties:
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "order-photo"
          lastReplaced:
            description: "The date on which the photo was last replaced, or `null`\
              \ if it\nhas never been replaced."
            format: "date-time"
            readOnly: true
            nullable: true
            type: "string"
      - $ref: "#/components/schemas/BaseImage"
    Playlist:
      title: "A music playlist."
      description: "A studio music playlist."
      type: "object"
      required:
      - "type"
      - "name"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "playlist"
        id:
          allOf:
          - $ref: "#/components/schemas/Id"
          - readOnly: true
        name:
          description: "The playlist name."
          type: "string"
        isEditable:
          description: "Flag indicating whether the playlist is editable by the studio.\
            \ Playlists created by the\nstudio have a true value here, playlists created\
            \ by the system (ie: featured playlists) are\nfalse. If this value is\
            \ true, the playlist can be neither edited or deleted by the studio via\n\
            the API. If this value is false, submitting an update to this playlist\
            \ will result in a 400\nwith validation errors."
          type: "boolean"
          readOnly: true
        songCount:
          description: "The number of songs appearing in the playlist."
          type: "integer"
          readOnly: true
        songs:
          description: "The songs in the playlist, represented by their ID. The Ultimate\
            \ music plan supports addition\nof up to 20 songs in a playlist. The limited\
            \ music plans support addition of 3 songs in a\nplaylist. Submitting more\
            \ songs than the subscribed plan supports will result in a 400 with\n\
            validation errors."
          type: "array"
          items:
            description: "A song, represented by its ID"
            type: "object"
            required:
            - "type"
            - "id"
            properties:
              type:
                description: "The type of object represented."
                type: "string"
                enum:
                - "song"
              id:
                $ref: "#/components/schemas/Id"
        created:
          description: "The creation date of this playlist."
          type: "string"
          format: "date-time"
          readOnly: true
    PriceSheet:
      title: "Price Sheet"
      description: "An object containing the settings and configurations of the price\
        \ sheet\nto be used by a studio to determine the pricing of products."
      type: "object"
      required:
      - "type"
      - "name"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the price sheet."
          type: "integer"
          readOnly: true
        name:
          description: "The name of the price sheet."
          type: "string"
        createdFromBestsellers:
          description: "Denotes if the price sheet was originally created with auto-populate\n\
            items from the lab catalog's best seller's list."
          type: "boolean"
        shippingTitle:
          description: "A descriptive title for shipping, such as \"Shipping\", \"\
            Shipping and\nHandling\", etc."
          nullable: true
          type: "string"
        shippingType:
          description: "What type of shipping does the price sheet expect to use."
          type: "string"
          enum:
          - "custom-options"
          - "lab-shipping-costs"
        allowLabShippingSpeedSelection:
          description: "Determines if the client should be allowed to select a shipping\n\
            speed offered by the lab during checkout"
          type: "boolean"
        labCatalogId:
          description: "The ID of the lab catalog which the price sheet is based on"
          nullable: true
          type: "integer"
        selfFulfilledLabCatalogId:
          description: "The ID of the self-fulfilled catalog which the price sheet\
            \ uses."
          nullable: true
          type: "integer"
        linkedEventDefaultsCount:
          description: "The total number of events defaults using this price sheet."
          type: "integer"
          readOnly: true
        linkedCartsCount:
          description: "The total number of carts containing items in the price sheet."
          type: "integer"
          readOnly: true
        linkedEventsCount:
          description: "The total number of non-deleted events that are using the\
            \ price\nsheet."
          type: "integer"
          readOnly: true
        packageCount:
          description: "The total number of packages in the price sheet."
          type: "integer"
          readOnly: true
        priceSheetGroups:
          description: "An array of group of items that are contained by the price\
            \ sheet."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetGroup"
        retouch:
          description: "Setting for Retouch add-on, an optional add-on that is applied\n\
            across all items of the price sheet."
          required:
          - "label"
          - "price"
          - "position"
          properties:
            label:
              description: "Label of the retouch add-on as it will be displayed to\
                \ the user."
              type: "string"
            price:
              description: "The cost for performing retouches to item images."
              type: "number"
            description:
              description: "Text to describe the retouch add-on to customers."
              type: "string"
            position:
              description: "Denotes if the retouch add-on should be the first or last\
                \ add-on\ndisplayed for items of the price sheet."
              type: "string"
              enum:
              - "first"
              - "last"
          nullable: true
          type: "object"
        salesTaxStateId:
          description: "An identifier signifying the state or locale where the sales\
            \ tax is\napplicable. The identifier is a combination of the two letter\
            \ country\ncode and a two to three letter abbreviation of the state/locale\n\
            separated by an underscore."
          nullable: true
          type: "string"
          example: "AK"
        salesTaxPercentage:
          description: "The percentage used to calculate the sales tax from an order\n\
            subtotal."
          nullable: true
          type: "number"
        salesTaxTitle:
          description: "A name used to refer to the tax."
          nullable: true
          type: "string"
        salesTaxOnDigitalDownload:
          description: "Denotes if the sales tax should be applied to items which\
            \ are solely\na digital download."
          type: "boolean"
        salesTaxOnShippingCharge:
          description: "Denotes if the sales tax should be applied to shipping fees."
          type: "boolean"
        termsOfSale:
          description: "Terms of sale which users must agree to before being allowed\
            \ to purchase\nitems from the price sheet. Providing a null removes any\
            \ existing terms of\nsale."
          type: "string"
          nullable: true
        vatNumber:
          description: "VAT identification number (VATIN) used by many EU and other\
            \ countries for\ntax entity identification purposes."
          type: "string"
          nullable: true
        taxProfileId:
          description: "Id of a tax profile to associate with the price sheet. The\
            \ properties\nof the tax profile such as tax rate, application to shipping/digital\
            \ items,\nand localities will apply to items purchased from the price\
            \ sheet."
          type: "number"
          nullable: true
          x-internal: true
        shippingOptions:
          description: "An array of shipping options to be used when purchasing items\
            \ from\nthe price sheet."
          type: "array"
          nullable: true
          items:
            description: "A custom shipping option to present when a user wants to\
              \ have an\norder shipped."
            type: "object"
            properties:
              title:
                description: "The display title of the shipping option."
                type: "string"
              price:
                description: "Decimal value of the price of the shipping option."
                type: "number"
        created:
          description: "The creation date of this price sheet."
          type: "string"
          format: "date-time"
          readOnly: true
    PriceSheetAddOnGroup:
      title: "Price Sheet Add-on Group"
      description: "An object containing a collection of add-on options which can\
        \ be added\nto a price sheet item."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet-add-on-group"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the price sheet add-on group."
          type: "integer"
        name:
          description: "The name of the price sheet add-on group."
          type: "string"
        displayOrder:
          description: "The order in which the add-on group should be displayed in\
            \ a list of\nadd-on groups for an item."
          type: "integer"
        isRequiredAddOn:
          description: "Denotes that the add-on group is required, meaning that one\
            \ of the\nadd-on options from the group must be selected when purchasing\
            \ the\nitem."
          type: "boolean"
        description:
          description: "A description to display to the user in order to give them\
            \ more\ninformation about the add-on group"
          type: "string"
        image:
          allOf:
          - description: "An image that shows a representation of the add-on group."
          - $ref: "#/components/schemas/PriceSheetElementImage"
        addOnOptions:
          title: "Price Sheet Add-on Option"
          description: "The collection of add-on options which are part of the group."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetAddOnOption"
        labCatalogAddOnGroupId:
          description: "If the add-on group is lab fulfilled, the ID of the lab catalog\n\
            add-on group which was used to create the add-on group"
          nullable: true
          type: "integer"
        created:
          description: "The creation date of this price sheet add-on group."
          type: "string"
          format: "date-time"
    PriceSheetAddOnOption:
      title: "Price Sheet Add-on Option"
      description: "An item which can be added to an item when purchased."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet-add-on-option"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the price sheet add-on option."
          type: "integer"
        name:
          description: "The name of the price sheet add-on option."
          type: "string"
        displayOrder:
          description: "The order in which the add-on option should be displayed in\
            \ a list\nof add-on option with a group."
          type: "integer"
        price:
          description: "Decimal value of the price to be charged for the add-on option."
          type: "number"
        shippingCharge:
          description: "Decimal value of any additional charge for shipping the add-on\n\
            option, in addition to any shipping for the order."
          nullable: true
          type: "number"
        isTaxExempt:
          description: "Denotes that the price of the add-on option should not be\
            \ included\nwhen calculating sales taxes."
          type: "boolean"
        description:
          description: "A description to display to the user in order to give them\
            \ more\ninformation about the add-on option."
          type: "string"
        images:
          description: "An array of images that shows the add-on option."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetElementImage"
        labCatalogAddOnOptionId:
          description: "If the add-on option is lab fulfilled, the ID of the lab catalog\n\
            add-on option which was used to create the add-on option"
          nullable: true
          type: "integer"
        created:
          description: "The creation date of this price sheet add-on option."
          type: "string"
          format: "date-time"
    PriceSheetCollection:
      allOf:
      - description: "A collection of price sheets with minimal data."
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "price-sheet-collection"
          items:
            title: "Price Sheet"
            type: "array"
            items:
              $ref: "#/components/schemas/PriceSheetInList"
      - $ref: "#/components/schemas/List"
    PriceSheetDiscountCollection:
      allOf:
      - description: "A collection of price sheet discounts"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-discount-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Discount"
            type: "array"
            items:
              title: "Price Sheet Discount"
              description: "A discount for items within the price sheet."
              type: "object"
              required:
              - "type"
              - "name"
              properties:
                type:
                  allOf:
                  - enum:
                    - "price-sheet-discount"
                  - $ref: "#/components/schemas/Type"
                links:
                  $ref: "#/components/schemas/Links"
                id:
                  $ref: "#/components/schemas/Id"
                name:
                  description: "The name of the price sheet discount."
                  type: "string"
                created:
                  description: "The creation date of this price sheet."
                  type: "string"
                  readOnly: true
                  format: "date-time"
      - $ref: "#/components/schemas/List"
    PriceSheetElementImage:
      allOf:
      - $ref: "#/components/schemas/BaseImage"
      - title: "Price Sheet Element Image"
        description: "An image attached to some element of a price sheet."
        required:
        - "type"
        - "displayOrder"
        properties:
          name:
            maxLength: 100
            readOnly: true
          type:
            description: "The type of object represented."
            type: "string"
            enum:
            - "price-sheet-element-image"
          displayOrder:
            description: "The order in which the image should be displayed in a list\
              \ of\nother images for the related price sheet element."
            type: "integer"
            minimum: 0
            maximum: 999
            example: 4
    PriceSheetElementImageCollection:
      allOf:
      - description: "A collection of Price Sheet Element Images"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-element-image-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Element Image"
            type: "array"
            items:
              $ref: "#/components/schemas/PriceSheetElementImage"
      - $ref: "#/components/schemas/List"
    PriceSheetElementImageCollectionInPatch:
      title: "Price Sheet Element Images Collection"
      description: "A collection of Price Sheet Element Images to be updated."
      allOf:
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              description: "The items in the collection to be updated."
              type: "object"
              properties:
                type:
                  description: "The type of object represented."
                  type: "string"
                  enum:
                  - "price-sheet-element-image"
                displayOrder:
                  description: "The order in which the image should be displayed in\
                    \ a list of\nother images for the related price sheet element."
                  type: "integer"
                  minimum: 0
                  maximum: 999
                  example: 4
        example:
          type: "price-sheet-element-image-collection"
          items:
          - id:
            - 1
            type: "price-sheet-element-image"
            displayOrder: 1
          - id:
            - 2
            type: "price-sheet-element-image"
            displayOrder: 2
      - $ref: "#/components/schemas/BatchCollection"
    PriceSheetGroup:
      title: "Price Sheet Group"
      description: "A container for a collection of related items within the price\
        \ sheet."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet-group"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the price sheet group."
          type: "integer"
          readOnly: true
        name:
          description: "The name of the price sheet group."
          type: "string"
        groupType:
          description: "The slug name of the type of price sheet item group."
          type: "string"
          readOnly: true
          enum:
          - "custom"
          - "prints"
          - "canvas"
          - "digitals"
          - "products"
          - "metals"
          - "fine-art"
        displayOrder:
          description: "The order in which the group should be displayed in a list\
            \ of groups\nfor a price sheet"
          type: "integer"
        isFeaturedType:
          description: "Denotes that the group is meant to contain items which are\
            \ to be\nfeatured in the price sheet."
          type: "boolean"
        isPackageType:
          description: "Denotes that the group is meant to contain packages."
          type: "boolean"
        description:
          description: "Display text shown to the user in order to give them information\n\
            concerning the group and the type of items which it may contain."
          type: "string"
        images:
          description: "An array of images which display the types of items which\
            \ may be\ncontained within the group."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetElementImage"
        priceSheetSubgroups:
          description: "An array containing the various subgroups of items within\
            \ the group."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetSubgroup"
        priceSheetItems:
          title: "Price Sheet Item"
          description: "An array containing the items which are part of the group."
          type: "array"
          items:
            oneOf:
            - $ref: "#/components/schemas/PriceSheetItem"
            - $ref: "#/components/schemas/PriceSheetItemDigital"
        isDefault:
          description: "Denotes if the group is a default group. Default groups are\
            \ created when\nthe Price Sheet is created and cannot be deleted."
          type: "boolean"
          readOnly: true
        isSecondary:
          description: "Denotes if the group is a secondary copy of a default group.\
            \ The secondary\ngroup can contain the same lab-fulfilled product available\
            \ to the default\ngroup, as long as the product is not already contained\
            \ in the default group."
          type: "boolean"
          readOnly: true
        labCatalogGroupId:
          description: "The ID of the lab catalog group which was used to create the\
            \ group."
          type: "integer"
        status:
          description: "The current status of the price sheet group."
          type: "string"
          readOnly: true
          enum:
          - "active"
          - "deleted"
        created:
          description: "The creation date of this price sheet group."
          type: "string"
          format: "date-time"
          readOnly: true
    PriceSheetGroupCollection:
      allOf:
      - description: "A collection of Price Sheet Groups"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-group-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Group"
            type: "array"
            items:
              $ref: "#/components/schemas/PriceSheetGroup"
      - $ref: "#/components/schemas/List"
    PriceSheetGroupCollectionInPatch:
      title: "Price Sheet Group Collection"
      description: "A collection of price sheet groups to be updated."
      allOf:
      - $ref: "#/components/schemas/BatchCollection"
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              type: "object"
              properties:
                name:
                  description: "The name of the price sheet group."
                  type: "string"
                displayOrder:
                  description: "The order in which the group should be displayed in\
                    \ a list of groups\nfor a price sheet"
                  type: "integer"
                isFeaturedType:
                  description: "Denotes that the group is meant to contain items which\
                    \ are to be\nfeatured in the price sheet."
                  type: "boolean"
                description:
                  description: "Display text shown to the user in order to give them\
                    \ information\nconcerning the group and the type of items which\
                    \ it may contain."
                  type: "string"
        example:
          type: "price-sheet-group-collection"
          items:
          - id:
            - 1
            type: "price-sheet-group"
            name: "Group1"
            description: "Lorem Ipsum"
            displayOrder: 1
          - id:
            - 2
            type: "price-sheet-group"
            name: "Group2"
            displayOrder: 2
    PriceSheetInList:
      title: "Price Sheet"
      description: "A price sheet as viewed from a collection."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this price sheet."
          type: "integer"
        name:
          description: "Human readable name for this price sheet."
          type: "string"
        itemsCount:
          description: "The total number of items the price sheet contains."
          type: "integer"
        packageCount:
          description: "The total number of packages in the price sheet."
          type: "integer"
          readOnly: true
        linkedEventDefaultsCount:
          description: "The total number of Brand Events Defaults using this Price\
            \ Sheet."
          type: "integer"
          readOnly: true
        linkedCartsCount:
          description: "The total number of carts containing items in the price sheet."
          type: "integer"
          readOnly: true
        linkedEventsCount:
          description: "The total number of non-deleted events that are using the\
            \ price\nsheet."
          type: "integer"
          readOnly: true
        discountsCount:
          description: "The total number of discounts associated with the price sheet."
          type: "integer"
        fulfillmentLabId:
          description: "The id of the lab used to fulfill items purchased from the\
            \ price\nsheet."
          type: "string"
        labCatalogId:
          description: "The ID of the lab catalog which the price sheet is based on"
          nullable: true
          type: "integer"
        created:
          description: "The creation date of this price sheet."
          type: "string"
          format: "date-time"
    PriceSheetItem:
      title: "Price Sheet Item"
      description: "A product item within the price sheet which a user can choose\
        \ to order."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      - "price"
      - "priceSheetGroupId"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "price-sheet-item"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of the price sheet item."
          type: "string"
          maxLength: 250
        displayOrder:
          description: "The order in which the item should be displayed in a list\
            \ of items."
          type: "integer"
        price:
          description: "Decimal value of the price to be charged for the item."
          type: "number"
        labCost:
          description: "Decimal value of the lab cost the studio pays to order the\
            \ item."
          type: "number"
        size:
          description: "The dimensions of the item.\n\nThese values are not used when\
            \ update creating or updating a Lab-fulfilled\nPrice Sheet Item."
          type: "object"
          properties:
            width:
              description: "The width of the item."
              type: "number"
              nullable: true
              minimum: 0
              maximum: 1000
            height:
              description: "The height of the item."
              type: "number"
              nullable: true
              minimum: 0
              maximum: 1000
            depth:
              description: "The depth of the item."
              type: "number"
              nullable: true
              minimum: 0
              maximum: 1000
        shippingCharge:
          description: "Decimal value of any additional charge for shipping the item,\
            \ in\naddition to any shipping for the order."
          nullable: true
          type: "number"
        chargeShipping:
          description: "Denotes if the price sheet item should be included when calculating\n\
            shipping charges."
          type: "boolean"
          readOnly: true
        isTaxExempt:
          description: "Denotes that the item price should not be included when calculating\n\
            sales taxes."
          type: "boolean"
        hasDownload:
          description: "Denotes that the item includes a free digital download of\
            \ the image\nused for the item."
          type: "boolean"
        bleedWrap:
          description: "Decimal value representing the bounds of the item that are\
            \ wrapped\naround the item and not visible from the front."
          type: "number"
        hideBleedWrap:
          description: "Denotes that bleed wrap should not be displayed when showing\
            \ the\nitem."
          type: "boolean"
        bounds:
          description: "The dimensional bounds of the price sheet item."
          type: "string"
        imageCount:
          description: "Count of the number of images associated with the price sheet\
            \ item."
          type: "integer"
        description:
          description: "A description to display to the user in order to give them\
            \ more\ninformation about the item."
          type: "string"
        images:
          title: "Price Sheet Element Image"
          description: "An array of images that shows the item."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetElementImage"
        priceSheetGroupId:
          allOf:
          - description: "The identifier of the Price Sheet Group which contains the\
              \ Item.\nRequired when creating a new Price Sheet Item."
          - $ref: "#/components/schemas/Id"
        priceSheetSubgroupId:
          allOf:
          - description: "The identifier of the Price Sheet Subgroup which contains\
              \ the Item.\nCannot be changed after the item has been created."
          - nullable: true
          - $ref: "#/components/schemas/Id"
        labCatalogProductId:
          description: "If the item is lab fulfilled, the ID of the lab catalog product\n\
            which was used to create the item."
          nullable: true
          type: "integer"
        created:
          description: "The creation date of this price sheet item."
          type: "string"
          format: "date-time"
    PriceSheetItemCollection:
      allOf:
      - description: "A collection of price sheet items"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-item-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Item"
            type: "array"
            items:
              anyOf:
              - $ref: "#/components/schemas/PriceSheetItem"
              - $ref: "#/components/schemas/PriceSheetItemDigital"
              - $ref: "#/components/schemas/PriceSheetItemPackage"
      - $ref: "#/components/schemas/List"
    PriceSheetItemDigital:
      title: "Price Sheet Digital Item"
      description: "A product item within the price sheet which a user can choose\
        \ to order."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "price-sheet-item-digital"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of the price sheet item."
          type: "string"
        displayOrder:
          description: "The order in which the item should be displayed in a list\
            \ of items."
          type: "integer"
        price:
          description: "Decimal value of the price to be charged for the item. If\
            \ the digital item\nis a ShootProof-Fulfilled Digital Download, then this\
            \ value should be null."
          nullable: true
          type: "number"
        shippingCharge:
          description: "Decimal value of any additional charge for shipping the item,\
            \ in\naddition to any shipping for the order."
          nullable: true
          type: "number"
        chargeShipping:
          description: "Denotes if the price sheet item should be included when calculating\n\
            shipping charges."
          type: "boolean"
          readOnly: true
        isTaxExempt:
          description: "Denotes that the item price should not be included when calculating\n\
            sales taxes."
          type: "boolean"
        description:
          description: "A description to display to the user in order to give them\
            \ more\ninformation about the item."
          type: "string"
        isDigitalDownload:
          description: "Denotes that the item is a ShootProof-Fulfilled digital download."
          type: "boolean"
        priceSheetGroupId:
          allOf:
          - description: "The identifier of the price sheet group which contains the\
              \ item."
          - $ref: "#/components/schemas/Id"
        priceSheetSubgroupId:
          allOf:
          - description: "The identifier of the price sheet subgroup which contains\
              \ the item.\nCannot be changed after the item has been created."
          - nullable: true
          - $ref: "#/components/schemas/Id"
        individualPhotoDownload:
          description: "Information that applied to a ShootProof-Fulfilled digital\
            \ download of a\nsingle, individual photo."
          type: "object"
          properties:
            isDigitalDownloadForSale:
              description: "Denotes that the digital download item should be available\
                \ to be\npurchased."
              nullable: true
              type: "boolean"
            price:
              description: "Decimal value of the price to be charged for the item."
              nullable: true
              type: "number"
        allAlbumPhotosDownload:
          description: "Information that applied to a ShootProof-Fulfilled digital\
            \ download of all\nphotos in an album."
          type: "object"
          properties:
            isDigitalDownloadForSale:
              description: "Denotes that the digital download item should be available\
                \ to be\npurchased."
              nullable: true
              type: "boolean"
            price:
              description: "Decimal value of the price to be charged for the item."
              nullable: true
              type: "number"
        allGalleryPhotosDownload:
          description: "Information that applied to a ShootProof-Fulfilled digital\
            \ download of all\nphotos in gallery."
          type: "object"
          properties:
            isDigitalDownloadForSale:
              description: "Denotes that the digital download item should be available\
                \ to be\npurchased."
              nullable: true
              type: "boolean"
            price:
              description: "Decimal value of the price to be charged for the item."
              nullable: true
              type: "number"
        digitalDownloadType:
          description: "Denotes that the item is a ShootProof-Fulfilled digital download.\
            \ Can only\nbe set when first creating a Digital Download Item."
          nullable: true
          type: "string"
          enum:
          - "full-resolution"
          - "high-resolution"
          - "medium-resolution"
          - "low-resolution"
          - "custom"
        pixels:
          description: "The pixel count of the longest side for each image that will\
            \ be included\nin the digital download."
          nullable: true
          type: "number"
          minimum: 1
          maximum: 9999
        status:
          description: "The current status of the price sheet item."
          type: "string"
          enum:
          - "active"
          - "deleted"
        created:
          description: "The creation date of this price sheet item."
          type: "string"
          format: "date-time"
    PriceSheetItemNode:
      title: "Price Sheet Item Node"
      description: "A price sheet item node object which describes where on an item\
        \ an image\nmay be placed."
      type: "object"
      required:
      - "type"
      - "nodeId"
      - "bounds"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "price-sheet-item-node"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the price sheet item node."
          type: "integer"
        nodeId:
          description: "The node ID used by the lab."
          type: "integer"
        bounds:
          description: "Coordinates of the node bounds."
          type: "string"
        boundsOverride:
          description: "Coordinates to override the default node bounds."
          type: "string"
        boundsName:
          description: "Display friendly name of the node bounds."
          type: "string"
        labCatalogProductNodeId:
          description: "If the item for which the node is a part is lab fulfilled,\
            \ the ID of\nthe lab catalog product node which was used to create the\
            \ item node"
          nullable: true
          type: "integer"
    PriceSheetItemPackage:
      title: "Price Sheet Item Package"
      description: "A price sheet item package is an item on a price sheet that is\
        \ a collection\nof other price sheet items labeled for sale as one unit. Only\n\
        `price-sheet-item` and `price-sheet-item-digital` items may be included\n\
        within a `price-sheet-item-package`. Including a `price-sheet-item-package`\n\
        within a `price-sheet-item-package` might cause the universe to implode.\n\
        \nPrice sheet items within a package are listed in the `items` property. Each\n\
        item must have a `quantity` property to specify how many of that item are\n\
        included for sale within the package. Additionally, an `allowedPhotoCount`\n\
        may be set to indicate how many photos a purchaser may choose to apply to\n\
        the items in the package. If this value is omitted or is `null`, the\npurchaser\
        \ may choose any number of photos up to the number of items in the\npackage.\n\
        \nNote that update operations will treat the value of the `items` property\
        \ as it\nis submitted in the request as the value it should have when the\
        \ request succeeds.\nWhen a package is updated, all of it's existing child\
        \ items are removed and new\nchild items are populated from the items present\
        \ in the request body."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      - "price"
      - "priceSheetGroupId"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "price-sheet-item-package"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of the price sheet item package."
          type: "string"
          maxLength: 250
        description:
          description: "A description to display to the user in order to give them\
            \ more\ninformation about the pacakge."
          type: "string"
        displayOrder:
          description: "The order in which the price sheet item package should be\
            \ displayed in a\nlist of items."
          type: "integer"
        price:
          description: "Decimal value of the price to be charged for the package."
          type: "number"
        shippingCharge:
          description: "Decimal value of any additional charge for shipping the package,\
            \ in\naddition to any shipping for the order."
          nullable: true
          type: "number"
        chargeShipping:
          description: "Denotes if the price sheet item package should be included\
            \ when\ncalculating shipping charges."
          type: "boolean"
          readOnly: true
        isTaxExempt:
          description: "Denotes that the price sheet item package price should not\
            \ be included\nwhen calculating sales tax."
          type: "boolean"
        allowedPhotoCount:
          title: "Number of Photos Allowed"
          description: "A `price-sheet-item-package` may specify the number of photos\
            \ that may\nbe applied to the items within the package. For example, if\
            \ this value\nis `1`, then only one photo may be chosen, and it will apply\
            \ to all\nitems in the package. If this value is `null`, then each item\
            \ in the\npackage may have a different photo applied to it.\n\nAt this\
            \ time, we support a value of either `1` or `null`. We may\nsupport other\
            \ values in the future."
          type: "integer"
          nullable: true
          maximum: 1
          minimum: 1
        items:
          title: "Price Sheet Item"
          description: "A `price-sheet-item-package` may be a combination of `price-sheet-item`\n\
            and `price-sheet-digital-item` items, allowing studios to create\nbundled\
            \ packages of products for one price."
          nullable: true
          type: "array"
          items:
            anyOf:
            - allOf:
              - required:
                - "quantity"
                properties:
                  quantity:
                    description: "The quantity of this `price-sheet-item` that is\
                      \ sold\nas part of this `price-sheet-item-package`."
                    type: "integer"
                    minimum: 0
                    maximum: 25
              - $ref: "#/components/schemas/PriceSheetItem"
            - allOf:
              - required:
                - "individualPhotoDownload"
                - "allAlbumPhotosDownload"
                - "allGalleryPhotosDownload"
                properties:
                  individualPhotoDownload:
                    type: "object"
                    required:
                    - "quantity"
                    properties:
                      quantity:
                        description: "The number of individual photos a customer may\
                          \ select at\ncheck-out as part of the digital download for\
                          \ this package.\n\n*Please note that only one of `individualPhotoDownload`,\n\
                          `allAlbumPhotosDownload`, and `allGalleryPhotosDownload`\n\
                          may have a positive `quantity` value.*"
                        type: "integer"
                        minimum: 0
                        maximum: 25
                  allAlbumPhotosDownload:
                    type: "object"
                    required:
                    - "quantity"
                    properties:
                      quantity:
                        description: "*Currently unused. Any value greater than zero\
                          \ will result\nin a validation error.*"
                        type: "integer"
                        minimum: 0
                        maximum: 0
                  allGalleryPhotosDownload:
                    type: "object"
                    required:
                    - "quantity"
                    properties:
                      quantity:
                        description: "A value of one (`1`) indicates that this package\
                          \ contains\na digital download containing all photos in\
                          \ the gallery.\n\n*Please note that only one of `individualPhotoDownload`,\n\
                          `allAlbumPhotosDownload`, and `allGalleryPhotosDownload`\n\
                          may have a positive `quantity` value.*"
                        type: "integer"
                        minimum: 0
                        maximum: 1
              - $ref: "#/components/schemas/PriceSheetItemDigital"
        images:
          title: "Price Sheet Element Image"
          description: "An array of images that represents the package."
          type: "array"
          items:
            $ref: "#/components/schemas/PriceSheetElementImage"
        priceSheetGroupId:
          allOf:
          - description: "The identifier of the price sheet group which contains the\
              \ package.\nThis is required when creating a new price sheet item package."
          - $ref: "#/components/schemas/Id"
        priceSheetSubgroupId:
          allOf:
          - description: "The identifier of the price sheet subgroup which contains\
              \ the package.\nThis cannot be changed after the package has been created."
            nullable: true
          - $ref: "#/components/schemas/Id"
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    PriceSheetShippingOption:
      title: "Price Sheet Shipping Option"
      description: "An option by which to ship items ordered from the price sheet."
      type: "object"
      required:
      - "type"
      - "title"
      - "price"
      properties:
        type:
          allOf:
          - enum:
            - "price-sheet-shipping-option"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        title:
          description: "The title of the price sheet shipping option."
          type: "string"
          example: "Custom Shipping"
        price:
          description: "A decimal value of the price of the shipping option,\nrepresented\
            \ in the currency of the brand."
          type: "number"
          maximum: 9999.99
          example: 6.45
        created:
          description: "The creation date of this shipping option."
          type: "string"
          format: "date-time"
          readOnly: true
    PriceSheetShippingOptionCollection:
      allOf:
      - description: "A collection of Price Sheet Shipping Options"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-shipping-option-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Shipping Option"
            type: "array"
            items:
              $ref: "#/components/schemas/PriceSheetShippingOption"
      - $ref: "#/components/schemas/List"
    PriceSheetSubgroup:
      title: "Price Sheet Subgroup"
      description: "A container for a collection of related items within the price\
        \ sheet, subordinate to a Price Sheet Group."
      type: "object"
      required:
      - "type"
      - "name"
      - "displayOrder"
      properties:
        type:
          allOf:
          - enum:
            - "price-sheet-subgroup"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: "The name of the price sheet subgroup."
          type: "string"
          nullable: true
        displayOrder:
          description: "The order in which the subgroup should be displayed in a list\
            \ of subgroups\nfor a price sheet or price sheet group."
          type: "integer"
        bounds:
          description: "The dimensional bounds of the price sheet subgroup."
          nullable: true
          readOnly: true
          type: "string"
        isCustom:
          description: "Denotes if the Subgroup was created by the Studio."
          readOnly: true
          type: "boolean"
        isCatchall:
          description: "Denotes that the subgroup contains items that are not intended\
            \ to belong\nin a subgroup based by size or commonality. This property\
            \ is only set when\ncreating a new subgroup."
          type: "boolean"
          deprecated: true
    PriceSheetSubgroupCollection:
      allOf:
      - description: "A collection of Price Sheet Subgroups"
        properties:
          type:
            allOf:
            - enum:
              - "price-sheet-subgroup-collection"
            - $ref: "#/components/schemas/Type"
          items:
            title: "Price Sheet Subgroup"
            type: "array"
            items:
              $ref: "#/components/schemas/PriceSheetSubgroup"
      - $ref: "#/components/schemas/List"
    PriceSheetSubgroupCollectionInPatch:
      title: "Price Sheet Subgroup Collection"
      description: "A collection of price sheet subgroups to be updated."
      allOf:
      - $ref: "#/components/schemas/BatchCollection"
      - type: "object"
        properties:
          items:
            type: "array"
            items:
              type: "object"
              properties:
                name:
                  description: "The name of the price sheet subgroup."
                  type: "string"
                displayOrder:
                  description: "The order in which the subgroup should be displayed\
                    \ in a list of subgroups\nfor a price sheet or price sheet group."
                  type: "integer"
        example:
          type: "price-sheet-subgroup-collection"
          items:
          - id:
            - 1
            type: "price-sheet-subgroup"
            displayOrder: 1
          - id:
            - 2
            type: "price-sheet-subgroup"
            name: "Subgroup2"
            displayOrder: 2
    ServiceDescription:
      allOf:
      - title: "Service Description"
        type: "object"
        properties:
          type:
            allOf:
            - $ref: "#/components/schemas/Type"
            - enum:
              - "service-description"
          name:
            description: "The name of the API service."
            type: "string"
          time:
            description: "The current server time for this API service."
            type: "string"
            format: "date-time"
          contentType:
            description: "An array of acceptable media types for this API service."
            type: "array"
            items:
              type: "string"
              enum:
              - "application/vnd.shootproof+json"
          links:
            $ref: "#/components/schemas/Links"
      - properties:
          name:
            example: "ShootProof Studio Panel API"
    Shorturl:
      title: "Shorturl"
      description: "Represents a URL that has been converted to a shortened format,\
        \ suitable\nfor sharing on social networking platforms."
      type: "object"
      required:
      - "type"
      - "url"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "shorturl"
        links:
          $ref: "#/components/schemas/Links"
        url:
          description: "The URL to shorten."
          type: "string"
          format: "uri"
          example: "https://example.com/a-really-long-url"
        shorturl:
          description: "The shortened form of `url`. This URL will redirect to `url`."
          type: "string"
          format: "uri"
          readOnly: true
          example: "https://xmpl.io/a4oi"
    Signature:
      title: "Signature"
      description: "A signature."
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "signature"
        links:
          $ref: "#/components/schemas/Links"
        id:
          allOf:
          - $ref: "#/components/schemas/Id"
          - readOnly: true
        publicId:
          description: "The public identifier for this signature (may be used in the\
            \ portal\nwebsite)."
          type: "string"
          pattern: "^[a-fA-F0-9]{32}$"
          readOnly: true
        signaturePaths:
          description: "The SVG paths that define this signature."
          type: "string"
        svgViewbox:
          description: "The SVG viewbox that defines the dimensions of this signature."
          type: "string"
        created:
          title: "Entity Creation Date"
          description: "The date on which the entity was created."
          type: "string"
          format: "date-time"
          readOnly: true
    Song:
      title: "Song"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/Type"
          - enum:
            - "song"
        id:
          $ref: "#/components/schemas/Id"
        title:
          description: "Song title."
          type: "string"
          readOnly: true
        artist:
          description: "Artist name."
          type: "string"
          readOnly: true
        duration:
          description: "Duration of the song, in seconds."
          type: "integer"
          readOnly: true
        tempo:
          description: "Tempo of the song."
          type: "string"
          enum:
          - "fast"
          - "medium"
          - "slow"
          readOnly: true
        isInstrumental:
          description: "Whether the track is an instrumental or vocal track."
          type: "boolean"
          readOnly: true
        themes:
          description: "The themes describing the song."
          type: "array"
          items:
            type: "string"
          readOnly: true
        moods:
          description: "The moods describing the song."
          type: "array"
          items:
            type: "string"
          readOnly: true
        styles:
          description: "The styles describing the song."
          type: "array"
          items:
            type: "string"
          readOnly: true
        instruments:
          description: "The instruments featured in the song."
          type: "array"
          items:
            type: "string"
          readOnly: true
        lyrics:
          description: "The lyrics for this song."
          type: "string"
          readOnly: true
        media:
          description: "The media URLs for the different streams and files."
          type: "object"
          properties:
            fullStreamUrl:
              type: "string"
              format: "uri"
              readOnly: true
            sampleStreamUrl:
              type: "string"
              format: "uri"
              readOnly: true
            artistThumbnailUrl:
              type: "string"
              format: "uri"
              readOnly: true
    SongCollection:
      allOf:
      - title: "Collection of songs"
        properties:
          type:
            enum:
            - "song-collection"
          items:
            title: "Song"
            type: "array"
            items:
              $ref: "#/components/schemas/Song"
      - $ref: "#/components/schemas/List"
    Studio:
      title: "Studio"
      description: "The studio."
      type: "object"
      readOnly: true
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "studio"
        links:
          $ref: "#/components/schemas/Links"
        country:
          description: "The country code for this studio."
          type: "string"
          minLength: 2
          maxLength: 2
        emailRecipientsAllowed:
          description: "Studio users are allowed to send email through their ShootProof\
            \ account\nfor a variety of actions. Some of these allow the studio user\
            \ to specify\nthe email addresses of recipients. In these cases, this\
            \ property indicates\nthe maximum number of recipients the studio is allowed\
            \ to add to a single\nemail message. It is for information purposes only;\
            \ ShootProof enforces\nthis at the API, resulting in an appropriate error\
            \ message if more than\nthe allowed number of recipients are provided."
          type: "integer"
          readOnly: true
        emailVerification:
          description: "Information about email verification, if needed."
          type: "object"
          properties:
            isVerified:
              description: "Indicates whether email is verified or not."
              type: "boolean"
            challengeLink:
              description: "Absolute studio path for sending a verification email."
              type: "string"
              nullable: true
            email:
              description: "Email that needs to be verified."
              type: "string"
              nullable: true
        galleryUrl:
          description: "The base URL for this studio's default brand."
          type: "string"
          format: "uri"
        hasExifSearch:
          description: "Whether the studio has EXIF photo keyword searching enabled."
          type: "boolean"
        hasPaymentGateway:
          description: "Whether the studio has a payment gateway set up."
          type: "boolean"
        isMusicPlanTrialEligible:
          description: "Whether the studio is eligible for a Music Plan trial."
          type: "boolean"
        musicPlan:
          title: "Studio Music Plan"
          description: "A music plan assigned to a studio."
          type: "object"
          readOnly: true
          nullable: true
          properties:
            type:
              description: "The type of object represented."
              type: "string"
              enum:
              - "studio-music-plan"
            links:
              $ref: "#/components/schemas/Links"
            currencyCode:
              description: "The type of currency used for this plan."
              type: "string"
            currencySymbol:
              description: "The currency symbol for the type of currency used for\
                \ this plan."
              type: "string"
            description:
              description: "The plan description."
              type: "string"
            isMonthly:
              description: "Whether the plan renews on a monthly basis."
              type: "boolean"
            isYearly:
              description: "Whether the plan renews on a yearly basis."
              type: "boolean"
            isFree:
              description: "Whether the plan is a *free* plan."
              type: "boolean"
            isUnlimited:
              description: "Whether the plan is an unlimited plan."
              type: "boolean"
            name:
              description: "The name of the plan."
              type: "string"
            playlistSize:
              description: "The number of songs that can be added to a playlist."
              type: "number"
              enum:
              - 3
              - 20
            price:
              description: "The plan price."
              type: "number"
        photosInQueueCount:
          description: "The total number of photos in the queue to be processed for\
            \ this\nstudio."
          type: "number"
        photoPlan:
          $ref: "#/components/schemas/StudioPhotoPlan"
        referral:
          description: "The referral property provides information regarding the number\
            \ of other\nstudios the current studio has referred, the credit the studio\
            \ can earn,\nhow much they've earned so far, and a URL the studio may\
            \ use when\nreferring others to ShootProof, so that they can get the referral\
            \ credit\nwhen the others sign up for an account."
          type: "object"
          readOnly: true
          properties:
            type:
              allOf:
              - $ref: "#/components/schemas/Type"
              - enum:
                - "studio-referral"
            links:
              $ref: "#/components/schemas/Links"
            url:
              description: "A URL the studio may give to others in order to get referral\
                \ credit\nwhen the others sign up for a ShootProof account."
              type: "string"
              format: "uri"
            totalCreditEarned:
              description: "The total amount of credit the studio has earned from\
                \ referrals.\n\nThis value is in the studio's plan currency. To get\
                \ the currency symbol\nand code, use the `me` resource and find these\
                \ values at\n`.studio.photoPlan.currencySymbol` and `.studio.photoPlan.currencyCode`."
              type: "number"
            referralsJoined:
              description: "The number of studios who have signed up through the current\
                \ studio's\nreferral URL and who have processed their first bill."
              type: "integer"
            planPossibleCredit:
              description: "Based on this studio's current plan, the `planPossibleCredit`\
                \ is the\namount of credit a studio may earn when a referred studio's\
                \ first\nbill is processed.\n\nThis value is in the studio's plan\
                \ currency. To get the currency symbol\nand code, use the `me` resource\
                \ and find these values at\n`.studio.photoPlan.currencySymbol` and\
                \ `.studio.photoPlan.currencyCode`."
              type: "number"
            maxPossibleCredit:
              description: "The `maxPossibleCredit` is the amount of credit this studio\
                \ may earn\nper valid referral when this studio upgrades their plan.\n\
                \nThis value is in the studio's plan currency. To get the currency\
                \ symbol\nand code, use the `me` resource and find these values at\n\
                `.studio.photoPlan.currencySymbol` and `.studio.photoPlan.currencyCode`."
              type: "number"
        created:
          description: "The date on which this studio was created."
          type: "string"
          format: "date-time"
    StudioCreditCard:
      title: "Studio Credit Card"
      description: "Studio credit card information."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "studio-credit-card"
        creditCard:
          description: "Credit card information on file for the studio, or `false`\
            \ if there\nis no credit card on file."
          type: "object"
          properties:
            maskedNumber:
              description: "The masked credit card number for the studio."
              type: "string"
    StudioMoneyBalance:
      title: "Studio Money Balance"
      description: "Studio money balance information."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "studio-money-balance"
        moneyBalance:
          description: "The money balance for the studio."
          type: "object"
          properties:
            amount:
              description: "The monetary amount currently maintained in the studio\
                \ account."
              type: "number"
            currencyCode:
              description: "The currency in which `amount` is represented."
              type: "string"
    StudioPhotoPlan:
      title: "Studio Photo Plan"
      description: "A photo plan assigned to a studio."
      type: "object"
      readOnly: true
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "studio-photo-plan"
        links:
          $ref: "#/components/schemas/Links"
        name:
          description: "The name of the plan."
          type: "string"
        allowUploads:
          description: "Whether photo uploads are allowed for this plan."
          type: "boolean"
        archiveRate:
          description: "Archiving cost per gigabyte."
          type: "number"
        currencyCode:
          description: "The type of currency used for this plan."
          type: "string"
        currencySymbol:
          description: "The currency symbol for the type of currency used for this\
            \ plan."
          type: "string"
        description:
          description: "The plan description."
          type: "string"
        includesStudioManagement:
          description: "Whether the plan includes studio management features."
          type: "boolean"
        isMonthly:
          description: "Whether the plan renews on a monthly basis."
          type: "boolean"
        isStorageUsed:
          description: "Whether the plan is a storage-used gigabyte plan."
          type: "boolean"
        isUnlimited:
          description: "Whether the plan is an unlimited plan."
          type: "boolean"
        isYearly:
          description: "Whether the plan renews on a yearly basis."
          type: "boolean"
        isFree:
          description: "Whether the plan is a *free* plan."
          type: "boolean"
        planType:
          description: "The type of subscription plan."
          type: "string"
          enum:
          - "photo-count"
          - "photo-storage"
        price:
          description: "The plan price."
          type: "number"
        totalActivePhotosCount:
          description: "The total active photos for stored for the studio."
          type: "number"
        totalActivePhotosStorage:
          description: "The total filesize (in bytes) of active photos stored for\
            \ the\nstudio."
          type: "number"
        totalAllowedPhotos:
          description: "The total photos a studio can use at one time under this plan.\
            \ This\ntakes into account the studio's plan total plus any bonuses they\
            \ may\nhave.\n\nPlease note: If the `planType` is \"photo-storage,\" this\
            \ value will\nbe `0`."
          type: "number"
        totalArchivedPhotosStorage:
          description: "Amount of archive storage space currently in use, in bytes.\n\
            \nThis value is `null` if the studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
        freeArchiveStorageSpaceGranted:
          description: "Amount of free archive storage space granted, in bytes. Typically\n\
            granted via referral of another studio.\n\nThis value is `null` if the\
            \ studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
        freeArchiveStorageSpaceRemaining:
          description: "Amount of free archive storage space remaining, in bytes.\n\
            \nThis value is `null` if the studio is in a `photo-storage` plan."
          readOnly: true
          nullable: true
          type: "number"
    StudioToClientEmail:
      allOf:
      - title: "Studio-to-Client Email Message"
        description: "A Studio-to-Client email message."
        properties:
          headline:
            description: "The headline to use in the email body."
            type: "string"
            maxLength: 100
          buttonText:
            description: "The text for the call-to-action button in the email body."
            type: "string"
            maxLength: 25
      - $ref: "#/components/schemas/BasicEmailMessage"
    TaxProfile:
      title: "Tax Profile"
      type: "object"
      required:
      - "type"
      - "name"
      - "taxPercentage"
      properties:
        type:
          allOf:
          - enum:
            - "tax-profile"
          - $ref: "#/components/schemas/Type"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for the tax profile."
          type: "integer"
          readOnly: true
        name:
          description: "Name of the Tax Profile"
          type: "string"
        taxPercentage:
          description: "Tax percentage"
          type: "number"
          format: "float"
        applyToShipping:
          description: "If set to true, the profile will apply to shipping charges."
          type: "boolean"
        applyToDigitals:
          description: "If set to true, the profile will apply to digital items."
          type: "boolean"
        taxBreakdownName1:
          description: "Tax breakdowns allow a user to split the tax rate (`taxPercentage`)\
            \ value above into 2 pieces for more\ngranularity on what the taxes represent\
            \ that are being charged. If set, this breakdown will display in the\n\
            shopping cart and on invoices.\n\nName of the 1st tax breakdown. If the\
            \ `taxPercentage` should be broken down, this specifies the name of the\n\
            first percentage in the breakdown.\n\nThis property is required if `taxBreakdownPercentage1`\
            \ is provided."
          type: "string"
          nullable: true
        taxBreakdownPercentage1:
          description: "Percentage of the 1st tax breakdown. If the `taxPercentage`\
            \ should be broken down, this specifies the first\npercentage in the breakdown.\
            \ Refer to the `taxBreakdownName1` documentation for more information\
            \ about tax\nbreakdowns.\n\nThis property is required if `taxBreakdownName1`\
            \ is provided."
          type: "number"
          format: "float"
          nullable: true
        taxBreakdownName2:
          description: "Name of the 2nd tax breakdown. If the `taxPercentage` should\
            \ be broken down, this specifies the name of the\nsecond percentage in\
            \ the breakdown. Refer to the `taxBreakdownName1` documentation for more\
            \ information about\ntax breakdowns.\n\nThis property is required if `taxBreakdownPercentage2`\
            \ is provided."
          type: "string"
          nullable: true
        taxBreakdownPercentage2:
          description: "Percentage of the 2nd tax breakdown. If the `taxPercentage`\
            \ should be broken down, this specifies the second\npercentage in the\
            \ breakdown. Refer to the `taxBreakdownName1` documentation for more information\
            \ about tax\nbreakdowns.\n\nThis property is required if `taxBreakdownName2`\
            \ is provided."
          type: "number"
          format: "float"
          nullable: true
        countryCode:
          description: "Two-character ISO-3166 code identifying the destination country\
            \ where this\ntax profile option is available. If not provided, the profile\
            \ will apply\nto all countries where products are offered.\n\nThis field\
            \ is required if `stateCode` is provided."
          type: "string"
          example: "US"
          nullable: true
        stateCode:
          description: "Two-character state/province code identifying the destination\
            \ country where this\ntax profile option is available. If not provided,\
            \ the profile will apply\nto all states/provinces within the `countryCode`.\n\
            \nThe property `countryCode` is required for this property, and the region\n\
            identified by the `stateCode` must be located within the country identified\n\
            by the `countryCode`."
          type: "string"
          example: "NY"
          nullable: true
        created:
          $ref: "#/components/schemas/Signature/properties/created"
    TransactionError:
      allOf:
      - description: "A validation error."
        properties:
          info:
            type: "object"
            properties:
              transactionErrors:
                description: "If the error response includes credit card transaction\n\
                  errors that cannot be related back to a value on the\nrequest, this\
                  \ `info.transactionErrors` object is included.\nThe response will\
                  \ be a `400 Bad Request` response and\ncontain this `info.transactionErrors`\
                  \ property.\n\nEach property name in the `transactionErrors` object\
                  \ is a\nkey that identifies a unique transaction error type. The\n\
                  value is a human-readable string in English language only,\nwhich\
                  \ could be displayed in a client if necessary.\nOtherwise, it is\
                  \ recommended that the client switch on the\n`transactionErrors`\
                  \ key names to display a translated error\nmessage in the end user's\
                  \ preferred language describing the\nerror that occurred.\n\nPossible\
                  \ `info.transactionErrors` keys:\n\n* `noResponseReceived`: No response\
                  \ received from payment\ngateway.\n* `declined`: Transaction was\
                  \ declined.\n* `gatewayRejected`: The payment gateway rejected\n\
                  transaction.\n* `unexpected`: An unexpected error occurred; value\
                  \ will be\nraw error message directly from the payment gateway."
                type: "object"
      - $ref: "#/components/schemas/ErrorValidation"
    Type:
      title: "Resource Type"
      description: "The type of resource represented."
      type: "string"
      example: "resource-type"
    User:
      title: "Studio Panel User"
      description: "A Studio Panel user."
      type: "object"
      properties:
        type:
          description: "The type of object represented."
          type: "string"
          enum:
          - "user"
        links:
          $ref: "#/components/schemas/Links"
        id:
          description: "The identifier for this user."
          type: "number"
        userStatusId:
          description: "The numeric identifier for this user's status."
          type: "number"
        userStatus:
          description: "A human-readable string describing this user's status."
          type: "string"
          readOnly: true
        firstName:
          description: "The first name for this user."
          type: "string"
        lastName:
          description: "The last name for this user."
          type: "string"
        name:
          description: "The full name for this user."
          type: "string"
        email:
          description: "The email address for this user."
          type: "string"
          format: "email"
        lastLogin:
          description: "The date on which this user last logged in to the Studio Panel."
          format: "date-time"
          readOnly: true
          nullable: true
          type: "string"
        permissions:
          description: "An array of permission identifiers indicating the permission\
            \ levels\nthis user has within the Studio Panel.\n\n| Permission | Description\
            \ |\n| ---------- | ----------- |\n| `account.payment-read` | The user\
            \ may view the studio account's plan & billing information. |\n| `account.payment-withdrawal`\
            \ | The user may request payment withdrawals on behalf of the studio.\
            \ |\n| `account.read` | The user may view studio account settings (e.g.\
            \ contact info, users, etc.). |\n| `account.update` | The user may update\
            \ studio account settings (e.g. contact info, users, etc.). |\n| `brand-theme.create`\
            \ | The user may create themes. |\n| `brand-theme.read` | The user may\
            \ view themes. |\n| `brand-theme.update` | The user may edit themes. |\n\
            | `brand.homepage-update` | The user may edit the client galleries homepage\
            \ for a brand. |\n| `contact.create` | The user may create contacts. |\n\
            | `contact.read` | The user may view contacts. |\n| `contact.update` |\
            \ The user may edit contacts. |\n| `contract.create` | The user may create\
            \ contracts. |\n| `contract.read` | The user may view contracts. |\n|\
            \ `contract.update` | The user may edit contracts. |\n| `email-template.create`\
            \ | The user may create email templates and automation groups. |\n| `email-template.read`\
            \ | The user may view email templates and automation groups. |\n| `email-template.update`\
            \ | The user may edit email templates and automation groups. |\n| `event-defaults.create`\
            \ | The user may create default settings for events. |\n| `event-defaults.read`\
            \ | The user may view default settings for events. |\n| `event-defaults.update`\
            \ | The user may edit default settings for events. |\n| `event-photo.create`\
            \ | The user may create event photos. |\n| `event-photo.update` | The\
            \ user may edit event photos. |\n| `event.create` | The user may create\
            \ events. |\n| `event.created-only` | The user may only view/edit/delete\
            \ events they created. |\n| `event.delete` | The user may delete events.\
            \ |\n| `event.read` | The user may view events. |\n| `event.update` |\
            \ The user may edit events. |\n| `invoice.create` | The user may create\
            \ invoices. |\n| `invoice.read` | The user may view invoices. |\n| `invoice.update`\
            \ | The user may edit invoices. |\n| `mobile-app.create` | The user may\
            \ create mobile apps. |\n| `mobile-app.read` | The user may view mobile\
            \ apps. |\n| `mobile-app.update` | The user may edit mobile apps. |\n\
            | `order.read` | The user may view orders. |\n| `order.update` | The user\
            \ may edit orders. |\n| `playlist.read` | The user may view music playlists.\
            \ |\n| `playlist.update` |  The user may edit music playlists. |\n| `price-sheet.create`\
            \ | The user may create price sheets. |\n| `price-sheet.read` | The user\
            \ may view price sheets. |\n| `price-sheet.update` | The user may edit\
            \ price sheets. |\n| `report.event-visitors-read` | The user may view\
            \ the \"Event Visitors\" report. |\n| `report.invoices-read` | The user\
            \ may view the \"Invoices\" report. |\n| `report.items-read` | The user\
            \ may view the \"Top-Selling Items\" report. |\n| `report.orders-read`\
            \ | The user may view the \"Orders\" report. |\n| `report.sales-read`\
            \ | The user may view the \"Sales\" report. |\n| `tool.read` | The user\
            \ may view the available downloadable tools (i.e. Desktop Uploader). |\n\
            | `watermark.create` | The user may create watermarks. |\n| `watermark.read`\
            \ | The user may view watermarks. |\n| `watermark.update` | The user may\
            \ edit watermarks. |"
          type: "array"
          uniqueItems: true
          items:
            description: "A permission identifier"
            type: "string"
            enum:
            - "account.payment-read"
            - "account.payment-withdrawal"
            - "account.read"
            - "account.update"
            - "brand-theme.create"
            - "brand-theme.read"
            - "brand-theme.update"
            - "brand.homepage-update"
            - "contact.create"
            - "contact.read"
            - "contact.update"
            - "contract.create"
            - "contract.read"
            - "contract.update"
            - "email-template.create"
            - "email-template.read"
            - "email-template.update"
            - "event-defaults.create"
            - "event-defaults.read"
            - "event-defaults.update"
            - "event-photo.create"
            - "event-photo.update"
            - "event.create"
            - "event.created-only"
            - "event.delete"
            - "event.read"
            - "event.update"
            - "invoice.create"
            - "invoice.read"
            - "invoice.update"
            - "mobile-app.create"
            - "mobile-app.read"
            - "mobile-app.update"
            - "order.read"
            - "order.update"
            - "playlist.read"
            - "playlist.update"
            - "price-sheet.create"
            - "price-sheet.read"
            - "price-sheet.update"
            - "report.event-visitors-read"
            - "report.invoices-read"
            - "report.items-read"
            - "report.orders-read"
            - "report.sales-read"
            - "tool.read"
            - "watermark.create"
            - "watermark.read"
            - "watermark.update"
        created:
          description: "The date on which this user was created."
          type: "string"
          format: "date-time"
          readOnly: true
    WatermarkCollection:
      title: "Watermark Collection"
      description: "A collection of watermarks."
      allOf:
      - type: "object"
        properties:
          type:
            description: "The model type for the list response object."
            type: "string"
            enum:
            - "watermark-collection"
          items:
            type: "array"
            items:
              description: "A watermark as viewed from a collection.\n\nA demo image\
                \ representing the watermark for purposes of\ndemonstration may be\
                \ retrieved using the `.displayUrl`."
              type: "object"
              required:
              - "type"
              - "links"
              - "id"
              - "name"
              - "isDefault"
              - "created"
              properties:
                type:
                  description: "The type of object represented."
                  type: "string"
                  enum:
                  - "watermark"
                links:
                  $ref: "#/components/schemas/Links"
                id:
                  description: "The identifier for this watermark."
                  type: "integer"
                name:
                  description: "The name of this watermark."
                  type: "string"
                isDefault:
                  description: "Whether this watermark is the brand's default watermark."
                  type: "boolean"
                displayUrl:
                  description: "An object of display demo URLs, identified by demo\
                    \ image\nID."
                  type: "object"
                  readOnly: true
                  properties:
                    demoImage1:
                      description: "A URL indicating a demo image depicting the watermark."
                      type: "string"
                      format: "uri"
                    demoImage2:
                      description: "A URL indicating a demo image depicting the watermark."
                      type: "string"
                      format: "uri"
                created:
                  description: "The creation date of this watermark."
                  type: "string"
                  format: "date-time"
      - $ref: "#/components/schemas/List"
    ZipBundle:
      title: "Zip Bundle"
      description: "A zip bundle."
      type: "object"
      properties:
        type:
          description: "The type of object represented"
          type: "string"
          enum:
          - "zip-bundle"
        links:
          $ref: "#/components/schemas/Links"
        photoIds:
          type: "array"
          description: "The (optional) IDs of the photos included in this zip bundle.\
            \ If present, zip bundle will be limited to photo IDs present in this\
            \ value.\n"
          items:
            type: "number"
          writeOnly: true
        email:
          description: "The email address of an external user to send this zip bundle\
            \ to.\n\nIf provided, the zip bundle generated will result in an email\
            \ being\nsent to this address where the zip bundle link points to the\
            \ client\nGallery's zip bundle download page.  By providing this value,\
            \ it is\nassumed that the intended recipient is an external user.\n\n\
            If a value is not provided, the zip bundle generated will be sent to\n\
            the requester's email address, and the link will be to a Studio\nPanel\
            \ page where the ZIP file(s) can be downloaded.\n"
          type: "string"
          format: "email"
          writeOnly: true
        zipBundleStatus:
          type: "string"
          description: "A slug string representing the status message describing the\
            \ state of the zip bundle.\n* `awaiting-processing` - In the queue for\
            \ processing\n* `processing` - Photos are being processed and zip bundle\
            \ assembled.\n* `downloadable` - Zip bundle is ready for download.\n*\
            \ `deleted` - Bundle has been deleted"
          enum:
          - "awaiting-processing"
          - "processing"
          - "downloadable"
          - "deleted"
          readOnly: true
        zipBundleType:
          type: "string"
          description: "The digital download type slug:\n* `digital-download-order`\
            \ - Bundle of all photos belonging to a single paid digitals order\n*\
            \ `studio-group-photos` - Studio panel user selected group of photos\n\
            * `event-all-photos` - Bundle of all photos belonging to the event\n*\
            \ `event-all-photos-client` - Client gallery user chose to download all\
            \ photos in the event\n* `studio-sent-client-link` - Studio panel user\
            \ generated a zip bundle and corresponding share link, no email address\
            \ associated with this type of zip bundle == no authentication\n* `album-all-photos`\
            \ -  Bundle of all photos belonging to the event album, only used by studio\
            \ panel\n* `client-group-photos` - Client user's arbitrary selection of\
            \ photos grouped together into a zip bundle for download"
          enum:
          - "digital-download-order"
          - "studio-group-photos"
          - "event-all-photos"
          - "event-all-photos-client"
          - "studio-sent-client-link"
          - "album-all-photos"
          - "client-group-photos"
          readOnly: true
        downloadPageUrl:
          description: "The URL for the download page where the zip bundle can be\n\
            downloaded. Is either a URL to a Studio Panel download page, or a\nclient\
            \ gallery download page if the zip bundle is to be publicly\naccessible."
          readOnly: true
          format: "uri"
          nullable: true
          type: "string"
        numFiles:
          description: "The number of files that make up this zip bundle. Null until\n\
            processing is complete."
          readOnly: true
          nullable: true
          type: "number"
        expiration:
          type: "string"
          format: "date-time"
          description: "Datetime representing the expiration for the given URL. URL\
            \ will no\nlonger be valid after this time."
          readOnly: true
  parameters:
    accept:
      name: "Accept"
      in: "header"
      description: "Specifies the media type to return. If not provided, the default\n\
        response content type is assumed. Not all endpoints support additional\nmedia\
        \ types."
      schema:
        type: "string"
        enum:
        - "application/vnd.shootproof+json"
        - "text/csv"
    authentication:
      name: "Authentication"
      in: "header"
      description: "The [bearer token](https://tools.ietf.org/html/rfc6750) used to\
        \ make\nauthenticated requests to the ShootProof Studio API. See the\n[authorization\
        \ guide](/guide/authorization/) for more information on how to\nobtain and\
        \ use bearer tokens."
      required: true
      schema:
        type: "string"
    brandId:
      name: "brandId"
      in: "path"
      description: "The brand identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    brandThemeId:
      name: "brandThemeId"
      in: "path"
      description: "The brand theme identifier."
      required: true
      schema:
        type: "integer"
    contactId:
      name: "contactId"
      in: "path"
      description: "The contact identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    contractId:
      name: "contractId"
      in: "path"
      description: "A contract identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    contractTemplateId:
      name: "contractTemplateId"
      in: "path"
      description: "A contract template identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    digitalRuleId:
      name: "digitalRuleId"
      in: "path"
      description: "The digital rule identifier."
      required: true
      schema:
        type: "integer"
    dpaId:
      name: "dpaId"
      in: "path"
      description: "The DPA identifier."
      required: true
      schema:
        type: "string"
    emailAutomationGroupId:
      name: "emailAutomationGroupId"
      in: "path"
      description: "An email automation group identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    eventAlbumId:
      name: "eventAlbumId"
      in: "path"
      description: "The event album identifier."
      required: true
      schema:
        type: "integer"
    eventCategoryId:
      name: "eventCategoryId"
      in: "path"
      description: "The event category identifier."
      required: true
      schema:
        type: "integer"
    eventContactDefaultsId:
      name: "eventContactDefaultsId"
      in: "path"
      description: "The event contact defaults identifier."
      required: true
      schema:
        type: "integer"
    eventDefaultsId:
      name: "eventDefaultsId"
      in: "path"
      description: "The event defaults identifier."
      required: true
      schema:
        type: "integer"
    eventId:
      name: "eventId"
      in: "path"
      description: "The event identifier."
      required: true
      schema:
        type: "integer"
    eventPhotoId:
      name: "eventPhotoId"
      in: "path"
      description: "The event photo identifier."
      required: true
      schema:
        type: "integer"
    filterBrandId:
      name: "filterBrandId"
      in: "query"
      description: "Filters a collection by brand identifier."
      schema:
        $ref: "#/components/schemas/Id"
    filterEventId:
      name: "filterEventId"
      in: "query"
      description: "Filters a collection by event identifier."
      schema:
        $ref: "#/components/schemas/Id"
    invoiceDiscountId:
      name: "invoiceDiscountId"
      in: "path"
      description: "The invoice discount identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    invoiceDiscountTemplateId:
      name: "invoiceDiscountTemplateId"
      in: "path"
      description: "The invoice discount template identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    invoiceId:
      name: "invoiceId"
      in: "path"
      description: "An invoice identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    invoiceItemTemplateId:
      name: "invoiceItemTemplateId"
      in: "path"
      description: "The invoice item template identifier."
      required: true
      schema:
        type: "integer"
    invoiceTemplateId:
      name: "invoiceTemplateId"
      in: "path"
      description: "The invoice template identifier."
      required: true
      schema:
        type: "integer"
    labCatalogId:
      name: "labCatalogId"
      in: "path"
      description: "The lab catalog identifier."
      required: true
      schema:
        type: "integer"
    labCatalogGroupId:
      name: "labCatalogGroupId"
      in: "path"
      description: "The lab catalog group identifier."
      required: true
      schema:
        type: "integer"
    labCatalogProductId:
      name: "labCatalogProductId"
      in: "path"
      description: "The lab catalog product identifier."
      required: true
      schema:
        type: "integer"
    labCatalogShippingOptionId:
      name: "labCatalogShippingOptionId"
      in: "path"
      description: "The lab catalog shipping option identifier."
      required: true
      schema:
        type: "integer"
    notificationId:
      name: "notificationId"
      in: "path"
      description: "A notification identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    orderId:
      name: "orderId"
      in: "path"
      description: "The order identifier."
      required: true
      schema:
        type: "integer"
    orderItemId:
      name: "orderItemId"
      in: "path"
      description: "The order item identifier."
      required: true
      schema:
        type: "integer"
    page:
      name: "page"
      in: "query"
      description: "The page of results to return."
      schema:
        type: "integer"
        default: 1
    preferHeader:
      name: "Prefer"
      in: "header"
      description: "A preference to apply to the response (see [RFC 7240](https://tools.ietf.org/search/rfc7240)).\n"
      schema:
        type: "string"
        enum:
        - "return=minimal"
    preferParameter:
      name: "prefer"
      in: "query"
      description: "A preference to apply to the response (see [RFC\n7240](https://tools.ietf.org/search/rfc7240));\
        \ useful if unable to set the\nHTTP `Prefer` header."
      schema:
        type: "string"
        enum:
        - "return=minimal"
    priceSheetAddOnGroupId:
      name: "priceSheetAddOnGroupId"
      in: "path"
      description: "The pricesheet add-on group identifier."
      required: true
      schema:
        type: "integer"
    priceSheetAddOnOptionId:
      name: "priceSheetAddOnOptionId"
      in: "path"
      description: "The pricesheet add-on option identifier."
      required: true
      schema:
        type: "integer"
    priceSheetGroupId:
      name: "priceSheetGroupId"
      in: "path"
      description: "The pricesheet group identifier."
      required: true
      schema:
        type: "integer"
    priceSheetShippingOptionId:
      name: "priceSheetShippingOptionId"
      in: "path"
      description: "The pricesheet shipping option identifier."
      required: true
      schema:
        type: "integer"
    priceSheetSubgroupId:
      name: "priceSheetSubgroupId"
      in: "path"
      description: "The pricesheet subgroup identifier."
      required: true
      schema:
        type: "integer"
    priceSheetId:
      name: "priceSheetId"
      in: "path"
      description: "The price sheet identifier."
      required: true
      schema:
        type: "integer"
    priceSheetItemId:
      name: "priceSheetItemId"
      in: "path"
      description: "The price sheet item identifier."
      required: true
      schema:
        type: "integer"
    rangeHeader:
      name: "Range"
      in: "header"
      description: "A index-based range of items to request."
      schema:
        type: "string"
    rangeParameter:
      name: "range"
      in: "query"
      description: "A index-based range of items to request; useful if unable to set\
        \ the\nHTTP `Range` header in your request."
      schema:
        type: "string"
    rows:
      name: "rows"
      in: "query"
      description: "The number of rows to return on each page of results."
      schema:
        type: "integer"
        default: 25
    signatureId:
      name: "signatureId"
      in: "path"
      description: "A signature identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    sortTypeDefaultAsc:
      name: "sortType"
      in: "query"
      description: "The direction in which sorting should occur."
      schema:
        type: "string"
        enum:
        - "asc"
        - "desc"
        default: "asc"
    sortTypeDefaultDesc:
      name: "sortType"
      in: "query"
      description: "The direction in which sorting should occur."
      schema:
        type: "string"
        enum:
        - "asc"
        - "desc"
        default: "desc"
    taxProfileId:
      name: "taxProfileId"
      in: "path"
      description: "The tax profile identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    zipBundleId:
      name: "zipBundleId"
      in: "path"
      description: "The zip bundle identifier."
      required: true
      schema:
        type: "integer"
  responses:
    conflictError:
      description: "The request could not be completed due to a conflict with the\
        \ current state of\nthe target resource."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    defaultError:
      description: "API errors come in two kinds of varieties: `400`s and `500`s.\n\
        \nAny error with a status code of `400` to `499` is considered a client error.\n\
        This means it’s usually an error you can handle in your app, and then resend\
        \ a\nmodified request to the ShootProof API to get a successful response.\n\
        \nAn error in the range of `500` to `599`, on the other hand, is a different\n\
        story. These errors usually mean that a problem occured on the server and\n\
        resending the request with modifications will not fix the issue.\n\nPay careful\
        \ attention to the status codes. We try to stick as close as possible\nto\
        \ their defined semantics. For a complete list of HTTP status codes, take\
        \ a\nlook at the official [HTTP Status Code Registry](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n\
        \nCheck out our [errors guide](https://developer.shootproof.com/guide/errors/)\n\
        for more information."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            badrequest:
              summary: "Validation Error Example"
              value:
                type: "https://developer.shootproof.com/errors#error-bad-request"
                title: "Bad Request"
                detail: "There was a problem with your request. Please see `info`\
                  \ for more information."
                status: 400
                info:
                  errors:
                    type:
                      isEmpty: "Value is required and can't be empty"
            unauthorized:
              summary: "Unauthorized Error Example"
              value:
                type: "https://developer.shootproof.com/errors#error-unauthorized"
                title: "Unauthorized"
                detail: "No authorization credentials provided. You must provide an\
                  \ authorization token for this request."
                status: 401
            forbidden:
              summary: "Forbidden Error Example"
              value:
                type: "https://developer.shootproof.com/errors#error-forbidden"
                title: "Forbidden"
                detail: "You do not have permission to access the requested resource."
                status: 403
            notfound:
              summary: "Not Found Error Example"
              value:
                type: "https://developer.shootproof.com/errors#error-not-found"
                title: "Not Found"
                detail: "The requested resource could not be found."
                status: 404
            servererror:
              summary: "Server Error Example"
              value:
                type: "https://developer.shootproof.com/errors#error-server-error"
                title: "Internal Server Error"
                status: 500
                detail: "An error occurred on the server. If this error continues\
                  \ to occur, please contact support."
    deleteSuccess:
      description: "The resource was successfully deleted."
    forbiddenError:
      description: "The provided access credentials are not valid for the requested\
        \ resource."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    notFoundError:
      description: "The requested resource could not be found."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    tooManyRequestsError:
      description: "The requester has sent too many requests in a given amount of\
        \ time (\"rate\nlimiting\")."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    transactionError:
      description: "Validation error response; includes special handling for credit\
        \ card\ntransaction errors. Check the `info.errors` property in the response\n\
        for more details."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/TransactionError"
    unauthorizedError:
      description: "The provided access credentials are invalid."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    validationError:
      description: "Validation error response. Check the `info.errors` property in\
        \ the\nresponse for more details."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorValidation"
  requestBodies:
    CoverPhoto:
      description: "The cover photo."
      required: true
      content:
        application/vnd.shootproof+json:
          schema:
            $ref: "#/components/schemas/CoverPhoto"
        multipart/mixed:
          schema:
            $ref: "#/components/schemas/CoverPhoto"
          example: "--SP_BOUNDARY\nContent-Type: application/vnd.shootproof+json\n\
            \n{\n    \"focalPointPercentages\": {\n        \"x\": 10,\n        \"\
            y\": 10\n    }\n}\n\n--SP_BOUNDARY\nContent-Disposition: attachment; filename=cover.jpg\n\
            Content-Type: image/jpeg\n\n[binary data]\n\n--SP_BOUNDARY--"
    DigitalRule:
      description: "The digital rule."
      required: true
      content:
        application/vnd.shootproof+json:
          schema:
            $ref: "#/components/schemas/DigitalRule"
    PriceSheet:
      description: "The price sheet."
      required: true
      content:
        application/vnd.shootproof+json:
          schema:
            $ref: "#/components/schemas/PriceSheet"
    ZipBundleInPost:
      description: "The zip bundle."
      required: true
      content:
        application/vnd.shootproof+json:
          schema:
            $ref: "#/components/schemas/ZipBundle"
paths:
  /:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Service Description"
      summary: "Get the Studio API service description"
      description: "For more information, check out our\n[service description guide](https://developer.shootproof.com/guide/service-description/)."
      operationId: "readServiceDescription"
      responses:
        "200":
          description: "The service description."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ServiceDescription"
              example:
                contentType:
                - "application/vnd.shootproof+json"
                links:
                  brand:
                    href: "https://api.shootproof.com/studio/brand{/id}"
                    templated: true
                  email-template-type:
                    href: "https://api.shootproof.com/studio/email/template-type{/id}{?resourceType,resourceId}"
                    templated: true
                  language:
                    href: "https://api.shootproof.com/studio/language"
                  me:
                    href: "https://api.shootproof.com/studio/me"
                  playlist:
                    href: "https://api.shootproof.com/studio/playlist{/id}"
                    templated: true
                  price-sheet:
                    href: "https://api.shootproof.com/studio/price-sheet{/id}"
                    templated: true
                  self:
                    href: "https://api.shootproof.com/studio/"
                  signature:
                    href: "https://api.shootproof.com/studio/signature{/id}"
                    templated: true
                  song:
                    href: "https://api.shootproof.com/studio/song"
                  studio-music-plan:
                    href: "https://api.shootproof.com/studio/plan/music"
                name: "ShootProof Studio API"
                time: "2018-11-18T18:28:38+00:00"
                type: "service-description"
        default:
          $ref: "#/components/responses/defaultError"
  /brand:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Brands"
      summary: "List all of a studio’s brands"
      operationId: "listResourceBrand"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      responses:
        "200":
          description: "Brand list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/BrandCollection"
  /brand/{brandId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Brands"
      summary: "Get a brand"
      operationId: "readResourceBrand"
      responses:
        "200":
          description: "A brand."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Brand"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Brands"
      summary: "Partially update a brand"
      operationId: "patchResourceBrand"
      responses:
        "200":
          description: "The updated brand."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Brand"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              title: "Brand"
              type: "object"
              properties:
                taxIdentifier:
                  description: "The tax ID defined for this brand."
                  nullable: true
                  type: "string"
                taxMethod:
                  description: "The tax method for this brand."
                  type: "string"
                  enum:
                  - "exclusive"
                  - "inclusive"
                automationSendHour:
                  description: "The hour during which email automations for this brand\
                    \ will be sent, relative to the brand's time zone."
                  type: "integer"
                  minimum: 0
                  maximum: 23
        description: "The brand to update. Only provide those properties that need\
          \ updating."
        required: true
  /brand/{brandId}/brand-theme:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Brands"
      summary: "List all of a brand’s themes"
      operationId: "listResourceBrandTheme"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      responses:
        "200":
          description: "Brand themes list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/BrandThemeCollection"
  /brand/{brandId}/brand-theme/{brandThemeId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/brandThemeId"
    get:
      tags:
      - "Brands"
      summary: "Get a brand theme"
      operationId: "readResourceBrandTheme"
      responses:
        "200":
          description: "A brand theme."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/BrandTheme"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Brands"
      summary: "Update a brand theme"
      operationId: "updateResourceBrandTheme"
      responses:
        "200":
          description: "The updated brand theme."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/BrandTheme"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        description: "The attachment parts of the `multipart/mixed` request MUST be\
          \ named\n`event-brand-logo` and `email-brand-logo`. Other attachment names\n\
          will not be accepted."
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BrandTheme"
          multipart/mixed:
            schema:
              $ref: "#/components/schemas/BrandTheme"
            example: "--SP_BOUNDARY\nContent-Type: application/vnd.shootproof+json\n\
              \n{\n    \"id\": 12345,\n    \"type\": \"brand-theme\",\n    \"name\"\
              : \"Test\",\n    \"primaryColor\": \"4fc12a\",\n    \"secondaryColor\"\
              : \"8a3b52\",\n    \"colorScheme\": \"light\",\n    \"fontSet\": \"\
              brandon\"\n}\n\n--SP_BOUNDARY\nContent-Disposition: attachment; name=event-brand-logo;\
              \ filename=image.jpg\nContent-Type: image/jpeg\n\n[binary data]\n\n\
              --SP_BOUNDARY\nContent-Disposition: attachment; name=email-brand-logo;\
              \ filename=image2.jpg\nContent-Type: image/jpeg\n\n[binary data]\n\n\
              --SP_BOUNDARY--"
  /brand/{brandId}/contact:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contacts"
      summary: "List a brand’s contacts"
      operationId: "listResourceContact"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - $ref: "#/components/parameters/filterBrandId"
      - $ref: "#/components/parameters/filterEventId"
      - name: "sortBy"
        in: "query"
        description: "Sort items in the collection by the given property."
        schema:
          type: "string"
          default: "created"
      - name: "filterAllBrands"
        in: "query"
        description: "Return all contacts across all brands for the studio."
        schema:
          type: "boolean"
      - name: "filterTag"
        description: "Filter contacts by those having all of the given tags."
        in: "query"
        style: "form"
        schema:
          type: "array"
          items:
            type: "string"
          maxLength: 50
      - name: "searchContactInfo"
        in: "query"
        description: "Search contacts by name or email address, with partial matching."
        schema:
          type: "string"
          maxLength: 100
      - name: "searchEmail"
        in: "query"
        description: "Search contacts by email address, with exact matching."
        schema:
          type: "string"
          format: "email"
          maxLength: 100
      - name: "Accept"
        in: "header"
        description: "You may specify an `Accept` header to change the type of response,\n\
          using content negotiation."
        schema:
          type: "string"
          enum:
          - "application/vnd.shootproof+json"
          - "text/csv"
      responses:
        "200":
          description: "A collection of brand contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContactCollection"
            text/csv:
              schema:
                type: "string"
                title: "Comma-separated values"
              example: "\"Contact ID\",Brand,\"First Name\",\"Last Name\",Name,Email,Phone,Business,\"\
                Contact Third Party ID\",Birthday,Tags,Created,\"Address 1\",\"Address\
                \ 2\",City,State,ZIP/postal,Country,\"Referred By\",\"Referred Contacts\"\
                ,Galleries\n\"0cc2ff9f-7c7a-418f-bf1b-bfbfde277a0e\",\"Jones Photography\"\
                ,Jane,Doe,\"Jane Doe\",jdoe@example.com,123-456-7890,\"Acme, Inc.\"\
                ,\"AwABAgkOAQIDCgIABA8MCw\",1971-06-08,\"Customer, Vendor\",2016-06-13T21:51:07+00:00,\"\
                123 Any St\",\"Suite 102\",Anytown,GA,30039,US,\"John Doe\",\"Helen\
                \ Doe, Jake Smith\",\"Doe Wedding, Jim Doe Graduation\""
    post:
      tags:
      - "Contacts"
      summary: "Create a contact"
      operationId: "createResourceContact"
      responses:
        "201":
          description: "The new contact."
          headers:
            Location:
              description: "The URL new contact."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Contact"
  /brand/{brandId}/contact/referee:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contacts"
      deprecated: true
      summary: "List available contacts that may be selected for referral"
      description: "The response includes a collection of contacts that may be selected\
        \ as\ncontacts referred by the `forContactId` contact. Any contacts already\n\
        referred by the `forContactId` contact will not appear in this collection.\n\
        Additionally, if the `forContactId` parameter is not provided, then all\n\
        contacts available to the brand are returned.\n\nThis operation is primarily\
        \ useful to provide autocompletion functionality.\n\n*This operation is deprecated.\
        \ In the future, this functionality will be\nmoved to the standard, paginated\
        \ [contact list\noperation](#operation/listResourceContact).*"
      operationId: "listResourceContactReferee"
      parameters:
      - name: "searchContactInfo"
        in: "query"
        description: "The contact name or email to search for."
        schema:
          type: "string"
      - name: "forContactId"
        in: "query"
        description: "Filter contacts available for referral by this contact identifier.\
          \ Any\ncontacts already referred by this contact will not appear in the\n\
          response."
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "A collection of contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                type: "object"
                properties:
                  contacts:
                    title: "Contact"
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ContactMinimal"
                    deprecated: true
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/contact/referred-by:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contacts"
      deprecated: true
      summary: "Get all contacts for the brand (referral autocompletion)"
      description: "This response is a non-paginated list of all contacts for the\
        \ brand,\noptionally filtered by `searchContactInfo`. If `forContactId` is\
        \ provided,\nthe contact identified by `forContactId` will be omitted from\
        \ the response.\n\nThis operation is primarily useful to provide autocompletion\
        \ functionality.\n\n*This operation is deprecated in favor of using the standard,\
        \ paginated\n[contact list operation](#operation/listResourceContact). All\
        \ functionality\nprovided by this endpoint is already provided by the contact\
        \ list endpoint.*"
      operationId: "listResourceContactReferredBy"
      parameters:
      - name: "searchContactInfo"
        in: "query"
        description: "The contact name or email to search for."
        schema:
          type: "string"
      - name: "forContactId"
        in: "query"
        description: "Omit from the response the contact identified by this parameter."
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "A collection of contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                type: "object"
                properties:
                  contacts:
                    title: "Contact"
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ContactMinimal"
                    deprecated: true
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/contact/tag:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contacts"
      summary: "List tags that may be applied to contacts"
      operationId: "listResourceContactTag"
      parameters:
      - name: "searchTagName"
        in: "query"
        description: "Search contact tags, with partial matching."
        schema:
          type: "string"
      responses:
        "200":
          description: "A list of tags for contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - title: "Collection of Contact Tags"
                  properties:
                    type:
                      enum:
                      - "contact-tag-collection"
                    items:
                      title: "Contact Tag"
                      type: "array"
                      items:
                        title: "Contact Tag"
                        type: "object"
                        properties:
                          type:
                            allOf:
                            - $ref: "#/components/schemas/Type"
                            - enum:
                              - "contact-tag"
                          name:
                            description: "The contact tag name."
                            type: "string"
                            example: "Event Coordinator"
                          isInUse:
                            description: "Whether this tag is currently applied to\
                              \ any contacts."
                            type: "boolean"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/contact/{contactId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contactId"
    get:
      tags:
      - "Contacts"
      summary: "Get a contact"
      operationId: "readResourceContact"
      responses:
        "200":
          description: "A contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contact"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Contacts"
      summary: "Update a contact"
      operationId: "updateResourceContact"
      responses:
        "200":
          description: "The updated contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        description: "A contact."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Contact"
    delete:
      tags:
      - "Contacts"
      summary: "Delete a contact"
      operationId: "deleteResourceContact"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        "409":
          description: "If the the contact is linked to an invoice or contract, then\
            \ we will\nrespond with a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/contact/{contactId}/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contactId"
    post:
      tags:
      - "Contacts"
      - "Email"
      summary: "Send an email message to a contact"
      operationId: "createResourceContactEmail"
      responses:
        "202":
          description: "On success, we respond with the contact to whom the email\
            \ message was\nsent."
          headers:
            Content-Location:
              description: "The URL to the contact that is located in the response\
                \ body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              allOf:
              - properties:
                  buttonText:
                    readOnly: true
                  recipientEmails:
                    readOnly: true
              - $ref: "#/components/schemas/StudioToClientEmail"
        required: true
  /brand/{brandId}/contact/{contactId}/recent-activity:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contactId"
    get:
      tags:
      - "Contacts"
      summary: "List recent activity for a contact"
      operationId: "listResourceContactRecentActivity"
      responses:
        "200":
          description: "A list of recent activity for a contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContactRecentActivityCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/contract:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contracts"
      summary: "List a brand’s contracts"
      operationId: "listResourceContract"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "contactName"
          - "secondSignerName"
          - "created"
          - "customInvoiceId"
          - "invoiceStatus"
          default: "customInvoiceId"
      - name: "searchContractName"
        in: "query"
        description: "Contract name by which to filter results."
        schema:
          type: "string"
      - name: "filterContactId"
        in: "query"
        description: "The contract contact ID by which to filter results."
        schema:
          $ref: "#/components/schemas/Id"
      - name: "searchContactInfo"
        in: "query"
        description: "Customer name or email address by which to filter results."
        schema:
          type: "string"
      - name: "filterStatus"
        in: "query"
        description: "The contract status by which to filter results."
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Contract/properties/contractStatus"
        style: "form"
        explode: false
      - name: "filterExpirationDateStart"
        in: "query"
        description: "The contract expiration start date by which to filter results.\
          \  If\nprovided, only contracts that expire on or after midnight UTC of\n\
          this date will be returned."
        schema:
          type: "string"
          format: "date"
      - name: "filterExpirationDateEnd"
        in: "query"
        description: "The contract expiration end date by which to filter results.\
          \  If\nprovided, only contracts that expire before midnight UTC of this\n\
          date will be returned."
        schema:
          type: "string"
          format: "date"
      - name: "filterExcludeLinkedToInvoice"
        in: "query"
        description: "Indicates that contracts linked to invoice(s) should be excluded\n\
          from the results."
        schema:
          type: "boolean"
      responses:
        "200":
          description: "A collection of contracts."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractCollection"
    post:
      tags:
      - "Contracts"
      summary: "Create a contract"
      operationId: "createResourceContract"
      responses:
        "201":
          description: "The new contract."
          headers:
            Location:
              description: "The URL to the new contract."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Contract"
        description: "The contract to create."
        required: true
  /brand/{brandId}/contract/template:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Contracts"
      summary: "List a brand’s contract templates"
      operationId: "listResourceContractTemplate"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "created"
      - name: "searchContractTemplateName"
        in: "query"
        description: "Contract template name by which to filter results."
        schema:
          type: "string"
      - name: "filterCreatedStart"
        in: "query"
        description: "Filter contract templates by templates created after\n`filterCreatedStart`."
        schema:
          type: "string"
          format: "date"
      - name: "filterExpirationDateEnd"
        in: "query"
        description: "Filter contract templates by templates created before\n`filterCreatedEnd`."
        schema:
          type: "string"
          format: "date"
      responses:
        "200":
          description: "A collection of contract templates."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractTemplateCollection"
    post:
      tags:
      - "Contracts"
      summary: "Create a contract template"
      operationId: "createResourceContractTemplate"
      responses:
        "201":
          description: "The new contract template."
          headers:
            Location:
              description: "The URL to the contract template that is located in the\
                \ response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/ContractTemplate"
        description: "The contract template to create."
        required: true
  /brand/{brandId}/contract/template/{contractTemplateId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contractTemplateId"
    get:
      tags:
      - "Contracts"
      summary: "Get a contract template"
      operationId: "readResourceContractTemplate"
      responses:
        "200":
          description: "A contract template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractTemplate"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Contracts"
      summary: "Update a contract template"
      operationId: "updateResourceContractTemplate"
      responses:
        "200":
          description: "The updated contract template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/ContractTemplate"
        description: "The updated contract template"
        required: true
    patch:
      tags:
      - "Contracts"
      summary: "Partially update a contract template"
      description: "Only provide those properties that you wish to update. All other\
        \ properties\nwill remain unchanged."
      operationId: "patchResourceContractTemplate"
      responses:
        "200":
          description: "The updated contract template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ContractTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/ContractTemplate"
        required: true
    delete:
      tags:
      - "Contracts"
      summary: "Delete a contract template"
      operationId: "deleteResourceContractTemplate"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
  /brand/{brandId}/contract/{contractId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contractId"
    get:
      tags:
      - "Contracts"
      summary: "Get a contract"
      operationId: "readResourceContract"
      responses:
        "200":
          description: "A contract"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Contracts"
      summary: "Update a contract"
      operationId: "updateResourceContract"
      responses:
        "200":
          description: "The updated contract."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Contract"
        description: "The contract object to update."
        required: true
    patch:
      tags:
      - "Contracts"
      summary: "Partially update a contract"
      description: "Only provide those properties that you wish to update. All other\
        \ properties\nwill remain unchanged."
      operationId: "patchResourceContract"
      responses:
        "200":
          description: "The updated contract."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Contract"
        description: "The contract object to update. Only provide those properties\
          \ that need\nupdating."
        required: true
    delete:
      tags:
      - "Contracts"
      summary: "Delete a contract"
      operationId: "deleteResourceContract"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
  /brand/{brandId}/contract/{contractId}/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contractId"
    post:
      tags:
      - "Contracts"
      - "Email"
      summary: "Send an email message to a contract’s contacts"
      operationId: "createResourceContractEmail"
      responses:
        "202":
          description: "On success, we respond with the contract for which the email\
            \ message\nwas sent."
          headers:
            Content-Location:
              description: "The URL to the contract that is located in the response\
                \ body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/ContractEmail"
        description: "The contract email object used to send an email message."
        required: true
  /brand/{brandId}/contract/{contractId}/invoice/{invoiceId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contractId"
    - $ref: "#/components/parameters/invoiceId"
    put:
      tags:
      - "Contracts"
      summary: "Attach an invoice to a contract"
      operationId: "updateResourceContractInvoice"
      description: "Associate the invoice identified by `invoiceId` in the path to\
        \ the contract\nidentified by `contractId`. This request does not require\
        \ any body\nparameters."
      responses:
        "200":
          description: "The contract to which the invoice was added."
          headers:
            Content-Location:
              description: "The URL to the contract that is located in the response\
                \ body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "404":
          $ref: "#/components/responses/notFoundError"
        "409":
          description: "If the contract is already linked to a different invoice,\
            \ we respond\nwith a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
      - "Contracts"
      summary: "Remove an invoice from a contract"
      operationId: "deleteResourceContractInvoice"
      responses:
        "200":
          description: "The contract from which the invoice was removed."
          headers:
            Content-Location:
              description: "The URL to the contract that is located in the response\
                \ body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
  /brand/{brandId}/contract/{contractId}/signature/{signatureId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/contractId"
    - $ref: "#/components/parameters/signatureId"
    put:
      tags:
      - "Contracts"
      summary: "Countersign a contract"
      description: "Apply the signature identified by `signatureId` in the path to\
        \ the contract\nidentified by `contractId`. This request does not require\
        \ any body\nparameters.\n\nSee \"[Get the authenticated user](https://developer.shootproof.com/reference/studio/authenticated-user/#operation/readResourceMe)\"\
        \nfor information on retrieving the authenticated user's signature."
      operationId: "updateResourceContractSignature"
      responses:
        "200":
          description: "The contract to which the signature was added."
          headers:
            Content-Location:
              description: "The URL to the contract that is located in the response\
                \ body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Contract"
        "409":
          $ref: "#/components/responses/conflictError"
  /brand/{brandId}/email/automation-group:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Email"
      summary: "List email automation groups"
      operationId: "listResourceEmailAutomationGroup"
      parameters:
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "created"
          default: "created"
      - name: "filterCuratedUserAutomations"
        in: "query"
        description: "Filter curated email automation groups created by ShootProof\
          \ and cloned by users"
        schema:
          type: "boolean"
      responses:
        "200":
          description: "Email automation groups."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailAutomationGroupCollection"
    post:
      tags:
      - "Email"
      summary: "Create an email automation group"
      operationId: "createResourceEmailAutomationGroup"
      requestBody:
        description: "The email automation group to create."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EmailAutomationGroup"
      responses:
        "201":
          description: "The new email automation group."
          headers:
            Location:
              description: "The URL to the new email automation group."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailAutomationGroup"
  /brand/{brandId}/email/automation-group/{emailAutomationGroupId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/emailAutomationGroupId"
    get:
      tags:
      - "Email"
      summary: "Get an email automation group"
      operationId: "readResourceEmailAutomationGroup"
      responses:
        "200":
          description: "Email automation group"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailAutomationGroup"
        "403":
          $ref: "#/components/responses/forbiddenError"
        "404":
          $ref: "#/components/responses/notFoundError"
    put:
      tags:
      - "Email"
      summary: "Update an email automation group"
      operationId: "updateResourceEmailAutomationGroup"
      requestBody:
        description: "The email automation group that will update the existing one."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EmailAutomationGroup"
      responses:
        "200":
          description: "The updated email automation group."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailAutomationGroup"
        "400":
          $ref: "#/components/responses/validationError"
        "403":
          $ref: "#/components/responses/forbiddenError"
        "404":
          $ref: "#/components/responses/notFoundError"
    delete:
      tags:
      - "Email"
      summary: "Delete an email automation group"
      operationId: "deleteResourceEmailAutomationGroup"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        "403":
          $ref: "#/components/responses/forbiddenError"
        "404":
          $ref: "#/components/responses/notFoundError"
  /brand/{brandId}/email/template:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Email"
      summary: "List a brand’s email templates"
      operationId: "listResourceEmailTemplate"
      parameters:
      - name: "filterForEmailAutomation"
        in: "query"
        description: "Filter email templates that can be used to create an email automation."
        schema:
          type: "boolean"
          default: false
      responses:
        "200":
          description: "Email templates"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailTemplateCollection"
  /brand/{brandId}/email/template/{emailTemplateId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - name: "emailTemplateId"
      in: "path"
      description: "An email template identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    get:
      tags:
      - "Email"
      summary: "Get an email template"
      description: "If the `resourceType` and `resourceId` query string parameters\
        \ are present\nin the request, the variables within the email template properties\
        \ will\nbe replaced with appropriate values for the specified resource. This\
        \ is\nprovided for convenience to allow the studio user to view an email template\n\
        as it might appear when sent to their clients."
      operationId: "readResourceEmailTemplate"
      parameters:
      - name: "resourceType"
        in: "query"
        description: "Identifies the resource type for the given `resourceId`. If\
          \ no\n`resourceId` is provided, then variables will appear in the properties\n\
          unchanged.\n\nThe `resourceType` must be valid for the template type requested."
        schema:
          type: "string"
          enum:
          - "contract"
          - "event"
          - "event-album"
          - "invoice"
          - "mobile-app"
          - "order"
      - name: "resourceId"
        in: "query"
        description: "The identifier of the `resourceType` that you wish to use when\n\
          replacing variables in email template properties. If no `resourceType`\n\
          is provided, then variables will appear in the properties unchanged."
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "An email template"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Events"
      summary: "List a brand’s events"
      operationId: "listResourceEvent"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "eventStatus"
          - "contactName"
          - "photosCount"
          - "eventDate"
          - "releaseDate"
          - "expirationDate"
          - "created"
          default: "eventDate"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - name: "searchName"
        in: "query"
        description: "Event name by which to filter results."
        schema:
          type: "string"
      - name: "filterContactId"
        in: "query"
        description: "Contact identifier by which to filter results."
        schema:
          type: "number"
      - name: "filterEventAccessLevel"
        in: "query"
        description: "Access level by which to filter results."
        style: "form"
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
            enum:
            - "public-password"
            - "public-no-password"
            - "private-password"
            - "private-no-password"
          uniqueItems: true
      - name: "filterEventCategoryId"
        in: "query"
        description: "Event category identifier by which to filter results."
        style: "form"
        schema:
          type: "array"
          items:
            type: "number"
          uniqueItems: true
      - name: "filterEventDateYear"
        in: "query"
        description: "Year by which to filter results based on event date."
        schema:
          type: "number"
      - name: "searchContactInfo"
        in: "query"
        description: "Customer name or email address by which to filter results."
        schema:
          type: "string"
      - name: "filterEventStatus"
        in: "query"
        description: "Event status by which to filter results."
        style: "form"
        explode: false
        schema:
          type: "array"
          items:
            type: "string"
            enum:
            - "active"
            - "inactive"
            - "archived"
          uniqueItems: true
      - name: "filterPreRegistration"
        in: "query"
        description: "If provided and truthy, returns only events in pre-registration\n\
          mode."
        schema:
          type: "boolean"
      - $ref: "#/components/parameters/preferHeader"
      - $ref: "#/components/parameters/preferParameter"
      responses:
        "200":
          description: "A list of events."
          headers:
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create an event"
      operationId: "createResourceEvent"
      responses:
        "201":
          description: "The new event."
          headers:
            Location:
              description: "The URL to the new event."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Event"
        description: "The event object to create."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Update a batch of events"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can update multiple events at once."
      operationId: "batchUpdateResourceEvent"
      responses:
        "200":
          description: "A list of events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCollection"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventCollectionInPatch"
        description: "The list of events to update."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete a batch of events"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can delete multiple events at once."
      operationId: "batchDeleteResourceEvent"
      responses:
        "200":
          description: "A list of events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCollection"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of events to delete."
        required: true
  /brand/{brandId}/event-category:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Events"
      summary: "List a brand’s event categories"
      operationId: "listEventCategories"
      responses:
        "200":
          description: "A list of event categories."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCategoryCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event-category/{eventCategoryId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventCategoryId"
    get:
      tags:
      - "Events"
      summary: "Get an event category"
      operationId: "readEventCategory"
      responses:
        "200":
          description: "An event category."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCategory"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event-contact-defaults:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Events"
      summary: "List default settings for event contacts"
      operationId: "listEventContactDefaults"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      responses:
        "200":
          description: "Event contact default settings list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContactDefaultsCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create a set of default settings for event contacts"
      operationId: "createEventContactDefaults"
      responses:
        "201":
          description: "The new set of default settings for event contacts."
          headers:
            Location:
              description: "The URL to the new set of default settings for event contacts."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContactDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventContactDefaults"
        description: "The set of default settings to create for event contacts."
        required: true
  /brand/{brandId}/event-contact-defaults/{eventContactDefaultsId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventContactDefaultsId"
    get:
      tags:
      - "Events"
      summary: "Get a set of default settings for event contacts"
      operationId: "readEventContactDefaults"
      responses:
        "200":
          description: "A set of default settings for event contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContactDefaults"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update a set of default settings for event contacts"
      operationId: "updateEventContactDefaults"
      responses:
        "200":
          description: "The updated set of default settings for event contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContactDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventContactDefaults"
        description: "The set of default settings to update for event contacts."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Partially update a set of default settings for event contacts"
      operationId: "partialUpdateEventContactDefaults"
      responses:
        "200":
          description: "The updated set of default settings for event contacts."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContactDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventContactDefaults"
        description: "The set of default settings to update for event contacts.\n\
          Only provide those properties that need updating."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete a set of default settings for event contacts"
      operationId: "deleteEventContactDefaults"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event-defaults:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Events"
      summary: "List default settings for events"
      operationId: "listEventDefaults"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "filterDefault"
        in: "query"
        description: "If provided and truthy, returns only event defaults flagged\
          \ as\n`isDefault`."
        schema:
          type: "boolean"
      responses:
        "200":
          description: "Event default settings list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventDefaultsCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create a set of default settings for events"
      operationId: "createEventDefaults"
      responses:
        "201":
          description: "The new set of default settings for events."
          headers:
            Location:
              description: "The URL to the new set of default settings for events."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventDefaults"
        description: "The set of default settings to create for events."
        required: true
  /brand/{brandId}/event-defaults/{eventDefaultsId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventDefaultsId"
    get:
      tags:
      - "Events"
      summary: "Get a set of default settings for events"
      operationId: "readEventDefaults"
      responses:
        "200":
          description: "A set of default settings for events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventDefaults"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update a set of default settings for events"
      operationId: "updateEventDefaults"
      responses:
        "200":
          description: "The updated set of default settings for events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventDefaults"
        description: "The set of default settings to update for events."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Partially update a set of default settings for events"
      operationId: "partialUpdateEventDefaults"
      responses:
        "200":
          description: "The updated set of default settings for events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventDefaults"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventDefaults"
        description: "The set of default settings to update for events.\nOnly provide\
          \ those properties that need updating."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete a set of default settings for events"
      operationId: "deleteEventDefaults"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event-defaults/{eventDefaultsId}/digital-rule:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventDefaultsId"
    get:
      tags:
      - "Events"
      summary: "List the digital rules for a set of default settings for events"
      operationId: "listEventDefaultsDigitalRules"
      responses:
        "200":
          description: "A list of digital rules for a set of default settings for\
            \ events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRuleCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create a digital rule for a set of default settings for events"
      operationId: "createEventDefaultsDigitalRule"
      responses:
        "201":
          description: "The new digital rule for the set of default settings for events."
          headers:
            Location:
              description: "The URL to the new digital rule."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/DigitalRule"
        description: "The digital rule to create for a set of default settings for\
          \ events."
        required: true
  /brand/{brandId}/event-defaults/{eventDefaultsId}/digital-rule/{digitalRuleId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventDefaultsId"
    - $ref: "#/components/parameters/digitalRuleId"
    get:
      tags:
      - "Events"
      summary: "Get a digital rule for a set of default settings for events"
      operationId: "readEventDefaultDigitalRule"
      responses:
        "200":
          description: "A digital rule for a set of default settings for events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update a digital rule for a set of default settings for events"
      operationId: "updateEventDefaultDigitalRule"
      responses:
        "200":
          description: "The updated digital rule for the set of default settings for\
            \ events."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
    delete:
      tags:
      - "Events"
      summary: "Delete a digital rule for a set of default settings for events"
      operationId: "deleteEventDefaultDigitalRule"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Get an event"
      operationId: "readResourceEvent"
      responses:
        "200":
          description: "An event"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Event"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update an event"
      operationId: "updateResourceEvent"
      responses:
        "200":
          description: "The updated event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Event"
        description: "The event to update."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Partially update an event"
      operationId: "patchResourceEvent"
      responses:
        "200":
          description: "The updated event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Event"
        description: "The event to update. Only provide those properties that need\n\
          updating."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete an event"
      operationId: "deleteResourceEvent"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/album:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "List an event’s albums"
      description: "*Please note that all albums are returned regardless of the pagination\n\
        parameters included in the request. This is subject to change, so\nplease\
        \ ensure that your app follows the pagination model of our\n[collections](https://developer.shootproof.com/guide/collections/).*"
      operationId: "listResourceEventAlbum"
      parameters:
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - $ref: "#/components/parameters/preferHeader"
      - $ref: "#/components/parameters/preferParameter"
      responses:
        "200":
          description: "A list of albums for an event."
          headers:
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventAlbumCollection"
                - $ref: "#/components/schemas/EventAlbumCollectionMinimal"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create a new album in an event"
      operationId: "createResourceEventAlbum"
      responses:
        "201":
          description: "The new album."
          headers:
            Location:
              description: "The URL to the new album."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbum"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventAlbum"
        description: "The album to create."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Update a batch of albums in an event"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can update multiple albums at once."
      operationId: "batchUpdateResourceEventAlbum"
      responses:
        "200":
          description: "A list of albums for an event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbumCollection"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventAlbumCollectionInPatch"
        description: "The list of albums to update."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete a batch of event albums."
      operationId: "batchDeleteResourceEventAlbum"
      responses:
        "200":
          description: "A list of albums for an event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbumCollection"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of albums to delete."
        required: true
  /brand/{brandId}/event/{eventId}/album/passwords:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/accept"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Lists all album passwords for the event."
      description: "Returns a list of all album passwords for the event.\n\nAdditionally,\
        \ the response contains a `Link` header with an `alternate`\nrelationship,\
        \ designating a URL from which a CSV file of this data may\nbe downloaded.\
        \ Alternately, requesting this endpoint using an `Accept`\nheader of `text/csv`\
        \ will cause this endpoint to respond with a redirect\nresponse to the location\
        \ of the CSV download.\n\nIn addition to the `event-album-passwords` link\
        \ relationship provided on\nthe event resource, there is also an `event-album-passwords-csv`\
        \ link\nrelationship, providing a direct link to the CSV download of album\n\
        passwords."
      operationId: "listResourceEventAlbumPasswords"
      responses:
        "200":
          description: "Event album passwords response."
          headers:
            Link:
              description: "Link relationships related to event album passwords. In\n\
                particular, an `alternate` relationship is provided for a\n`text/csv`\
                \ representation."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                type: "object"
                properties:
                  type:
                    description: "The type of object represented."
                    type: "string"
                    enum:
                    - "event-album-passwords"
                  links:
                    $ref: "#/components/schemas/Links"
                  items:
                    description: "An array of passwords for event albums."
                    type: "array"
                    items:
                      description: "An event album password"
                      type: "object"
                      properties:
                        eventName:
                          description: "The name of the event to which this album\
                            \ belongs."
                          type: "string"
                        albumName:
                          description: "The name of the album to which this password\n\
                            applies."
                          type: "string"
                        albumPassword:
                          description: "A password that may be used to access the\
                            \ named\nalbum."
                          type: "string"
                    example:
                    - eventName: "Jones' Wedding"
                      albumName: "Bride & Groom"
                      albumPassword: "abc1234"
                    - eventName: "Jones' Wedding"
                      albumName: "Father of the Bride"
                      albumPassword: "xyz5678"
                    - eventName: "Jones' Wedding"
                      albumName: "Processional"
                      albumPassword: "mno9876"
            text/csv:
              schema:
                title: "Comma-separated values"
                type: "string"
              example: "eventName,albumName,albumPassword\n\"Jones' Wedding\",\"Bride\
                \ & Groom\",abc1234\n\"Jones' Wedding\",\"Father of the Bride\",xyz5678\n\
                \"Jones' Wedding\",Processional,mno9876"
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    get:
      tags:
      - "Events"
      summary: "Get an album for an event"
      operationId: "readResourceEventAlbum"
      responses:
        "200":
          description: "An album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbum"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update an album for an event"
      operationId: "updateResourceEventAlbum"
      responses:
        "200":
          description: "The updated album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbum"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventAlbum"
        description: "The album object to update."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Partially update an album for an event"
      operationId: "patchResourceEventAlbum"
      responses:
        "200":
          description: "The updated album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbum"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventAlbum"
        description: "The album object to update. Only provide those properties that\n\
          need updating."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete an album from an event"
      operationId: "deleteResourceEventAlbum"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/children:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    get:
      tags:
      - "Events"
      summary: "List an album’s children"
      description: "An album’s children may include albums or photos. Check the `.items[n].type`\n\
        property to see what kind of entity you're dealing with. It may be an\n`event-album`\
        \ or an `event-album-photo`. If it is an `event-album`, you may\nrequest its\
        \ `children` link relation to enumerate over its sub-albums or\nphotos.\n\n\
        To get a display URL for each photo in the collection, see the `displayUrl`\n\
        property of each `event-album-photo` in the collection.\n\nTo get a URL to\
        \ download the original image of each photo in the\ncollection, see the `event-photo-original`\
        \ link relation of each\n`event-album-photo` in the collection."
      operationId: "listResourceEventAlbumChildren"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - $ref: "#/components/parameters/preferHeader"
      - $ref: "#/components/parameters/preferParameter"
      - $ref: "#/components/parameters/rangeHeader"
      - $ref: "#/components/parameters/rangeParameter"
      responses:
        "200":
          description: "A list of children for an album."
          headers:
            Accept-Ranges:
              description: "Indicates that this resource can respond to range requests\
                \ for\nthe given types of ranges."
              schema:
                type: "string"
                enum:
                - "items"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventAlbumChildrenCollection"
                - $ref: "#/components/schemas/EventAlbumChildrenCollectionMinimal"
        "206":
          description: "A list of children for the requested range."
          headers:
            Content-Range:
              description: "Indicates the ranges included in this partial response."
              schema:
                type: "string"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventAlbumChildrenCollection"
                - $ref: "#/components/schemas/EventAlbumChildrenCollectionMinimal"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Events"
      summary: "Update a batch of children for an album"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can update multiple children for an album at once."
      operationId: "batchUpdateResourceEventAlbumChildren"
      responses:
        "200":
          description: "A list of children for an album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbumChildrenCollection"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventAlbumChildrenCollectionInPatch"
        description: "The list of album children to update."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Delete a batch of children for an album"
      description: "If the children are `event-album` resources, the albums and their\n\
        sub-albums will be deleted. If the children are `event-album-photo`\nresources,\
        \ the photos will be removed from the album and any of its\nsub-albums that\
        \ also contain the photos.\n\nThis does not delete photos from an event; it\
        \ only removes them from an\nalbum."
      operationId: "batchDeleteResourceEventAlbumChildren"
      responses:
        "200":
          description: "A list of children for an album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventAlbumChildrenCollection"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of album children to delete."
        required: true
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/cover-photo:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    get:
      tags:
      - "Events"
      summary: "Get the cover photo for an album"
      operationId: "readResourceEventAlbumCoverPhoto"
      responses:
        "200":
          description: "An album cover photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CoverPhoto"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Add or update the cover photo for an album"
      description: "You may add a cover photo to an album either by specifying the\
        \ `photoId`\nof an existing photo or uploading a new photo. In either case,\
        \ you must\nspecify the `focalPointPercentages` for the photo, as defined\
        \ in the\nrequest body.\n\nWhen adding a cover photo using a `photoId`, make\
        \ the request using the\nstandard `application/vnd.shootproof+json` content\
        \ type.\n\nWhen uploading a new cover photo, you must use a content type of\n\
        `multipart/mixed`, specifying a `boundary`—which may be any consistent\nname—\
        and including exactly two parts in the request. The order of parts\ndoes not\
        \ matter. One part must be the JSON object represented as\n`application/vnd.shootproof+json`.\
        \ The other part must be the binary\nimage. The image part must have a `Content-Disposition`\
        \ header,\nspecifying the `filename`, as well as a `Content-Type` header.\n\
        \nFor example:\n\n```http\nPUT /brand/1000/event/1234/album/2345/cover-photo\
        \ HTTP/1.1\nContent-Type: multipart/mixed; charset=utf-8; boundary=ANY_VALUE\n\
        Host: api.shootproof.com\nContent-Length: 406\n\n--ANY_VALUE\nContent-Type:\
        \ application/vnd.shootproof+json\n\n{\n    \"focalPointPercentages\": {\n\
        \        \"x\": 10,\n        \"y\": 10\n    }\n}\n\n--ANY_VALUE\nContent-Disposition:\
        \ attachment; filename=album-cover.png\nContent-Type: image/png\n\n[binary\
        \ data]\n\n--ANY_VALUE--\n```"
      operationId: "updateResourceEventAlbumCoverPhoto"
      responses:
        "200":
          description: "A cover photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CoverPhoto"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        $ref: "#/components/requestBodies/CoverPhoto"
    delete:
      tags:
      - "Events"
      summary: "Delete a cover photo from an album"
      operationId: "deleteResourceEventAlbumCoverPhoto"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/digital-rule:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventAlbumId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "List the digital rules for an album"
      operationId: "listAlbumDigitalRules"
      responses:
        "200":
          description: "A list of digital rules for an album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRuleCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Events"
      summary: "Create a digital rule for an album"
      operationId: "createAlbumDigitalRule"
      responses:
        "201":
          description: "The new digital rule."
          headers:
            Location:
              description: "The URL of the new digital rule."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/digital-rule/{digitalRuleId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventAlbumId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/digitalRuleId"
    get:
      tags:
      - "Events"
      summary: "Get a digital rule for an album"
      operationId: "readEventAlbumDigitalRule"
      responses:
        "200":
          description: "A digital rule for an album."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Update a digital rule for an album"
      operationId: "updateAlbumDigitalRule"
      responses:
        "200":
          description: "The updated digital rule."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
    delete:
      tags:
      - "Events"
      summary: "Delete a digital rule from album"
      operationId: "deleteAlbumDigitalRule"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/photo:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    get:
      tags:
      - "Events"
      summary: "List an album’s photo children"
      description: "This returns a list of all photo children of an album and, optionally,\
        \ its\nsub-albums. Unlike “[List an album’s children](https://developer.shootproof.com/reference/studio/events/#operation/listResourceEventAlbumChildren),”\
        \nthe entity type in the `items` array will always be `event-album-photo`.\n\
        \nTo get a display URL for each photo in the collection, see the `displayUrl`\n\
        property of each `event-album-photo` in the collection.\n\nTo get a URL to\
        \ download the original image of each photo in the\ncollection, see the `event-photo-original`\
        \ link relation of each\n`event-album-photo` in the collection.\n\nOf particular\
        \ importance is the `includeDescendants` parameter that controls\nthe photo\
        \ children behavior. By default, only photos that are direct\nchildren of\
        \ the album requested are included in the list. If\n`includeDescendants` is\
        \ provided and is `true`, all photos for all sub-albums\nof the requested\
        \ album are included."
      operationId: "listResourceEventAlbumPhoto"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - name: "includeDescendants"
        in: "query"
        description: "Whether to include photos from all sub-albums."
        schema:
          type: "string"
          default: "false"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - $ref: "#/components/parameters/preferHeader"
      - $ref: "#/components/parameters/preferParameter"
      - $ref: "#/components/parameters/rangeHeader"
      - $ref: "#/components/parameters/rangeParameter"
      responses:
        "200":
          description: "A list of photos for an album."
          headers:
            Accept-Ranges:
              description: "Indicates that this resource can respond to range requests\
                \ for\nthe given types of ranges."
              schema:
                type: "string"
                enum:
                - "items"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventAlbumChildrenCollection"
                - $ref: "#/components/schemas/EventAlbumChildrenCollectionMinimal"
        "206":
          description: "A list of album photos for the requested range."
          headers:
            Content-Range:
              description: "Indicates the ranges included in this partial response."
              schema:
                type: "string"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventAlbumChildrenCollection"
                - $ref: "#/components/schemas/EventAlbumChildrenCollectionMinimal"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Events"
      summary: "Add a batch of photos to an album"
      operationId: "batchUpdateResourceEventAlbumPhoto"
      responses:
        "204":
          description: "Event photos successfully added to the album."
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of photos to add to the album."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Remove a batch of photos from an album"
      description: "This does not delete photos from an event; it only removes them\
        \ from an\nalbum."
      operationId: "batchDeleteResourceEventAlbumPhoto"
      responses:
        "204":
          description: "The photos were removed from the album."
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of photos to remove from the album."
        required: true
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/photo/{eventPhotoId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    - $ref: "#/components/parameters/eventPhotoId"
    get:
      tags:
      - "Events"
      summary: "Retrieves an event photo on an event album."
      description: "Retrieves an event photo, if it is associated with the event album.\
        \ If\nit is not associated with the album, the request will return a `404\
        \ Not\nFound` response, even if the photo exists in the event."
      operationId: "readResourceEventAlbumEventPhoto"
      responses:
        "200":
          description: "An event photo."
          headers:
            Content-Location:
              description: "The canonical URL of the event photo."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhoto"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Adds an event photo to the album."
      description: "Creates an association between the event photo with the given\
        \ identifier\nand the album."
      operationId: "updateResourceEventAlbumEventPhoto"
      responses:
        "204":
          description: "The association between the event album and the event photo\
            \ was\nsuccessful."
        "403":
          description: "The event, album, or photo is not accessible by the requestor."
        "404":
          description: "The event, album, or photo was not found."
    delete:
      tags:
      - "Events"
      summary: "Removes an event photo from the album."
      description: "Removes the association between the event photo with the given\n\
        identifier and the album."
      operationId: "deleteResourceEventAlbumEventPhoto"
      responses:
        "204":
          description: "The association between the event album and the event photo\
            \ was\nsuccessfully removed."
        "403":
          description: "The event, album, or photo is not accessible by the requestor."
        "404":
          description: "The event, album, or photo was not found."
  /brand/{brandId}/event/{eventId}/album/{eventAlbumId}/zip-bundle:
    parameters:
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventAlbumId"
    post:
      tags:
      - "Events"
      summary: "Create a new zip bundle for an album's photos."
      description: "Generates a new zip bundle for album photos. If the request body\n\
        contains an array of photo IDs belonging to the album, the zip bundle\nwill\
        \ contain only those photos.\n\nIf a zip bundle already exists containing\
        \ the same photos, a new one\nwill not be generated but the existing zip bundle\
        \ will be returned and\nthe appropriate email will be re-sent to the studio\
        \ panel user or client\ngallery visitor.\n"
      operationId: "createResourceEventAlbumZipBundle"
      responses:
        "202":
          description: "The request was valid and accepted and the zip bundle is being\
            \ created.\n"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ZipBundle"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/ZipBundleInPost"
  /brand/{brandId}/event/{eventId}/archive-cost:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Returns archive costs for a single event by ID."
      description: "If event were to be archived, returns information on its expected\n\
        associated costs and storage usage."
      operationId: "readEventArchive"
      responses:
        "200":
          description: "An event's archive costs."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventArchiveCost"
        "409":
          description: "Event is already archived."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/contact/{contactId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/contactId"
    get:
      tags:
      - "Events"
      summary: "Returns an event's contact by contact ID."
      operationId: "readEventContact"
      responses:
        "200":
          description: "An event contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContact"
        "404":
          $ref: "#/components/responses/notFoundError"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Sets the contact for the event and updates their permissions values,\
        \ if\nprovided."
      description: "Any contact values provided in the body are read-only. If provided,\
        \ only\nthe `eventContactPermissions` values will be used to update the\n\
        contact's settings and the event's photo tags."
      operationId: "updateEventContact"
      responses:
        "200":
          description: "An event contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventContact"
        "409":
          description: "Event already has a contact."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventContact"
        description: "The contact to set on the event.  If provided,\n`eventContactPermissions`\
          \ is used to update the event contact's\npermissions and its event photo\
          \ tags."
    delete:
      tags:
      - "Events"
      summary: "Removes an event contact."
      operationId: "deleteEventContact"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/event/{eventId}/contact/{contactId}/digital-rule:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/contactId"
    get:
      tags:
      - "Events"
      summary: "Retrieves the digital rules associated with the event contact."
      description: "Retrieves all of the digital rules that are associated with the\
        \ contact.\nIf the event or contact can't be found, returns a `404 Not Found`"
      operationId: "listEventContactDigitalRules"
      responses:
        "200":
          description: "A collection of the digital rules associated with the event\
            \ contact."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRuleCollection"
        "404":
          $ref: "#/components/responses/notFoundError"
    post:
      tags:
      - "Events"
      summary: "Creates a new digital rule and associates it with an event contact."
      description: ""
      operationId: "createEventContactDigitalRule"
      responses:
        "201":
          description: "Responds with the digital rule on success."
          headers:
            Content-Location:
              description: "The URL of the digital rule in the response body."
              schema:
                type: "string"
                format: "uri"
            Location:
              description: "The URL of the digital rule in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
  /brand/{brandId}/event/{eventId}/contact/{contactId}/digital-rule/{digitalRuleId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/contactId"
    - $ref: "#/components/parameters/digitalRuleId"
    get:
      tags:
      - "Events"
      summary: "Returns a digital rule for an event contact."
      operationId: "readEventContactDigitalRule"
      responses:
        "200":
          description: "The digital rule"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "404":
          $ref: "#/components/responses/notFoundError"
    put:
      tags:
      - "Events"
      summary: "Fully updates an event contact's digital rule."
      description: ""
      operationId: "updateEventContactDigitalRule"
      responses:
        "200":
          description: "The successfully updated digital rule"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
    delete:
      tags:
      - "Events"
      summary: "Removes digital rule from event contact."
      description: "Changes the status on the digital rule record identified by\n\
        digitalRuleId to `deleted`."
      operationId: "deleteEventContactDigitalRule"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/event/{eventId}/cover-photo:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Returns the cover photo for the event."
      operationId: "readEventCoverPhoto"
      responses:
        "200":
          description: "An event cover photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CoverPhoto"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Adds or updates a cover photo on an event."
      description: "You may add a cover photo to an event either by specifying the\
        \ `photoId`\nof an existing photo or uploading a new photo. In either case,\
        \ you must\nspecify the `focalPointPercentages` for the photo, as defined\
        \ in the\nrequest body (see below).\n\nWhen adding a cover photo using a `photoId`,\
        \ make the request using the\nstandard `application/vnd.shootproof+json` content\
        \ type. The body is\nsimply a JSON object, as defined by `CoverPhoto` below.\n\
        \nWhen uploading a new cover photo, you must use a content type of\n`multipart/mixed`,\
        \ specifying a `boundary`—which may be any consistent\nname— and including\
        \ exactly two parts in the request. The order of parts\ndoes not matter. One\
        \ part must be the JSON object represented as\n`application/vnd.shootproof+json`.\
        \ The other part must be the binary\nimage. The image part must have a `Content-Disposition`\
        \ header,\nspecifying the `filename`, as well as a `Content-Type` header.\n\
        \nFor example:\n\n```http\nPUT /brand/1000/event/1234/cover-photo HTTP/1.1\n\
        Content-Type: multipart/mixed; charset=utf-8; boundary=SP_BOUNDARY\nHost:\
        \ api.shootproof.com\nContent-Length: 406\n\n--SP_BOUNDARY\nContent-Type:\
        \ application/vnd.shootproof+json\n\n{\n    \"focalPointPercentages\": {\n\
        \        \"x\": 10,\n        \"y\": 10\n    }\n}\n\n--SP_BOUNDARY\nContent-Disposition:\
        \ attachment; filename=cover.jpg\nContent-Type: image/jpeg\n\n[binary data]\n\
        \n--SP_BOUNDARY--\n```"
      operationId: "addEventCoverPhoto"
      responses:
        "200":
          description: "Responds with the cover photo on success."
          headers:
            Content-Location:
              description: "The URL of the cover photo in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CoverPhoto"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/CoverPhoto"
    delete:
      tags:
      - "Events"
      summary: "Deletes a cover photo from an event."
      description: "Removes the cover photo from the event."
      operationId: "deleteEventCoverPhoto"
      responses:
        "204":
          description: "Successful deletion response."
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/event/{eventId}/digital-rule:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Retrieves the digital rules associated with the event."
      description: "Retrieves all of the digital rules that are associated with the\
        \ event.\nIf the event can't be found, returns a `404 Not Found`"
      operationId: "listDigitalRules"
      responses:
        "200":
          description: "A collection of the digital rules associated with the event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRuleCollection"
        "404":
          $ref: "#/components/responses/notFoundError"
    post:
      tags:
      - "Events"
      summary: "Creates a new digital rule and associates it with an event."
      description: ""
      operationId: "createEventDigitalRule"
      responses:
        "201":
          description: "Responds with the digital rule on success."
          headers:
            Content-Location:
              description: "The URL of the digital rule in hte response body."
              schema:
                type: "string"
                format: "uri"
            Location:
              description: "The URL of the digital rule in hte response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
  /brand/{brandId}/event/{eventId}/digital-rule/{digitalRuleId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/digitalRuleId"
    get:
      tags:
      - "Events"
      summary: "Returns a digital rule for an event."
      operationId: "readEventDigitalRule"
      responses:
        "200":
          description: "The digital rule"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "404":
          $ref: "#/components/responses/notFoundError"
    put:
      tags:
      - "Events"
      summary: "Fully updates an event's digital rule."
      description: ""
      operationId: "updateEventDigitalRule"
      responses:
        "200":
          description: "The successfully updated digital rule"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DigitalRule"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/DigitalRule"
    delete:
      tags:
      - "Events"
      summary: "Removes digital rule from event"
      description: "Changes the status on the digital rule record identified by\n\
        digitalRuleId to `deleted`."
      operationId: "deleteDigitalRule"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/event/{eventId}/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    post:
      tags:
      - "Events"
      summary: "Sends an email message to the contact for an event."
      description: "TBD"
      operationId: "createEventEmail"
      responses:
        "202":
          description: "Responds with the event on success."
          headers:
            Content-Location:
              description: "The URL of the event in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventEmail"
        description: "The event email object used to send an email message."
        required: true
  /brand/{brandId}/event/{eventId}/photo:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    get:
      tags:
      - "Events"
      summary: "Lists all event photos for the event."
      description: "Returns a list of all event photos for the event.\n\nTo get a\
        \ display URL for each photo in the collection, see\n`.items[n].displayUrl`.\n\
        \nTo get a URL for downloading the original image of each photo in the\ncollection,\
        \ see `.items[n].links.event-photo-original`.\n\nQuery string parameters may\
        \ be used to affect the response, including\npagination, sorting, and filtering.\n\
        \nAll photos are returned, regardless of any standard pagination values\n\
        that are included."
      operationId: "listEventPhotos"
      parameters:
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "searchName"
        in: "query"
        description: "Event photo filename name by which to filter results."
        schema:
          type: "string"
      - name: "filterPhotoId"
        in: "query"
        description: "Photo ID(s) by which to filter photos. Please note: if a processing\n\
          photo enters the `error` state, this filter will return those\nphotos. Normally,\
          \ photos in the `error` state are not returned in\nany photo view or listing,\
          \ so this functionality may be used to find\nout whether a photo encountered\
          \ errors during processing."
        style: "form"
        schema:
          type: "array"
          items:
            type: "integer"
          uniqueItems: true
      - name: "filterEventContactId"
        in: "query"
        description: "Combine with `filterFavorite`, `filterHidden`, `filterPhotoTag`\
          \ or\n`filterShare` filters to segment these filters by contact (i.e.,\n\
          only photos favorited by the event contact)."
        schema:
          type: "integer"
      - name: "filterFavorite"
        in: "query"
        description: "If provided and truthy, returns only photos that have been\n\
          favorited."
        schema:
          type: "boolean"
      - name: "filterHidden"
        in: "query"
        description: "If provided and truthy, returns only photos that have been marked\
          \ as\n\"hidden.\""
        schema:
          type: "boolean"
      - name: "filterPhotoTag"
        in: "query"
        description: "Tag(s) by which to filter photos."
        style: "form"
        schema:
          type: "array"
          items:
            type: "string"
            pattern: "^[\\d\\s\\w\\-]{1,30}$"
          uniqueItems: true
      - name: "filterShare"
        in: "query"
        description: "If provided and truthy, returns only photos that have been shared.\n\
          \n_**NOTE:** This is not yet implemented. If provided, the response\nwill\
          \ return zero results until this feature is implemented._"
        schema:
          type: "boolean"
      - name: "filterStatus"
        in: "query"
        description: "Return only photos matching a particular status category"
        schema:
          type: "string"
          enum:
          - "active"
          - "pending"
          - "error"
          - "deleted"
      - name: "filterVisitorEmail"
        in: "query"
        description: "Combine with `filterFavorite` or `filterShare` filters to segment\n\
          these filters by gallery visitor (i.e., only photos favorited by\nthis gallery\
          \ visitor)."
        schema:
          type: "string"
          format: "email"
      - name: "filterNotInAlbums"
        in: "query"
        description: "If provided and truthy, returns only photos that are not contained\n\
          within an album.\""
        schema:
          type: "boolean"
      - $ref: "#/components/parameters/preferHeader"
      - $ref: "#/components/parameters/preferParameter"
      - $ref: "#/components/parameters/rangeHeader"
      - $ref: "#/components/parameters/rangeParameter"
      responses:
        "200":
          description: "Event photos list response."
          headers:
            Accept-Ranges:
              description: "Indicates that this resource can respond to range requests\
                \ for\nthe given types of ranges."
              schema:
                type: "string"
                enum:
                - "items"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventPhotoCollection"
                - $ref: "#/components/schemas/EventPhotoCollectionMinimal"
        "206":
          description: "Event photos list partial response."
          headers:
            Content-Range:
              description: "Indicates the ranges included in this partial response."
              schema:
                type: "string"
            Preference-Applied:
              description: "Indicates the preference requested in the `Prefer` header\
                \ was\napplied to the response."
              schema:
                type: "string"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/EventPhotoCollection"
                - $ref: "#/components/schemas/EventPhotoCollectionMinimal"
    post:
      tags:
      - "Events"
      summary: "Creates a new photo within the event."
      description: "To upload new photos to the event:\n\n1. Make a `POST ` request\
        \ to the `.links.event-photo-upload-policy`\nrelationship on the photo collection\
        \ to generate an upload policy (see\nthe [photo upload policy endpoint\ndocumentation](#operation/createResourceEventPhotoUploadPolicy)).\n\
        \n2. Use the upload policy to `POST` the photo and `.postParams` to the\n\
        policy `.uploadUrl`. Be sure the `filename` parameter in the multipart\nform\
        \ submission is `photo.jpg` and not the original filename.\n\n3. Make a `POST`\
        \ request to the photo collection's `.links.self`\nrelationship (the endpoint\
        \ described here) to create the photo in the\nevent, using the client-generated\
        \ key and response body from the\n`.uploadUrl` response. The `name` in this\
        \ request should be the original\nfilename."
      operationId: "createResourceEventPhoto"
      responses:
        "202":
          description: "The successfully-created event photo."
          headers:
            Content-Location:
              description: "The URL to the resource represented in the body of the\
                \ response."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhoto"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "A conflict occurred, most likely due to an attempt to add\
            \ a photo to\nan archived event."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "424":
          description: "The method could not be performed on the resource because\
            \ the\nrequested action depended on another action and that action failed.\n\
            In the case of an attempt to create an event photo, this means the\nuploaded\
            \ photo could not be found, or nothing has been uploaded yet.\nPlease\
            \ refer to the [steps for uploading new photos to an\nevent](#operation/createResourceEventPhoto)."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "507":
          description: "Requested operation requires more storage space or would go\
            \ over an\nimposed limit. Check the `info.reason` property in the response\
            \ for\nmore details."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventPhotoInPost"
        description: "The event photo object to create."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Updates a batch of event photos."
      description: "Updates the provided properties on each of the given event photos\
        \ in the\ncollection.\n\nIf a property on an individual item is omitted, then\
        \ no change will be\nperformed on that property. If, however, the property\
        \ is provided and\nset to `null`, that property will be _unset_. Note that\
        \ some properties\nmay not be set to `null`."
      operationId: "batchUpdateEventPhotos"
      responses:
        "204":
          description: "Successful patch response."
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventPhotoCollectionInPatch"
        description: "The list of event photos to update."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Deletes a batch of event photos."
      description: "Deletes the given event photos in the submitted collection."
      operationId: "batchDeleteEventPhotos"
      responses:
        "204":
          description: "Successful deletion response."
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/BatchCollection"
        description: "The list of event photos to delete."
        required: true
  /brand/{brandId}/event/{eventId}/photo/upload-policy:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    post:
      tags:
      - "Events"
      summary: "Generates a photo upload policy for the event."
      description: "This returns a photo upload policy for an event, which may be\
        \ used to\nupload a photo by making a `POST` request to the policy `.uploadUrl`.\n\
        The `POST` request to the `.uploadUrl` must be a `multipart/form-data`\nupload\
        \ request, including as `form-data` parameters each of the\n`.postParams`\
        \ returned in the photo upload policy response.\n\nBe sure the `filename`\
        \ parameter in the multipart form submission is\n`photo.jpg` and not the original\
        \ filename.\n\nAdditionally, the photo upload policy response includes the\n\
        `.postParams.key` property, which contains the template variable\n`${random_folder}`.\
        \ This must be a random 32-character hexadecimal value\ngenerated by the client\
        \ and replaced before sending the request to the\n`.uploadUrl`. Also included\
        \ is the template variable `${filename}`,\nwhich MUST NOT be replaced."
      operationId: "createResourceEventPhotoUploadPolicy"
      responses:
        "200":
          description: "A photo upload policy generated for the event."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhotoUploadPolicy"
        "400":
          $ref: "#/components/responses/validationError"
        "507":
          description: "Requested operation requires more storage space or would go\
            \ over an\nimposed limit. Check the `info.reason` property in the response\
            \ for\nmore details."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /brand/{brandId}/event/{eventId}/photo/{eventPhotoId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventPhotoId"
    get:
      tags:
      - "Events"
      summary: "Returns a single event photo by ID."
      operationId: "readEventPhoto"
      responses:
        "200":
          description: "An event photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhoto"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Events"
      summary: "Fully updates an event photo."
      operationId: "updateEventPhoto"
      responses:
        "200":
          description: "The successfully-updated event photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhoto"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventPhotoInUpdate"
        description: "The event photo object to update."
        required: true
    patch:
      tags:
      - "Events"
      summary: "Partially updates an event photo."
      operationId: "partialUpdateEventPhoto"
      responses:
        "200":
          description: "The successfully-updated event photo."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventPhoto"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/EventPhotoInUpdate"
        description: "The event photo object to update. Only provide those properties\
          \ that\nneed updating."
        required: true
    delete:
      tags:
      - "Events"
      summary: "Removes an event photo."
      operationId: "deleteEventPhoto"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/event/{eventId}/photo/{eventPhotoId}/original:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    - $ref: "#/components/parameters/eventPhotoId"
    get:
      tags:
      - "Events"
      summary: "Redirects to a temporary URL where photo's original image can be\n\
        retrieved."
      operationId: "readEventPhotoOriginal"
      responses:
        "302":
          description: "See `Location` header value for download URL. This is a signed\
            \ URL\nthe studio may use to download the original photo. The download\
            \ URL\nexpires after 1 hour."
        "403":
          description: "Access to photo is forbidden."
        "404":
          description: "Photo does not exist."
  /brand/{brandId}/event/{eventId}/zip-bundle:
    parameters:
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/eventId"
    post:
      tags:
      - "Events"
      summary: "Create a new zip bundle link for event photos."
      description: "Generates a new zip bundle for event photos. If the request body\n\
        contains an array of photo IDs belonging to the event, the zip bundle\nwill\
        \ contain only those photos.\n\nIf a zip bundle already exists containing\
        \ the same photos, a new one\nwill not be generated but the existing zip bundle\
        \ will be returned and\nthe appropriate email will be re-sent to the studio\
        \ panel user or client\ngallery visitor."
      operationId: "createResourceEventZipBundle"
      responses:
        "202":
          description: "The request was valid and accepted and the zip bundle is being\n\
            created."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/ZipBundle"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/ZipBundleInPost"
  /brand/{brandId}/invoice:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Invoices"
      summary: "Lists all invoices for the current brand."
      description: "Returns a list of all invoices for the current brand. Query string\n\
        parameters may be used to affect the response, including pagination,\nsorting,\
        \ and filtering."
      operationId: "listInvoices"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "contactName"
          - "created"
          - "customInvoiceId"
          - "invoiceStatus"
          default: "customInvoiceId"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - name: "filterContactIds"
        in: "query"
        description: "The invoice client contact IDs by which to filter results."
        schema:
          type: "array"
          items:
            type: "integer"
          uniqueItems: true
      - name: "searchContactInfo"
        in: "query"
        description: "Customer name or email address by which to filter results."
        schema:
          type: "string"
      - name: "searchInvoiceStatus"
        in: "query"
        description: "The invoice status by which to filter results. To filter by\
          \ past\ndue invoices, pass the string `past_due` in this parameter."
        schema:
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid-in-full"
          - "canceled"
          - "archived"
          - "past_due"
      - name: "searchInvoiceItem"
        in: "query"
        description: "The name or description of invoice items by which to filter\
          \ results."
        schema:
          type: "string"
      - name: "searchCustomInvoiceId"
        in: "query"
        description: "The customer-facing invoice identifier by which to filter results."
        schema:
          type: "integer"
      - name: "filterExcludeLinkedToContract"
        in: "query"
        description: "Indicates that invoices linked to contract(s) should be excluded\n\
          from the results."
        schema:
          type: "integer"
      - name: "filterOrderId"
        in: "query"
        description: "**Note: this filter is accepted for testing purposes, but not\
          \ yet\nimplemented. All results will be returned.** The invoice order ID\
          \ by\nwhich to filter results."
        schema:
          type: "integer"
      - name: "filterHidden"
        in: "query"
        description: "Indicates whether or not hidden invoices should be included\
          \ in the\nresults. If not provided in the request both hidden and visible\
          \ invoices\nwill be returned."
        schema:
          type: "boolean"
      - name: "filterInvoiceGrouping"
        in: "query"
        description: "Indicates the grouping of invoices that should be returned.\n\
          \n**Note: All groups, excluding `canceled_hidden`, are NOT including hidden\
          \ invoices.\nThis filter will also override the `filterHidden` param.**"
        schema:
          type: "string"
          enum:
          - "all"
          - "awaiting_payment"
          - "overdue"
          - "paid"
          - "canceled_hidden"
      responses:
        "200":
          description: "Invoices list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceCollection"
    post:
      tags:
      - "Invoices"
      summary: "Creates a new invoice for the current brand."
      description: "TBD"
      operationId: "createInvoice"
      responses:
        "201":
          description: "The successfully-created invoice."
          headers:
            Location:
              description: "The URL to the newly-created invoice."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Invoice"
        description: "The invoice object to create."
        required: true
  /brand/{brandId}/invoice/discount-template:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Invoices"
      summary: "List invoice discount templates"
      operationId: "listResourceInvoiceDiscountTemplate"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "discountType"
          - "value"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      responses:
        "200":
          description: "A collection of invoice discount templates."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceDiscountTemplateCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Invoices"
      summary: "Create an invoice discount template"
      operationId: "createResourceInvoiceDiscountTemplate"
      responses:
        "201":
          description: "The new invoice discount template."
          headers:
            Location:
              description: "The URL to the new invoice discount template."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceDiscountTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscountTemplate"
        description: "The invoice discount template to create."
        required: true
  /brand/{brandId}/invoice/discount-template/{invoiceDiscountTemplateId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceDiscountTemplateId"
    get:
      tags:
      - "Invoices"
      summary: "Get an invoice discount template"
      operationId: "readResourceInvoiceDiscountTemplate"
      responses:
        "200":
          description: "An invoice discount template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceDiscountTemplate"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Invoices"
      summary: "Update an invoice discount template"
      operationId: "updateResourceInvoiceDiscountTemplate"
      responses:
        "200":
          description: "The updated invoice discount template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceDiscountTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscountTemplate"
        description: "The invoice discount template to update."
        required: true
    patch:
      tags:
      - "Invoices"
      summary: "Partially update an invoice discount template"
      operationId: "patchResourceInvoiceDiscountTemplate"
      responses:
        "200":
          description: "The updated invoice discount template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceDiscountTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscountTemplate"
        description: "The invoice discount template to update. Only provide those\
          \ properties\nthat need updating."
        required: true
    delete:
      tags:
      - "Invoices"
      summary: "Delete an invoice discount template"
      operationId: "deleteResourceInvoiceDiscountTemplate"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/invoice/item-template:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Invoices"
      summary: "Lists all invoice item templates for the current brand."
      description: "TBD"
      operationId: "listInvoiceItemTemplates"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "id"
          - "name"
          - "description"
          - "itemPrice"
          - "quantity"
          - "totalPrice"
          - "isTaxable"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "searchNameDescription"
        in: "query"
        description: "Search invoice item templates by the name and description fields."
        schema:
          type: "string"
      responses:
        "200":
          description: "Invoice item templates list response."
          content:
            application/vnd.shootproof+json:
              schema:
                description: "A collection of invoice item templates"
                allOf:
                - properties:
                    type:
                      description: "The model type for the list response object."
                      type: "string"
                      enum:
                      - "invoice-item-template-collection"
                    items:
                      type: "array"
                      items:
                        $ref: "#/components/schemas/InvoiceItemTemplate"
                - $ref: "#/components/schemas/List"
    post:
      tags:
      - "Invoices"
      summary: "Creates a new invoice item template for the current brand."
      description: "TBD"
      operationId: "createInvoiceItemTemplate"
      responses:
        "201":
          description: "The successfully-created invoice item template."
          headers:
            Location:
              description: "The URL to the newly-created invoice item template."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceItemTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceItemTemplate"
        description: "The invoice item template object to create."
        required: true
  /brand/{brandId}/invoice/item-template/{invoiceItemTemplateId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceItemTemplateId"
    get:
      tags:
      - "Invoices"
      summary: "Returns a single invoice item template by ID."
      description: "TBD"
      operationId: "readInvoiceItemTemplate"
      responses:
        "200":
          description: "An invoice item template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceItemTemplate"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Invoices"
      summary: "Fully updates an invoice item template."
      description: "TBD"
      operationId: "updateInvoiceItemTemplate"
      responses:
        "200":
          description: "The successfully-updated invoice item template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceItemTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceItemTemplate"
        description: "The invoice item template object to update."
        required: true
    patch:
      tags:
      - "Invoices"
      summary: "Partially updates an invoice item template."
      description: "TBD"
      operationId: "partialUpdateInvoiceItemTemplate"
      responses:
        "200":
          description: "The successfully-updated invoice item template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceItemTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceItemTemplate"
        description: "The invoice item template object to update. Only provide those\n\
          properties that need updating."
        required: true
    delete:
      tags:
      - "Invoices"
      summary: "Removes an invoice item template."
      description: "TBD"
      operationId: "deleteInvoiceItemTemplate"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/invoice/template:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Invoices"
      summary: "Lists all invoice templates for the current brand."
      description: "Returns a list of all invoice templates for the current brand.\
        \ Query\nstring parameters may be used to affect the response, including\n\
        pagination, sorting, and filtering of results."
      operationId: "listInvoiceTemplates"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "name"
          - "invoiceItemCount"
          - "created"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "searchName"
        in: "query"
        description: "Invoice template name by which to filter results."
        schema:
          type: "string"
      - name: "searchInvoiceItem"
        in: "query"
        description: "The name or description of invoice items by which to filter\
          \ results."
        schema:
          type: "string"
      responses:
        "200":
          description: "Invoice templates list response."
          content:
            application/vnd.shootproof+json:
              schema:
                description: "A collection of invoice templates."
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  properties:
                    type:
                      description: "The model type for the list response object."
                      type: "string"
                      enum:
                      - "invoice-template-collection"
                    items:
                      type: "array"
                      items:
                        description: "An invoice template as viewed from a collection."
                        type: "object"
                        required:
                        - "type"
                        - "links"
                        - "id"
                        - "name"
                        - "invoiceItemCount"
                        - "created"
                        properties:
                          type:
                            description: "The type of object represented."
                            type: "string"
                            enum:
                            - "invoice-template"
                          links:
                            $ref: "#/components/schemas/Links"
                          id:
                            description: "The identifier for this invoice template."
                            type: "integer"
                          name:
                            description: "The name of this invoice template."
                            type: "string"
                          invoiceItemCount:
                            description: "The number of invoice items on this invoice\n\
                              template."
                            type: "integer"
                          created:
                            description: "The creation date of this invoice template."
                            type: "string"
                            format: "date-time"
    post:
      tags:
      - "Invoices"
      summary: "Creates a new invoice template for the current brand."
      description: "TBD"
      operationId: "createInvoiceTemplate"
      responses:
        "201":
          description: "The successfully-created invoice template."
          headers:
            Location:
              description: "The URL to the newly-created invoice template."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceTemplate"
        description: "The invoice template object to create."
        required: true
  /brand/{brandId}/invoice/template/{invoiceTemplateId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceTemplateId"
    get:
      tags:
      - "Invoices"
      summary: "Returns a single invoice template by ID."
      description: "TBD"
      operationId: "readInvoiceTemplate"
      responses:
        "200":
          description: "An invoice template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Invoices"
      summary: "Fully updates an invoice template."
      description: "TBD"
      operationId: "updateInvoiceTemplate"
      responses:
        "200":
          description: "The successfully-updated invoice template."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "In certain cases, we respond with a `409 Conflict` HTTP response\
            \ if the\nstate of the invoice template does not allow the requested change.\n\
            Inspect the error response message for information about the conflict."
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceTemplate"
        description: "The invoice template object to update."
        required: true
    delete:
      tags:
      - "Invoices"
      summary: "Removes an invoice template."
      description: "TBD"
      operationId: "deleteInvoiceTemplate"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/invoice/template/{invoiceTemplateId}/discount:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceTemplateId"
    post:
      tags:
      - "Invoices"
      summary: "Apply a discount to an invoice template"
      operationId: "createResourceInvoiceTemplateDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The invoice discount to add to the invoice template."
        required: true
      responses:
        "200":
          description: "Responds with the invoice template on success."
          headers:
            Content-Location:
              description: "The URL of the invoice template in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "If the invoice template has the maximum number of allowed\
            \ discounts\napplied to it, then we respond with a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
    delete:
      tags:
      - "Invoices"
      summary: "Remove all discounts from an invoice template"
      operationId: "batchDeleteResourceInvoiceTemplateDiscount"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/invoice/template/{invoiceTemplateId}/discount/{invoiceDiscountId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceTemplateId"
    - $ref: "#/components/parameters/invoiceDiscountId"
    put:
      tags:
      - "Invoices"
      summary: "Update a discount on an invoice template"
      operationId: "updateResourceInvoiceTemplateDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The updated invoice template discount."
        required: true
      responses:
        "200":
          description: "Responds with the invoice template on success."
          headers:
            Content-Location:
              description: "The URL of the invoice template in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Invoices"
      summary: "Partially update a discount on an invoice template"
      operationId: "patchResourceInvoiceTemplateDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The invoice discount to update. Only provide those properties\n\
          that need updating."
        required: true
      responses:
        "200":
          description: "Responds with the invoice template on success."
          headers:
            Content-Location:
              description: "The URL of the invoice template in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplate"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
    delete:
      tags:
      - "Invoices"
      summary: "Remove a discount from an invoice template"
      operationId: "deleteResourceInvoiceTemplateDiscount"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/invoice/{invoiceId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    get:
      tags:
      - "Invoices"
      summary: "Returns a single invoice by ID."
      description: "TBD"
      operationId: "readInvoice"
      responses:
        "200":
          description: "An invoice"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Invoices"
      summary: "Fully updates an invoice."
      description: "TBD"
      operationId: "updateInvoice"
      responses:
        "200":
          description: "The successfully-updated invoice."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "In certain cases, we respond with a `409 Conflict` HTTP response\
            \ if the\nstate of the invoice does not allow the requested change. For\
            \ example,\nif the invoice is partially paid and the request attempts\
            \ to add a\ndiscount, we will respond accordingly. Inspect the error response\n\
            message for information about the conflict."
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Invoice"
        description: "The invoice object to update."
        required: true
    patch:
      tags:
      - "Invoices"
      summary: "Partially updates an invoice."
      description: "TBD"
      operationId: "partialUpdateInvoice"
      responses:
        "200":
          description: "The successfully-updated invoice."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              description: "An invoice representation for partial updates."
              type: "object"
              properties:
                invoiceStatus:
                  description: "The human-readable name of the current status of this\
                    \ invoice."
                  type: "string"
                  enum:
                  - "unpaid"
                  - "partially-paid"
                  - "paid-in-full"
                  - "canceled"
                  - "archived"
                brandThemeId:
                  description: "The identifier for the brand theme this invoice uses."
                  type: "integer"
                contactId:
                  description: "The identifier for the contact associated with this\
                    \ invoice."
                  type: "integer"
                emailAutomationGroupId:
                  description: "The identifier for the email automation group this\
                    \ invoice\nuses."
                  nullable: true
                  type: "integer"
                issueDate:
                  description: "The date on which this invoice was issued."
                  type: "string"
                  format: "date-time"
                acceptedPaymentTypes:
                  description: "An array of payment types this invoice accepts."
                  type: "array"
                  items:
                    description: "A string identifying a specific payment type."
                    type: "string"
                    enum:
                    - "cash-check"
                    - "credit-card"
                salesTaxPercent:
                  description: "A decimal number from 0-100, specifying the sales\
                    \ tax\npercentage."
                  type: "number"
                  minimum: 0
                  maximum: 100
                salesTaxTitle:
                  description: "A label to apply to the sales tax percent on the invoice\n\
                    when viewed by the client."
                  nullable: true
                  type: "string"
                languageCode:
                  description: "The Unicode CLDR language tag for the language used\
                    \ in this\ninvoice."
                  type: "string"
                paymentConfirmationText:
                  description: "A message sent to the client upon receipt of payment."
                  type: "string"
                notesToClient:
                  description: "Notes to display on the invoice for the client."
                  type: "string"
                isHidden:
                  description: "Whether or not the invoice is hidden"
                  type: "boolean"
        description: "The invoice object to update. Only provide those properties\
          \ that need\nupdating."
        required: true
    delete:
      tags:
      - "Invoices"
      summary: "Removes an invoice."
      description: "TBD"
      operationId: "deleteInvoice"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/invoice/{invoiceId}/contract/{contractId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    - $ref: "#/components/parameters/contractId"
    put:
      tags:
      - "Contracts"
      - "Invoices"
      summary: "Adds a linked contract to an invoice."
      description: "Links the given contract to the invoice."
      operationId: "addInvoiceContract"
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "404":
          $ref: "#/components/responses/notFoundError"
        "409":
          description: "If the invoice is linked to a different contract, then we\
            \ respond\nwith a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
      - "Contracts"
      - "Invoices"
      summary: "Deletes a linked contract from a invoice."
      description: "Removes the linked contract from the invoice."
      operationId: "deleteInvoiceContract"
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "404":
          $ref: "#/components/responses/notFoundError"
  /brand/{brandId}/invoice/{invoiceId}/credit-card:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    put:
      tags:
      - "Invoices"
      summary: "Adds an invoice credit card to an invoice."
      description: "If there is already a card on file for the invoice, this removes\
        \ the\nexisting card, replacing it with this."
      operationId: "addInvoiceCreditCard"
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceCreditCard"
        description: "The invoice credit card object to create."
        required: true
    patch:
      tags:
      - "Invoices"
      summary: "Partially updates an invoice credit card."
      description: "You may use `PATCH` to update the `emailAddress` or `enableAutoPay`\n\
        values for an invoice credit card on file.\n\nYou may not use `PATCH` on an\
        \ invoice credit card to update credit card\ndetails such as `nameOnCard`,\
        \ `cardNumber`, etc. These may only be\nupdated by using a `PUT` to add a\
        \ new card on file for the invoice."
      operationId: "partialUpdateInvoiceCreditCard"
      responses:
        "200":
          description: "The invoice for this invoice credit card."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              description: "Invoice credit card settings."
              type: "object"
              properties:
                emailAddress:
                  description: "The email address for the person making the payment."
                  type: "string"
                  format: "email"
                enableAutoPay:
                  description: "Whether auto-pay should be turned on for this credit\
                    \ card on\nthe given invoice."
                  type: "boolean"
        description: "The invoice credit card object to update. Only provide those\n\
          properties that new updating."
        required: true
    delete:
      tags:
      - "Invoices"
      summary: "Removes an invoice credit card."
      description: "TBD"
      operationId: "deleteInvoiceCreditCard"
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
  /brand/{brandId}/invoice/{invoiceId}/discount:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    post:
      tags:
      - "Invoices"
      summary: "Apply a discount to an invoice"
      description: "Discounts may be applied only to unpaid invoices, and only one\
        \ discount\nmay be applied at a time.\n\nWhen attempting to apply a discount\
        \ to an invoice, we will attempt to\nrebalance the installments on that invoice.\
        \ We do not attempt to modify an\ninstallment if it is marked as \"fixed,\"\
        \ however; we will only update\ninstallments that are percentage-based.\n\n\
        With this in mind, there are several constraints imposed, each of which\n\
        will response with a `409 Conflict` HTTP response, if encountered:\n\n* We\
        \ cannot apply a discount if it would cause the grand total to\n  become less\
        \ than the total of all fixed installments on the invoice.\n* We cannot apply\
        \ a discount if the invoice contains only fixed\n  installments, since we\
        \ cannot rebalance them.\n* We cannot apply a discount if doing so would cause\
        \ one or more\n  of the installments to become less than the minimum allowed\
        \ value\n  (`1.00`) when rebalanced.\n\nIf we do not encounter any of the\
        \ above conditions, then we can update the\npercentage-based installments\
        \ on the invoice without any problems."
      operationId: "createResourceInvoiceDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The invoice discount to add to the invoice."
        required: true
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "If the state of the invoice or any of its installments do\
            \ not allow\nthis discount to be applied, then we respond with a `409\
            \ Conflict`\nHTTP response. See the full description of this operation\
            \ for more\ndetails."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
    delete:
      tags:
      - "Invoices"
      summary: "Remove all discounts from an invoice"
      description: "When attempting to remove the discounts from an invoice, we will\
        \ attempt to\nrebalance the installments on that invoice. We do not attempt\
        \ to modify an\ninstallment if it is marked as \"fixed,\" however; we will\
        \ only update\ninstallments that are percentage-based."
      operationId: "batchDeleteResourceInvoiceDiscount"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        "409":
          description: "If the state of the invoice or any of its installments do\
            \ not allow\nthe discounts to be removed, then we respond with a `409\
            \ Conflict`\nHTTP response. See the full description of this operation\
            \ for more\ndetails."
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/invoice/{invoiceId}/discount/{invoiceDiscountId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    - $ref: "#/components/parameters/invoiceDiscountId"
    put:
      tags:
      - "Invoices"
      summary: "Update a discount on an invoice"
      description: "When attempting to update a discount on an invoice, we will attempt\
        \ to\nrebalance the installments on that invoice. We do not attempt to modify\
        \ an\ninstallment if it is marked as \"fixed,\" however; we will only update\n\
        installments that are percentage-based.\n\nWith this in mind, there are several\
        \ constraints imposed, each of which\nwill response with a `409 Conflict`\
        \ HTTP response, if encountered:\n\n* We cannot modify a discount if it would\
        \ cause the grand total to\n  become less than the total of all fixed installments\
        \ on the invoice.\n* We cannot modify a discount if the invoice contains only\
        \ fixed\n  installments, since we cannot rebalance them.\n* We cannot modify\
        \ a discount if doing so would cause one or more\n  of the installments to\
        \ become less than the minimum allowed value\n  (`1.00`) when rebalanced.\n\
        \nIf we do not encounter any of the above conditions, then we can update the\n\
        percentage-based installments on the invoice without any problems."
      operationId: "updateResourceInvoiceDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The updated invoice discount."
        required: true
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "If the state of the invoice or any of its installments do\
            \ not allow\nthis discount to be updated, then we respond with a `409\
            \ Conflict`\nHTTP response. See the full description of this operation\
            \ for more\ndetails."
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Invoices"
      summary: "Partially update a discount on an invoice"
      description: "When attempting to update a discount on an invoice, we will attempt\
        \ to\nrebalance the installments on that invoice. We do not attempt to modify\
        \ an\ninstallment if it is marked as \"fixed,\" however; we will only update\n\
        installments that are percentage-based.\n\nWith this in mind, there are several\
        \ constraints imposed, each of which\nwill response with a `409 Conflict`\
        \ HTTP response, if encountered:\n\n* We cannot modify a discount if it would\
        \ cause the grand total to\n  become less than the total of all fixed installments\
        \ on the invoice.\n* We cannot modify a discount if the invoice contains only\
        \ fixed\n  installments, since we cannot rebalance them.\n* We cannot modify\
        \ a discount if doing so would cause one or more\n  of the installments to\
        \ become less than the minimum allowed value\n  (`1.00`) when rebalanced.\n\
        \nIf we do not encounter any of the above conditions, then we can update the\n\
        percentage-based installments on the invoice without any problems."
      operationId: "patchResourceInvoiceDiscount"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceDiscount"
        description: "The invoice discount to update. Only provide those properties\n\
          that need updating."
        required: true
      responses:
        "200":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "If the state of the invoice or any of its installments do\
            \ not allow\nthis discount to be updated, then we respond with a `409\
            \ Conflict`\nHTTP response. See the full description of this operation\
            \ for more\ndetails."
        default:
          $ref: "#/components/responses/defaultError"
    delete:
      tags:
      - "Invoices"
      summary: "Remove a discount from an invoice"
      description: "When attempting to remove the discount from an invoice, we will\
        \ attempt to\nrebalance the installments on that invoice. We do not attempt\
        \ to modify an\ninstallment if it is marked as \"fixed,\" however; we will\
        \ only update\ninstallments that are percentage-based."
      operationId: "deleteResourceInvoiceDiscount"
      responses:
        "204":
          $ref: "#/components/responses/deleteSuccess"
        "409":
          description: "If the state of the invoice or any of its installments do\
            \ not allow\nthis discount to be removed, then we respond with a `409\
            \ Conflict`\nHTTP response. See the full description of this operation\
            \ for more\ndetails."
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/invoice/{invoiceId}/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    post:
      tags:
      - "Invoices"
      summary: "Sends an email message to the contact for an invoice."
      description: "TBD"
      operationId: "createInvoiceEmail"
      responses:
        "202":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceEmail"
        description: "The invoice email object used to send an email message."
        required: true
  /brand/{brandId}/invoice/{invoiceId}/payment:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    post:
      tags:
      - "Invoices"
      summary: "Creates a payment for an invoice."
      description: "TBD"
      operationId: "createInvoicePayment"
      responses:
        "202":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/transactionError"
        "402":
          description: "If using `creditCard` with a boolean value `true` and there\
            \ is no\ninvoice credit card on file, then we respond with a `402 Payment\n\
            Required` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "If the payment gateway has not been configured, then we respond\n\
            with a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
        description: "The invoice payment object to create."
        required: true
  /brand/{brandId}/invoice/{invoiceId}/refund:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/invoiceId"
    post:
      tags:
      - "Invoices"
      summary: "Creates a refund for an invoice."
      description: "TBD"
      operationId: "createInvoiceRefund"
      responses:
        "202":
          description: "Responds with the invoice on success."
          headers:
            Content-Location:
              description: "The URL of the invoice in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/transactionError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/InvoiceRefund"
        description: "The invoice refund object to create."
        required: true
  /brand/{brandId}/lab-catalog:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all lab catalogs for the brand."
      description: "Returns a list of all lab catalogs for the brand.\n\nQuery string\
        \ parameters may be used to affect the response, including\npagination, sorting,\
        \ and filtering."
      operationId: "listResourceLabCatalog"
      responses:
        "200":
          description: "Lab catalog list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single lab catalog object by ID."
      description: "Returns a single lab catalog object for the brand by id."
      operationId: "readLabCatalog"
      responses:
        "200":
          description: "A lab catalog object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalog"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/group:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    get:
      tags:
      - "Price Sheets"
      summary: "List all lab catalog groups for the lab catalog."
      description: "Returns a list of all lab catalog groups for the lab catalog.\n\
        \nQuery string parameters may be used to affect the response, including\n\
        pagination and sorting."
      operationId: "listResourceLabCatalogGroup"
      responses:
        "200":
          description: "Lab Catalog Group list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogGroupCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/group/{labCatalogGroupId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    - $ref: "#/components/parameters/labCatalogGroupId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a lab catalog group for the lab catalog."
      operationId: "readResourceLabCatalogGroup"
      responses:
        "200":
          description: "The lab catalog group"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogGroup"
        "404":
          $ref: "#/components/responses/notFoundError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/product:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    get:
      tags:
      - "Price Sheets"
      summary: "List all lab catalog products for the lab catalog."
      description: "Returns a list of all lab catalog products for the lab catalog.\n\
        \nQuery string parameters may be used to affect the response, including\n\
        pagination, sorting, and filtering."
      operationId: "listResourceLabCatalogProduct"
      parameters:
      - name: "filterIsBestseller"
        in: "query"
        description: "If provided and truthy, denotes that results should be filtered\
          \ to only\nbestsellers."
        schema:
          type: "boolean"
      - name: "filterLabCatalogGroupId"
        in: "query"
        description: "Group identifier by which to filter results."
        schema:
          $ref: "#/components/schemas/Id"
      - name: "filterGroupType"
        in: "query"
        description: "The type of group by which to filter the results."
        schema:
          type: "string"
          enum:
          - "prints"
          - "canvas"
          - "digitals"
          - "products"
          - "metals"
          - "fine-art"
          - "custom"
          - "packages"
      responses:
        "200":
          description: "Lab Catalog Products list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogProductCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/product/{labCatalogProductId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    - $ref: "#/components/parameters/labCatalogProductId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a lab catalog product for the lab catalog."
      operationId: "readResourceLabCatalogProduct"
      responses:
        "200":
          description: "The lab catalog product"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogProduct"
        "404":
          $ref: "#/components/responses/notFoundError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/shipping-option:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    get:
      tags:
      - "Price Sheets"
      summary: "List all lab catalog shipping options for the lab catalog."
      description: "Returns a list of all lab catalog shipping options for the lab\
        \ catalog.\n\nQuery string parameters may be used to affect the response,\
        \ including\npagination and sorting."
      operationId: "listResourceLabCatalogShippingOption"
      responses:
        "200":
          description: "Lab Catalog Shipping Option list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogShippingOptionCollection"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/lab-catalog/{labCatalogId}/shipping-option/{labCatalogShippingOptionId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/labCatalogId"
    - $ref: "#/components/parameters/labCatalogShippingOptionId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a lab catalog shipping option for the lab catalog."
      operationId: "readResourceLabCatalogShippingOption"
      responses:
        "200":
          description: "The lab catalog shipping option"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/LabCatalogShippingOption"
        "404":
          $ref: "#/components/responses/notFoundError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/mobile-app:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    post:
      tags:
      - "Events"
      summary: "Creates a mobile app."
      description: "TBD"
      operationId: "createMobileApp"
      responses:
        "201":
          description: "The sucessfully-created mobile app."
          headers:
            Location:
              description: "The URL to the newly-created mobile app."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/MobileApp"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/MobileApp"
        description: "The mobile app object to create."
        required: true
  /brand/{brandId}/notification:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Authenticated User"
      - "Other"
      summary: "List the authenticated user’s notifications"
      operationId: "listResourceNotification"
      parameters:
      - name: "filterDismissed"
        in: "query"
        description: "If the value is *truthy*, the response will list only dismissed\n\
          notifications. If the value is *falsy* (default), then the response\ncontains\
          \ only non-dismissed notifications."
        schema:
          type: "boolean"
          default: false
      responses:
        "200":
          description: "A collection of notifications."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/NotificationCollection"
  /brand/{brandId}/notification/{notificationId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/notificationId"
    get:
      tags:
      - "Authenticated User"
      - "Other"
      summary: "Get a notification"
      operationId: "readResourceNotification"
      responses:
        "200":
          description: "A notification."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Notification"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Authenticated User"
      - "Other"
      summary: "Update a notification"
      operationId: "updateResourceNotification"
      responses:
        "200":
          description: "The updated notification."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Notification"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        description: "A notification."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Notification"
    patch:
      tags:
      - "Authenticated User"
      - "Other"
      summary: "Partially update a notification"
      description: "Only provide those properties that you wish to update. All other\
        \ properties\nwill remain unchanged."
      operationId: "patchResourceNotification"
      responses:
        "200":
          description: "The updated notification."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Notification"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Notification"
        description: "The notification object to update. Only provide those properties\
          \ that need\nupdating."
        required: true
  /brand/{brandId}/order:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      x-beta: true
      tags:
      - "Orders"
      summary: "Lists all orders for the current brand."
      description: "Returns a list of all orders for the current brand. Query string\n\
        parameters may be used to affect the response, including pagination,\nsorting,\
        \ and filtering."
      operationId: "listOrders"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "created"
          - "customerName"
          - "eventName"
          - "grandTotal"
          default: "created"
      - $ref: "#/components/parameters/sortTypeDefaultDesc"
      - name: "filterOrderId"
        in: "query"
        description: "The order ID by which to filter results."
        schema:
          type: "integer"
      - name: "filterParentOrderId"
        in: "query"
        description: "The parent order ID by which to filter results."
        schema:
          type: "integer"
      - name: "filterEventId"
        in: "query"
        description: "The event ID by which to filter results."
        schema:
          type: "integer"
      - name: "searchCustomerName"
        in: "query"
        description: "The customer name by which to filter results."
        schema:
          type: "string"
      - name: "searchCustomerEmail"
        in: "query"
        description: "The customer email address by which to filter results."
        schema:
          type: "string"
      - name: "filterFulfillmentType"
        in: "query"
        description: "The order fulfillment type by which to filter results."
        schema:
          type: "string"
          enum:
          - "lab"
          - "self"
          - "digital"
      - name: "filterHasCustomerCrop"
        in: "query"
        description: "If provided and truthy, returns orders with customer submitted\
          \ crop\ndata."
        schema:
          type: "boolean"
      - name: "filterHasCustomerNotes"
        in: "query"
        description: "If provided and truthy, returns orders with customer submitted\
          \ notes."
        schema:
          type: "boolean"
      - name: "filterHasRetouchRequest"
        in: "query"
        description: "If provided and truthy, returns orders with a request\nfor retouching."
        schema:
          type: "boolean"
      - name: "filterOrderOrigin"
        in: "query"
        description: "Filter results by either customer or studio placed orders."
        schema:
          type: "string"
          enum:
          - "customer"
          - "studio"
      - name: "filterCombinedOrder"
        in: "query"
        description: "If provided and truthy, returns orders that are a combined order."
        schema:
          type: "boolean"
      - name: "filterOrderStatus"
        in: "query"
        description: "The order status ID by which to filter results."
        schema:
          type: "string"
      - name: "filterDigitalStatus"
        in: "query"
        description: "The digital status ID by which to filter results."
        schema:
          type: "string"
          enum:
          - "unsent-awaiting-studio"
          - "unsent-awaiting-payment"
          - "sent"
      - name: "filterLabStatus"
        in: "query"
        description: "The lab status ID by which to filter results."
        schema:
          type: "string"
          enum:
          - "pending-copy-of-originals"
          - "copying-originals"
          - "pending-studio-confirmation"
          - "submit-to-lab"
          - "submitted-to-lab"
          - "lab-received"
          - "lab-completed"
          - "canceled"
      - name: "filterPaymentStatus"
        in: "query"
        description: "The order payment status by which to filter results."
        schema:
          type: "string"
          enum:
          - "unpaid"
          - "partially-paid"
          - "paid"
      responses:
        "200":
          description: "Orders list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderCollection"
    post:
      x-beta: true
      tags:
      - "Orders"
      summary: "Creates a new order for the current brand."
      description: "Creates a new order, responding with the newly created object."
      operationId: "createOrder"
      responses:
        "201":
          description: "The successfully-created order."
          headers:
            Location:
              description: "The URL to the newly-created order."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Order"
        description: "The order object to create."
        required: true
  /brand/{brandId}/order/{orderId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/orderId"
    get:
      x-beta: true
      tags:
      - "Orders"
      summary: "Returns a single order by ID."
      description: "Returns an order with the given ID. If the ID is not found, returns\
        \ a\n`404` response."
      operationId: "readOrder"
      responses:
        "200":
          description: "An order"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Order"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      x-beta: true
      tags:
      - "Orders"
      summary: "Partially updates an order."
      description: "Updates the provided fields on the order, except those indicated\
        \ as\n`readOnly`."
      operationId: "partialUpdateOrder"
      responses:
        "200":
          description: "The successfully-updated order."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/OrderInUpdate"
        description: "The order object to update. Only provide those properties that\
          \ need\nupdating."
        required: true
    delete:
      x-beta: true
      tags:
      - "Orders"
      summary: "Removes an order."
      description: "Changes order status to `deleted`."
      operationId: "deleteOrder"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/order/{orderId}/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/orderId"
    post:
      x-beta: true
      tags:
      - "Orders"
      summary: "Sends an email message with the order receipt to a single recipient."
      description: "Sends an email receipt with details of the order, items, and\n\
        transaction(s) to a single recipient. This can be the order\n`customerEmail`,\
        \ or any other valid address. An optional message can be\nsent with the receipt."
      operationId: "createOrderEmail"
      responses:
        "202":
          description: "Responds with the order on success."
          headers:
            Content-Location:
              description: "The URL of the order in the response body."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              description: "An email message to a recipient with a receipt and details\
                \ about\ntheir order."
              type: "object"
              $ref: "#/components/schemas/BasicEmailMessage"
        description: "The order email object used to send an email message."
        required: true
  /brand/{brandId}/order/{orderId}/item:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/orderId"
    get:
      x-beta: true
      tags:
      - "Orders"
      summary: "Lists all order items for the identified order.."
      description: "Returns a list of all order items for the current order. Query\
        \ string\nparameters may be used to affect the response, including pagination,\n\
        sorting, and filtering."
      operationId: "listOrderItems"
      responses:
        "200":
          description: "Order item list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderItemCollection"
    post:
      x-beta: true
      tags:
      - "Orders"
      summary: "Creates a new order item for the current order."
      description: "Creates a new order item for each photoId present in the request,\
        \ responding with the newly created order item."
      operationId: "createOrderItem"
      responses:
        "200":
          description: "The order that owns the successfully-created order item(s)."
          headers:
            Content-Location:
              description: "The canonical URL of the order that the newly created\
                \ items belong to."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/OrderItem"
        description: "The order item object to create."
        required: true
  /brand/{brandId}/order/{orderId}/item/{orderItemId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/orderId"
    - $ref: "#/components/parameters/orderItemId"
    get:
      x-beta: true
      tags:
      - "Orders"
      summary: "Lists an order item identified by it id"
      description: "Returns a single order item by its ID"
      operationId: "getOrderItem"
      responses:
        "200":
          description: "Order item response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderItem"
    put:
      x-beta: true
      tags:
      - "Orders"
      summary: "Fully updates an order item."
      description: "TBD"
      operationId: "updateOrderItem"
      responses:
        "200":
          description: "The successfully-updated order item."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/OrderItem"
        description: "The order item object to update."
        required: true
    patch:
      x-beta: true
      tags:
      - "Orders"
      summary: "Partially updates an order item."
      description: "TBD"
      operationId: "partialUpdateOrderItem"
      responses:
        "200":
          description: "The successfully-updated order item."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/OrderItem"
        description: "The order item object to update. Only provide those properties\
          \ that\nneed updating."
        required: true
    delete:
      x-beta: true
      tags:
      - "Orders"
      summary: "Removes an order item."
      description: "TBD"
      operationId: "deleteOrderItem"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/order/{orderId}/payment:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/orderId"
    get:
      x-beta: true
      tags:
      - "Orders"
      summary: "Returns a list of client payments for an order."
      description: "Returns a list of client payments for an order."
      operationId: "listOrderPayment"
      responses:
        "200":
          description: "Order payment list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/OrderClientPaymentCollection"
  /brand/{brandId}/price-sheet:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all price sheets for the studio."
      description: "Returns a list of all price sheets for the studio. **Price sheets\
        \ are\nshared across all brands in the studio.**\n\nQuery string parameters\
        \ may be used to affect the response, including\npagination, sorting, and\
        \ filtering."
      operationId: "listPriceSheetsBrand"
      responses:
        "200":
          description: "Price sheet list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetCollection"
    post:
      tags:
      - "Price Sheets"
      summary: "Creates a new price sheet object for the current studio."
      description: "Creates a new Price Sheet.\n\nIn order to duplicate an existing\
        \ Price Sheet object, the request must\ncontain a `duplicatesId` parameter\
        \ containing the ID of the Price Sheet that\nis to be duplicated. In this\
        \ case, a request body is optional. When the\nrequest is submitted the request\
        \ body will be merged onto the duplicated\nresource, replacing any properties."
      operationId: "createPriceSheetBrand"
      parameters:
      - name: "duplicatesId"
        in: "query"
        description: "Price Sheet identifier to duplicate"
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "201":
          description: "The successfully created price sheet object."
          headers:
            Location:
              description: "The URL to the newly-created price sheet object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/PriceSheet"
  /brand/{brandId}/price-sheet/{priceSheetId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single price sheet object by ID."
      description: "Returns a specific price sheet for the studio using the price\
        \ sheet ID."
      operationId: "readPriceSheetBrand"
      responses:
        "200":
          description: "A price sheet object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Price Sheets"
      summary: "Partially updates a price sheet."
      description: "This endpoint is still under development. A mocked update response\
        \ will\nbe returned, but the updates will not actually be saved. Updates the\n\
        provided fields for the price sheet, exception those indicated as\n`readOnly`."
      operationId: "partialUpdatePriceSheetBrand"
      responses:
        "200":
          description: "The successfully updated price sheet."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheet"
        description: "The price sheet object to update. Only proviude those properties\
          \ that\nneed updating."
        required: true
    put:
      tags:
      - "Price Sheets"
      summary: "Fully updates a specific studio price sheet."
      description: "Updates the specified price sheet using the provided data with\
        \ the\nentire price sheet being overwritten."
      operationId: "updatePriceSheetBrand"
      responses:
        "200":
          description: "The successfully updated price sheet."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/PriceSheet"
    delete:
      tags:
      - "Price Sheets"
      summary: "Removes a single price sheet object from the studio."
      description: "Changes the status of a studio's price sheet to `deleted`."
      operationId: "deletePriceSheetBrand"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/price-sheet/{priceSheetId}/discount:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all discounts available for a price sheet."
      description: "Returns a list of all discounts available for the price sheet.\
        \ Query\nstring parameters may be used to affect the response, including\n\
        pagination, sorting, and filtering."
      operationId: "listPriceSheetDiscounts"
      responses:
        "200":
          description: "Price sheet discounts list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetDiscountCollection"
  /brand/{brandId}/price-sheet/{priceSheetId}/discount/{priceSheetDiscountId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - name: "priceSheetDiscountId"
      in: "path"
      description: "The pricesheet discount identifier."
      required: true
      schema:
        type: "integer"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single price sheet discount object by ID."
      description: "Returns a specific price sheet discount using the ID of the discount."
      operationId: "readPriceSheetDiscount"
      responses:
        "200":
          description: "A price sheet discount object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetDiscountCollection/allOf/0/properties/items/items"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/price-sheet/{priceSheetId}/event:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Events"
      - "Price Sheets"
      summary: "Lists all events which have been linked to the price sheet."
      description: "Returns a list of all events linked to the price sheet. Query\
        \ string\nparameters may be used to affect the response, including pagination,\n\
        sorting, and filtering."
      operationId: "listPriceSheetEvent"
      responses:
        "200":
          description: "List of Events that are associated with the given PriceSheetId."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EventCollection"
  /brand/{brandId}/price-sheet/{priceSheetId}/group:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all groups for the price sheet."
      description: "Returns a list of all Groups for the Price Sheet."
      operationId: "listPriceSheetGroups"
      responses:
        "200":
          description: "Price Sheet Group list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroupCollection"
    post:
      tags:
      - "Price Sheets"
      summary: "Create a Price Sheet Group"
      description: "Creates a new Price Sheet Group object for the current studio."
      operationId: "createResourcePriceSheetGroup"
      responses:
        "201":
          description: "The successfully-created Price Sheet Group object."
          headers:
            Location:
              description: "The URL to the newly-created Price Sheet Group object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroup"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetGroup"
    patch:
      tags:
      - "Price Sheets"
      summary: "Updates a batch of Price Sheet Groups."
      description: "Updates the provided properties on each of the given groups in\
        \ the\ncollection.\n\nIf a property on an individual item is omitted, then\
        \ no change will be\nperformed on that property. If, however, the property\
        \ is provided and\nset to `null`, that property will be _unset_. Note that\
        \ some properties\nmay not be set to `null`."
      operationId: "batchUpdateResourcePriceSheetGroup"
      responses:
        "200":
          description: "Price Sheet Group list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroupCollection"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetGroupCollectionInPatch"
        description: "The list of groups to update."
        required: true
  /brand/{brandId}/price-sheet/{priceSheetId}/group/{priceSheetGroupId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetGroupId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single Price Sheet Group object by ID."
      description: "Returns a specific Price Sheet Group using the ID of the group."
      operationId: "readPriceSheetGroup"
      responses:
        "200":
          description: "A Price Sheet Group object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroup"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Price Sheets"
      summary: "Fully updates a specific Price Sheet Group."
      description: "Updates the specified Price Sheet Group using the provided data\
        \ with the\nentire item being overwritten."
      operationId: "updateResourcePriceSheetGroup"
      responses:
        "200":
          description: "The successfully updated Price Sheet Group."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroup"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetGroup"
        description: "The price sheet group object to update."
        required: true
    patch:
      tags:
      - "Price Sheets"
      summary: "Partially updates a Price Sheet Group."
      description: "Updates a Price Sheet Group with only the provided fields being\
        \ updated."
      operationId: "partialUpdatePriceSheetGroup"
      responses:
        "200":
          description: "The successfully updated Price Sheet Group."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetGroup"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetGroup"
        description: "The price sheet group object to partially update."
        required: true
    delete:
      tags:
      - "Price Sheets"
      summary: "Removes a Price Sheet Group."
      description: "Removes a specific Group from the Price Sheet."
      operationId: "deleteResourcePriceSheetGroup"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/price-sheet/{priceSheetId}/group/{priceSheetGroupId}/subgroup:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetGroupId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all subgroups for the price sheet group."
      description: "Returns a list of all subgroups for the price sheet group."
      operationId: "listPriceSheetSubgroups"
      responses:
        "200":
          description: "Price sheet subgroup list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetSubgroupCollection"
    post:
      tags:
      - "Price Sheets"
      summary: "Create a price sheet subgroup"
      description: "Creates a new price sheet subgroup object for the current studio."
      operationId: "createResourcePriceSheetSubgroup"
      responses:
        "201":
          description: "The successfully-created price sheet subgroup object."
          headers:
            Location:
              description: "The URL to the newly-created price sheet subgroup object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetSubgroup"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetSubgroup"
    patch:
      tags:
      - "Price Sheets"
      summary: "Updates a batch of price sheet subgroups."
      description: "Updates the provided properties on each of the given subgroups\
        \ in the\ncollection.\n\nIf a property on an individual item is omitted, then\
        \ no change will be\nperformed on that property. If, however, the property\
        \ is provided and\nset to `null`, that property will be _unset_. Note that\
        \ some properties\nmay not be set to `null`."
      operationId: "batchUpdateResourcePriceSheetSubgroup"
      responses:
        "200":
          description: "Price sheet subgroup list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetSubgroupCollection"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetSubgroupCollectionInPatch"
        description: "The collection of subgroups to update."
        required: true
  /brand/{brandId}/price-sheet/{priceSheetId}/group/{priceSheetGroupId}/subgroup/{priceSheetSubgroupId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetGroupId"
    - $ref: "#/components/parameters/priceSheetSubgroupId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single price sheet subgroup object by ID."
      description: "Returns a specific price sheet subgroup using the ID of the subgroup."
      operationId: "readPriceSheetSubgroup"
      responses:
        "200":
          description: "A price sheet subgroup object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetSubgroup"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Price Sheets"
      summary: "Partially updates a specific price sheet subgroup object."
      description: "Updates the specified price sheet subgroup using the provided\
        \ data\nwith the specified properties being overwritten."
      operationId: "partialUpdatePriceSheetSubgroup"
      responses:
        "200":
          description: "The successfully-updated price sheet subgroup."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetSubgroup"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetSubgroup"
            example:
              type: "price-sheet-subgroup"
              name: "A subgroup!"
              displayOrder: 4
    delete:
      tags:
      - "Price Sheets"
      summary: "Removes a single price sheet subgroup object from the price sheet."
      description: "Removes the specified subgroup from the price sheet."
      operationId: "deleteResourcePriceSheetSubgroup"
      responses:
        "204":
          description: "Successful deletion response."
        "409":
          description: "Subgroup containing items cannot be deleted."
  /brand/{brandId}/price-sheet/{priceSheetId}/item:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      summary: "List items on a price sheet"
      operationId: "listResourcePriceSheetItem"
      parameters:
      - name: "filterPriceSheetGroupId"
        in: "query"
        description: "Group identifier by which to filter results."
        schema:
          $ref: "#/components/schemas/Id"
      - name: "filterPriceSheetSubgroupId"
        in: "query"
        description: "Subgroup identifier by which to filter results."
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "A list of items on a price sheet."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetItemCollection"
    post:
      tags:
      - "Price Sheets"
      summary: "Create an item on a price sheet"
      description: "To create an item on a price sheet, post either a standard item,\
        \ a digital\nitem, a package containing standard or digital items, or a collection\n\
        representation that may contain all three types.\n\nIf posting a collection,\
        \ each item in the collection will result in a new\nitem created on the price\
        \ sheet; this can be a handy way to create a batch\nof price sheet items in\
        \ a single request."
      operationId: "createResourcePriceSheetItem"
      responses:
        "201":
          description: "The new price sheet item or a list of price sheet items if\
            \ a collection\nwas submitted."
          headers:
            Location:
              description: "If a single price sheet item is returned, the `Location`\
                \ header will\nbe present and contain the URL to the new price sheet\
                \ item."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/PriceSheetItem"
                - $ref: "#/components/schemas/PriceSheetItemDigital"
                - $ref: "#/components/schemas/PriceSheetItemCollection"
                - $ref: "#/components/schemas/PriceSheetItemPackage"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        description: "A standard price sheet item, a digital item, a package item,\
          \ or a\ncollection of price sheet items."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/PriceSheetItem"
              - $ref: "#/components/schemas/PriceSheetItemDigital"
              - $ref: "#/components/schemas/PriceSheetItemCollection"
              - $ref: "#/components/schemas/PriceSheetItemPackage"
    patch:
      tags:
      - "Price Sheets"
      summary: "Update a batch of items on a price sheet"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can update multiple price sheet items at once."
      operationId: "batchUpdateResourcePriceSheetItem"
      responses:
        "200":
          description: "A list of price sheet items."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetItemCollection"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetItemCollection"
        description: "The list of price sheet items to update."
        required: true
    delete:
      tags:
      - "Price Sheets"
      summary: "Delete a batch of items on a price sheet"
      description: "Using a [batch operation](https://developer.shootproof.com/guide/batch-operations/),\n\
        you can delete multiple events at once."
      operationId: "batchDeleteResourcePriceSheetItem"
      responses:
        "204":
          description: "The specified price sheet items were deleted."
        "400":
          $ref: "#/components/responses/validationError"
        "409":
          description: "One or more items in the batch could not be deleted."
          $ref: "#/components/responses/conflictError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetItemCollection"
        description: "The list of price sheet items to delete."
        required: true
  /brand/{brandId}/price-sheet/{priceSheetId}/item/{priceSheetItemId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetItemId"
    get:
      tags:
      - "Price Sheets"
      summary: "Get an item from a price sheet"
      operationId: "readResourcePriceSheetItem"
      responses:
        "200":
          description: "A price sheet item."
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/PriceSheetItem"
                - $ref: "#/components/schemas/PriceSheetItemDigital"
                - $ref: "#/components/schemas/PriceSheetItemPackage"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Price Sheets"
      summary: "Partially update an item on a price sheet"
      operationId: "patchResourcePriceSheetItem"
      responses:
        "200":
          description: "The updated price sheet item."
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/PriceSheetItem"
                - $ref: "#/components/schemas/PriceSheetItemDigital"
                - $ref: "#/components/schemas/PriceSheetItemPackage"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        description: "The price sheet item to update. Only provide those properties\
          \ that need\nupdating."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/PriceSheetItem"
              - $ref: "#/components/schemas/PriceSheetItemDigital"
              - $ref: "#/components/schemas/PriceSheetItemPackage"
    put:
      tags:
      - "Price Sheets"
      summary: "Update an item on a price sheet"
      operationId: "updateResourcePriceSheetItem"
      responses:
        "200":
          description: "The updated price sheet item."
          content:
            application/vnd.shootproof+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/PriceSheetItem"
                - $ref: "#/components/schemas/PriceSheetItemDigital"
                - $ref: "#/components/schemas/PriceSheetItemPackage"
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
      requestBody:
        description: "The price sheet item to update."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/PriceSheetItem"
              - $ref: "#/components/schemas/PriceSheetItemDigital"
              - $ref: "#/components/schemas/PriceSheetItemPackage"
    delete:
      tags:
      - "Price Sheets"
      summary: "Remove an item from a price sheet"
      operationId: "deleteResourcePriceSheetItem"
      responses:
        "204":
          description: "The resource was successfully deleted."
        "409":
          description: "Item could not be deleted."
          $ref: "#/components/responses/conflictError"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/price-sheet/{priceSheetId}/item/{priceSheetItemId}/child-item/{priceSheetChildItemId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetItemId"
    - name: "priceSheetChildItemId"
      in: "path"
      description: "The price sheet child item identifier."
      required: true
      schema:
        type: "integer"
    delete:
      tags:
      - "Price Sheets"
      summary: "Remove a child item from a price sheet item"
      operationId: "deleteResourcePriceSheetChildItem"
      responses:
        "204":
          description: "The resource was successfully deleted."
        "409":
          description: "If attempting to delete the last child item for the item,\
            \ then we respond\nwith a `409 Conflict` response."
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/defaultError"
  /brand/{brandId}/price-sheet/{priceSheetId}/item/{priceSheetItemId}/image:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetItemId"
    post:
      tags:
      - "Price Sheets"
      summary: "Creates a new price sheet item image object."
      description: "Creates a new price sheet item image object."
      operationId: "createPriceSheetItemImage"
      responses:
        "201":
          description: "The successfully-created price sheet item image object."
          headers:
            Location:
              description: "The URL to the newly-created price sheet item image object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetElementImage"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          multipart/mixed:
            schema:
              $ref: "#/components/schemas/PriceSheetElementImage"
            example: "--SP_BOUNDARY\nContent-Type: application/vnd.shootproof+json\n\
              \n{\n    \"type\": \"price-sheet-element-image\",\n    \"displayOrder\"\
              : 1\n}\n\n--SP_BOUNDARY\nContent-Disposition: attachment; filename=image.jpg\n\
              Content-Type: image/jpeg\n\n[binary data]\n\n--SP_BOUNDARY--"
    patch:
      tags:
      - "Price Sheets"
      summary: "Updates a batch of price sheet item images."
      description: "Updates the provided properties on each of the given price sheet\
        \ item images in the\ncollection.\n\nIf a property on an individual item is\
        \ omitted, then no change will be\nperformed on that property. If, however,\
        \ the property is provided and\nset to `null`, that property will be _unset_.\
        \ Note that some properties\nmay not be set to `null`."
      operationId: "batchUpdateResourcePriceSheetItemImage"
      responses:
        "200":
          description: "Price Sheet Item Image list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetElementImageCollection"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetElementImageCollectionInPatch"
        description: "The collection of price sheet items images to update."
        required: true
  /brand/{brandId}/price-sheet/{priceSheetId}/item/{priceSheetItemId}/image/{priceSheetItemImageId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetItemId"
    - name: "priceSheetItemImageId"
      in: "path"
      description: "The price sheet item image identifier."
      required: true
      schema:
        type: "integer"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single price sheet item image object by ID."
      description: "Returns a specific price sheet item image using the ID of the\
        \ image."
      operationId: "readPriceSheetItemImage"
      responses:
        "200":
          description: "A price sheet item image object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetElementImage"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Price Sheets"
      summary: "Partially updates a specific price sheet item image object."
      description: "Updates the specified price sheet item image using the provided\
        \ data\nwith the specified properties being overwritten."
      operationId: "partialUpdatePriceSheetItemImage"
      responses:
        "200":
          description: "The successfully-updated price sheet item image."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetElementImage"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetElementImage"
            example:
              type: "price-sheet-element-image"
              displayOrder: 4
    delete:
      tags:
      - "Price Sheets"
      summary: "Removes a single price sheet item image object."
      description: "Deletes the price sheet item image object from the item."
      operationId: "deletePriceSheetItemImage"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/price-sheet/{priceSheetId}/shipping-option:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      summary: "Lists all custom shipping options for the price sheet."
      description: "Returns a list of all Shipping Options for the Price Sheet."
      operationId: "listPriceSheetShippingOptions"
      responses:
        "200":
          description: "Price Sheet Shipping Option list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetShippingOptionCollection"
    post:
      tags:
      - "Price Sheets"
      summary: "Create a Price Sheet Shipping Option"
      description: "Creates a new Price Sheet Shipping Option object for the current\
        \ studio."
      operationId: "createResourcePriceSheetShippingOption"
      responses:
        "201":
          description: "The successfully-created Price Sheet Shipping Option object."
          headers:
            Location:
              description: "The URL to the newly-created Price Sheet Shipping Option\
                \ object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetShippingOption"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/PriceSheetShippingOption"
  /brand/{brandId}/price-sheet/{priceSheetId}/shipping-option/{priceSheetShippingOptionId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/priceSheetId"
    - $ref: "#/components/parameters/priceSheetShippingOptionId"
    get:
      tags:
      - "Price Sheets"
      summary: "Returns a single Price Sheet Shipping Option object by ID."
      description: "Returns a specific Price Sheet Shipping Option using the ID of\
        \ the option."
      operationId: "readPriceSheetShippingOption"
      responses:
        "200":
          description: "A Price Sheet Shipping Option object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetShippingOption"
        default:
          $ref: "#/components/responses/defaultError"
    delete:
      tags:
      - "Price Sheets"
      summary: "Removes a Price Sheet Shipping Option."
      description: "Removes a specific Shipping Option from the Price Sheet."
      operationId: "deleteResourcePriceSheetShippingOption"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/tax-profile:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Brands"
      summary: "List a brand's tax profiles"
      operationId: "listResourceTaxProfile"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      responses:
        "200":
          description: "Brand tax profiles list response."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - properties:
                    type:
                      enum:
                      - "tax-profile-collection"
                    items:
                      title: "Tax Profile"
                      type: "array"
                      items:
                        $ref: "#/components/schemas/TaxProfile"
    post:
      tags:
      - "Brands"
      summary: "Create a tax profile"
      description: "A tax profile represents a set of options for collecting tax on\
        \ orders and invoices. For example, the tax rate,\nits application to shipping\
        \ and digital charges, and an optional breakdown can be specified. These options\
        \ work in\nconjunction with the `taxMethod` on a brand to calculate tax for\
        \ an order or invoice line item."
      operationId: "createResourceTaxProfileBrand"
      responses:
        "201":
          description: "The new tax profile."
          headers:
            Location:
              description: "The URL to the new tax profile."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/TaxProfile"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/TaxProfile"
  /brand/{brandId}/tax-profile/{taxProfileId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    - $ref: "#/components/parameters/taxProfileId"
    get:
      tags:
      - "Brands"
      summary: "Get a tax profile"
      operationId: "readResourceTaxProfile"
      responses:
        "200":
          description: "A tax profile"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/TaxProfile"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Brands"
      summary: "Update a tax profile"
      description: "Updates the specified tax profile using the provided data with\
        \ the\nentire tax profile being overwritten."
      operationId: "updateResourceTaxProfile"
      responses:
        "200":
          description: "The tax profile."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/TaxProfile"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/TaxProfile"
    delete:
      tags:
      - "Brands"
      summary: "Delete a tax profile"
      operationId: "deleteResourceTaxProfile"
      responses:
        "204":
          description: "Successful deletion response."
  /brand/{brandId}/watermark:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/brandId"
    get:
      tags:
      - "Brands"
      summary: "Lists all watermarks for the brand."
      description: "Returns a list of all watermarks for the brand. Query string parameters\n\
        may be used to affect the response, including pagination, sorting, and\nfiltering."
      operationId: "listWatermarks"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "sortBy"
        in: "query"
        description: "The property by which items returned should be sorted."
        schema:
          type: "string"
          enum:
          - "created"
          - "name"
          default: "name"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      - name: "searchName"
        in: "query"
        description: "A string with which to filter watermarks by name."
        schema:
          type: "integer"
      responses:
        "200":
          description: "Watermarks list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/WatermarkCollection"
  /dpa:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Other"
      summary: "Returns a resource containing links to view a blank Data Processing\n\
        Addendum document."
      operationId: "listDpa"
      responses:
        "200":
          description: "A DPA collection."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/DpaCollection"
        default:
          $ref: "#/components/responses/defaultError"
    post:
      tags:
      - "Other"
      summary: "Creates a new signed Data Processing Addendum document."
      operationId: "createDpa"
      responses:
        "201":
          description: "The successfully-created DPA."
          headers:
            Location:
              description: "The URL to the newly-created DPA."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Dpa"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Dpa"
        description: "The DPA object to create."
        required: true
  /dpa/{dpaId}:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/dpaId"
    get:
      tags:
      - "Other"
      summary: "Returns a signed Data Processing Addendum document by ID."
      operationId: "readDpa"
      responses:
        "200":
          description: "A signed DPA document."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Dpa"
        default:
          $ref: "#/components/responses/defaultError"
  /email/curated-automation-group:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Email"
      summary: "List ShootProof-curated email automation groups"
      operationId: "listResourceCuratedEmailAutomationGroup"
      responses:
        "200":
          description: "Email automation groups curated by ShootProof."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CuratedEmailAutomationGroupCollection"
  /email/curated-automation-group/{emailAutomationGroupId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/emailAutomationGroupId"
    get:
      tags:
      - "Email"
      summary: "Get a ShootProof-curated email automation group"
      operationId: "readResourceCuratedEmailAutomationGroup"
      responses:
        "200":
          description: "Email automation group curated by ShootProof."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/CuratedEmailAutomationGroup"
        "404":
          $ref: "#/components/responses/notFoundError"
    post:
      tags:
      - "Email"
      summary: "Copy a ShootProof-curated email automation group"
      description: "Following the semantics of the [HTTP COPY method](https://tools.ietf.org/html/rfc4918#section-9.8),\n\
        this will copy the ShootProof-curated email automation group identified\n\
        by the request URI to the brand email automation group collection\nidentified\
        \ by the URI in the `Destination` header (e.g.,\n`https://api.shootproof.com/studio/brand/123/email/automation-group`)."
      operationId: "copyResourceCuratedEmailAutomationGroup"
      parameters:
      - name: "method"
        in: "query"
        description: "The HTTP method overloading this `POST` request."
        required: true
        schema:
          type: "string"
          enum:
          - "COPY"
      - name: "Destination"
        in: "header"
        description: "The URI of the brand email automation group collection where\
          \ a new\nemail automation group based on this ShootProof-curated email automation\n\
          group should be created."
        required: true
        schema:
          type: "string"
          format: "uri"
          example: "https://api.shootproof.com/studio/brand/123/email/automation-group"
      responses:
        "201":
          description: "The new email automation group."
          headers:
            Location:
              description: "The URL to the new email automation group."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailAutomationGroup"
        "403":
          $ref: "#/components/responses/forbiddenError"
        "404":
          $ref: "#/components/responses/notFoundError"
        "409":
          $ref: "#/components/responses/conflictError"
  /email/template-type:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Email"
      summary: "Get a list of email template types"
      operationId: "listResourceEmailTemplateType"
      responses:
        "200":
          description: "Email template types"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailTemplateTypeCollection"
  /email/template-type/{emailTemplateTypeId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - name: "emailTemplateTypeId"
      in: "path"
      description: "An email template type identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    get:
      tags:
      - "Email"
      summary: "Returns an email template type"
      description: "If the `resourceType` and `resourceId` query string parameters\
        \ are present\nin the request, the variables within the properties of the\
        \ `defaults` will\nbe replaced with appropriate values for the specified resource.\
        \ This is\nprovided for convenience to allow the studio user to view an email\
        \ template\nas it might appear when sent to their clients."
      operationId: "readResourceEmailTemplateType"
      parameters:
      - name: "resourceType"
        in: "query"
        description: "Identifies the resource type for the given `resourceId`. If\
          \ no\n`resourceId` is provided, then only the system default values are\n\
          returned.\n\nThe `resourceType` must be valid for the template type requested."
        schema:
          type: "string"
          enum:
          - "contract"
          - "event"
          - "event-album"
          - "invoice"
          - "mobile-app"
          - "order"
      - name: "resourceId"
        in: "query"
        description: "The identifier of the `resourceType` that you wish to use when\n\
          replacing variables in the system default values. If no `resourceType`\n\
          is provided, then only the system default values are returned."
        schema:
          $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "An email template type"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailTemplateType"
        default:
          $ref: "#/components/responses/defaultError"
  /feedback:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    post:
      tags:
      - "Other"
      summary: "Creates a new feedback entry."
      description: "Posts feedback for a particular product, with an optional rating\
        \ or\nmessage."
      operationId: "createFeedback"
      responses:
        "204":
          description: "Indicates that the feedback was submitted successfully."
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Feedback"
        description: "The feedback object to create."
        required: true
  /language:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Other"
      summary: "Get a list of ShootProof supported languages"
      operationId: "listResourceLanguage"
      responses:
        "200":
          description: "Supported languages."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - properties:
                    type:
                      enum:
                      - "language-collection"
                      example: "language-collection"
                    items:
                      title: "Language"
                      type: "array"
                      items:
                        type: "object"
                        required:
                        - "type"
                        - "code"
                        - "name"
                        properties:
                          type:
                            allOf:
                            - $ref: "#/components/schemas/Type"
                            - enum:
                              - "language"
                          code:
                            description: "The language code."
                            type: "string"
                            example: "en_US"
                          name:
                            description: "The language name."
                            type: "string"
                            example: "English (US)"
  /me:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Authenticated User"
      summary: "Get the authenticated user"
      operationId: "readResourceMe"
      responses:
        "200":
          description: "The authenticated user."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        default:
          $ref: "#/components/responses/defaultError"
  /me/signature:
    parameters:
    - $ref: "#/components/parameters/authentication"
    put:
      tags:
      - "Authenticated User"
      summary: "Add a signature for the authenticated user"
      description: "After [creating a signature](#operation/createResourceSignature),\
        \ you can\nattach that signature to the authenticated user using this resource\
        \ with a\n`PUT` request."
      operationId: "updateResourceMeSignature"
      responses:
        "200":
          description: "The signature was successfully attached to the authenticated\
            \ user."
          headers:
            Content-Location:
              description: "The URL to the resource represented in the body of the\
                \ response."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              type: "object"
              properties:
                signatureId:
                  allOf:
                  - $ref: "#/components/schemas/Id"
                  - description: "The signature identifier."
        description: "An object containing the signature ID for the signature you\
          \ wish to\nattach to the authenticated user."
        required: true
    delete:
      tags:
      - "Authenticated User"
      summary: "Remove the authenticated user’s signature"
      description: "If you need to remove a user’s signature, you may send a `DELETE`\
        \ request\nto this resource to detach their signature.\n\nPlease note, this\
        \ does not completely delete the signature if, for example,\nit has already\
        \ been used to sign a contract, etc. Everything signed with\nthe signature\
        \ before it was removed will remained signed with that signature."
      operationId: "deleteResourceMeSignature"
      responses:
        "200":
          description: "The authenticated user’s signature was successfully detached\
            \ from the\nuser."
          headers:
            Content-Location:
              description: "The URL to the resource represented in the body of the\
                \ response."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
  /plan/music:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all music plans available for the current studio."
      description: "Returns a list of all music plans available for the current studio."
      operationId: "listResourceMusicPlan"
      responses:
        "200":
          description: "Music plan list response."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - description: "A collection of music plans available for the studio."
                  properties:
                    type:
                      description: "The model type for the list response object."
                      type: "string"
                      enum:
                      - "studio-music-plan-collection"
                    items:
                      title: "Music Plan"
                      type: "array"
                      items:
                        $ref: "#/components/schemas/Studio/properties/musicPlan"
                - $ref: "#/components/schemas/List"
  /playlist:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "Lists all music playlists for the studio."
      description: "Returns a list of all music playlists for the studio. **Playlists\
        \ are\nshared across all brands in the studio.**\n\nQuery string parameters\
        \ may be used to affect the response, including\npagination, sorting, and\
        \ filtering."
      operationId: "listResourcePlaylist"
      responses:
        "200":
          description: "Music playlists list response."
          content:
            application/vnd.shootproof+json:
              schema:
                description: "A collection of music playlists."
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  properties:
                    type:
                      description: "The type of object represented."
                      type: "string"
                      enum:
                      - "playlist-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      description: "An array of music playlists."
                      type: "array"
                      items:
                        title: "A music playlist."
                        description: "A studio music playlist."
                        type: "object"
                        required:
                        - "type"
                        - "name"
                        properties:
                          type:
                            description: "The type of object represented."
                            type: "string"
                            enum:
                            - "playlist"
                          id:
                            allOf:
                            - $ref: "#/components/schemas/Id"
                            - readOnly: true
                          name:
                            description: "The playlist name."
                            type: "string"
                          isEditable:
                            description: "Flag indicating whether the playlist is\
                              \ editable by the studio. Playlists created by the studio\
                              \ have a\ntrue value here, playlists created by the\
                              \ system (ie: featured playlists) are false. If this\
                              \ value is false,\nthe playlist can be neither edited\
                              \ or deleted by the studio via the API."
                            type: "boolean"
                            readOnly: true
                          songCount:
                            description: "The number of songs appearing in the playlist."
                            type: "integer"
                            readOnly: true
                          created:
                            description: "The creation date of this playlist."
                            type: "string"
                            format: "date-time"
                            readOnly: true
    post:
      tags:
      - "Music"
      summary: "Creates a new playlist for the studio."
      description: "Creates a new music playlists for the studio. **Playlists are\n\
        shared across all brands in the studio.**\n\nThe songs will be ordered in\
        \ the playlist according to their order in the `songs` request property."
      operationId: "createResourcePlaylist"
      responses:
        "200":
          description: "Music playlist response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Playlist"
      requestBody:
        description: "The playlist."
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Playlist"
  /playlist/{playlistId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - name: "playlistId"
      in: "path"
      description: "The playlist identifier."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    get:
      tags:
      - "Music"
      summary: "Returns a single playlist by ID."
      description: "Returns a Playlist with the given ID. If the ID is not found,\
        \ returns a\n`404` response."
      operationId: "readResourcePlaylist"
      responses:
        "200":
          description: "A Playlist"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Playlist"
        default:
          $ref: "#/components/responses/defaultError"
    patch:
      tags:
      - "Music"
      summary: "Updates a playlist for the studio."
      description: "Updates a Playlist for the studio. **Playlists are\nshared across\
        \ all brands in the studio.**\n\nAll songs on the Playlist will be overwritten\
        \ with values in the `songs` property of the request.\n\nThe songs will be\
        \ ordered in the playlist according to their order in the `songs` request\
        \ property."
      operationId: "patchResourcePlaylist"
      responses:
        "200":
          description: "Music playlist response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/paths/~1playlist/post/requestBody"
    delete:
      tags:
      - "Music"
      summary: "Deletes a single playlist by ID."
      description: "Deletes a Playlist with the given ID. If the ID is not found,\
        \ returns a\n`404` response."
      operationId: "deleteResourcePlaylist"
      responses:
        "204":
          description: "Successful deletion response."
        "400":
          $ref: "#/components/responses/validationError"
        default:
          $ref: "#/components/responses/defaultError"
  /price-sheet:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Price Sheets"
      deprecated: true
      summary: "Lists all price sheets for the studio."
      description: "This operation is deprecated. Consider using\n`/brand/{brandId}/price-sheet`\
        \ instead.\n\nReturns a list of all price sheets for the studio. **Price sheets\
        \ are\nshared across all brands in the studio.**\n\nQuery string parameters\
        \ may be used to affect the response, including\npagination, sorting, and\
        \ filtering."
      operationId: "listPriceSheets"
      responses:
        "200":
          description: "Price sheets list response."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheetCollection"
    post:
      tags:
      - "Price Sheets"
      deprecated: true
      summary: "Creates a new price sheet object for the current studio."
      description: "This operation is deprecated. Consider using\n`/brand/{brandId}/price-sheet`\
        \ instead.\n\nCreates a new price sheet for the studio. **Price sheets are\
        \ shared\nacross all brands in the studio.**"
      operationId: "createPriceSheet"
      responses:
        "201":
          description: "The successfully-created price sheet object."
          headers:
            Location:
              description: "The URL to the newly-created price sheet object."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/PriceSheet"
  /price-sheet/{priceSheetId}:
    x-internal: true
    parameters:
    - $ref: "#/components/parameters/authentication"
    - $ref: "#/components/parameters/priceSheetId"
    get:
      tags:
      - "Price Sheets"
      deprecated: true
      summary: "Returns a single price sheet object by ID."
      description: "This operation is deprecated. Consider using\n`/brand/{brandId}/price-sheet`\
        \ instead.\n\nReturns a specific price sheet for the studio using the price\
        \ sheet ID."
      operationId: "readPriceSheet"
      responses:
        "200":
          description: "A price sheet object."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        default:
          $ref: "#/components/responses/defaultError"
    put:
      tags:
      - "Price Sheets"
      deprecated: true
      summary: "Fully updates a specific studio price sheet."
      description: "This operation is deprecated. Consider using\n`/brand/{brandId}/price-sheet`\
        \ instead.\n\nUpdates the specified price sheet using the provided data with\
        \ the\nentire price sheet being overwritten."
      operationId: "updatePriceSheet"
      responses:
        "200":
          description: "The successfully updated price sheet."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/PriceSheet"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        $ref: "#/components/requestBodies/PriceSheet"
    delete:
      tags:
      - "Price Sheets"
      deprecated: true
      summary: "Removes a single price sheet object from the studio."
      description: "This operation is deprecated. Consider using\n`/brand/{brandId}/price-sheet`\
        \ instead.\n\nChanges the status of a studio's price sheet to `deleted`."
      operationId: "deletePriceSheet"
      responses:
        "204":
          description: "Successful deletion response."
  /referral/email:
    parameters:
    - $ref: "#/components/parameters/authentication"
    post:
      tags:
      - "Email"
      summary: "Send an email message to refer others to ShootProof"
      operationId: "createResourceReferralEmail"
      responses:
        "202":
          description: "On success, we respond with a collection of email messages\
            \ sent."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/EmailCollection"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              allOf:
              - required:
                - "recipientEmails"
              - $ref: "#/components/schemas/BasicEmailMessage"
        required: true
  /shorturl:
    parameters:
    - $ref: "#/components/parameters/authentication"
    post:
      tags:
      - "Other"
      summary: "Shorten a URL for social sharing"
      operationId: "createResourceShorturl"
      responses:
        "200":
          description: "The shortened URL."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Shorturl"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Shorturl"
        description: "The URL to shorten."
        required: true
  /signature:
    parameters:
    - $ref: "#/components/parameters/authentication"
    post:
      tags:
      - "Authenticated User"
      - "Contracts"
      - "Other"
      summary: "Create a signature"
      operationId: "createResourceSignature"
      responses:
        "201":
          description: "The newly-created signature."
          headers:
            Location:
              description: "The URL to the newly-created signature."
              schema:
                type: "string"
                format: "uri"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Signature"
        "400":
          $ref: "#/components/responses/validationError"
      requestBody:
        content:
          application/vnd.shootproof+json:
            schema:
              $ref: "#/components/schemas/Signature"
        description: "The signature to create."
        required: true
  /signature/{signatureId}:
    parameters:
    - $ref: "#/components/parameters/authentication"
    - name: "Accept"
      in: "header"
      description: "Optionally, you may provide an `Accept` header with a value of\n\
        `image/svg+xml` to be redirected to an SVG representation of the\nsignature."
      required: false
      schema:
        type: "string"
        enum:
        - "application/vnd.shootproof+json"
        - "image/svg+xml"
    get:
      tags:
      - "Authenticated User"
      - "Contracts"
      - "Other"
      summary: "Get a signature"
      operationId: "readResourceSignature"
      responses:
        "200":
          description: "The signature."
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/Signature"
            image/svg+xml:
              schema:
                title: "A signature represented as an SVG image."
                type: "string"
              examples:
                svg:
                  summary: "A signature represented as an SVG image."
                  value: "<svg viewBox=\"0 0 430 150\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\
                    >\n  <path stroke=\"black\" stroke-width=\"2\" fill=\"none\" shape-rendering=\"\
                    auto\" stroke-linejoin=\"round\" d=\"M125.5,66 L125.5,66 L126.5,66\
                    \ L127.5,66 L127.5,66 L128.5,66 L129.5,66 L129.5,66 L129.5,66\
                    \ L130.5,66 L130.5,66 L130.5,66 L131.5,66 L131.5,66 L132.5,65\
                    \ L132.5,65 L132.5,65 L132.5,65\"></path>\n</svg>"
        default:
          $ref: "#/components/responses/defaultError"
  /song:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all songs"
      description: "Beware, URLs can exceed the 2048 character limit imposed by some\
        \ browsers. A POST version of\nthis endpoint is provided for such cases.\n\
        \nAcross categories, filters are added. So, if a style and a theme are selected,\
        \ matching songs\nmust match the theme and the style. Within categories, filters\
        \ are applied with an OR operator.\nSo, if multiple styles and themes are\
        \ selected, matching songs must match at least one of the\nstyles and at least\
        \ one of the themes."
      operationId: "listResourceSongGet"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - name: "filterArtist"
        in: "query"
        description: "Filter items returned by artist. Available values can be found\
          \ at `/song/artist`. If\nmore than one value is present, matching songs\
          \ will have at least one of the given\nvalues."
        schema:
          type: "array"
          items:
            type: "string"
          nullable: true
      - name: "filterTheme"
        in: "query"
        description: "Filter items returned by theme. Available values can be found\
          \ at `/song/theme`. If\nmore than one value is present, matching songs will\
          \ have at least one of the given\nvalues."
        schema:
          type: "array"
          items:
            type: "string"
          nullable: true
      - name: "filterMood"
        in: "query"
        description: "Filter items returned by mood. Available values can be found\
          \ at `/song/mood`. If\nmore than one value is present, matching songs will\
          \ have at least one of the given\nvalues."
        schema:
          type: "array"
          items:
            type: "string"
          nullable: true
      - name: "filterPlan"
        in: "query"
        description: "Filter items returned by Music Plan. Available values can be\
          \ found at `/song/plan`."
        schema:
          type: "string"
          nullable: true
      - name: "filterStyle"
        in: "query"
        description: "Filter items returned by style. Available values can be found\
          \ at `/song/style`. If\nmore than one value is present, matching songs will\
          \ have at least one of the given\nvalues."
        schema:
          type: "array"
          items:
            type: "string"
          nullable: true
      - name: "filterInstrument"
        in: "query"
        description: "Filter items returned by instrument. Available values can be\
          \ found at `/song/instrument`. If\nmore than one value is present, matching\
          \ songs will have at least one of the given values."
        schema:
          type: "array"
          items:
            type: "string"
          nullable: true
      - name: "filterDurationMax"
        in: "query"
        description: "Filter items having a maximum duration of _."
        schema:
          type: "integer"
          nullable: true
      - name: "filterDurationMin"
        in: "query"
        description: "Filter items having a minimum duration of _."
        schema:
          type: "integer"
          nullable: true
      - name: "filterTempo"
        in: "query"
        description: "Filter items matching tempo."
        schema:
          type: "string"
          enum:
          - "fast"
          - "slow"
          - "medium"
          nullable: true
      - name: "filterIsInstrumental"
        in: "query"
        description: "Filter items matching isInstrumental."
        schema:
          type: "boolean"
      - name: "searchTitle"
        in: "query"
        description: "String matching a complete word/phrase found in the song's title\
          \ field."
        schema:
          type: "string"
          nullable: true
      - name: "searchArtist"
        in: "query"
        description: "String partially matching search of artist names."
        schema:
          type: "string"
          nullable: true
      - name: "searchLyrics"
        in: "query"
        description: "String matching a complete word/phrase found in the song's lyrics\
          \ field.\n\nIf `searchTitle` is present in the request, results will contain\
          \ songs having either a\nmatching `searchTitle` or `searchLyrics`"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "A collection of songs"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/SongCollection"
    post:
      tags:
      - "Music"
      summary: "List all songs"
      description: "This is a POST request because the combined values of filter parameters\
        \ can exceed the max\nsupported URL length of 2048 characters.\n\nAcross categories,\
        \ filters are added. So, if a style and a theme are selected, matching songs\n\
        must match the theme and the style. Within categories, filters are applied\
        \ with an OR operator.\nSo, if multiple styles and themes are selected, matching\
        \ songs must match at least one of the\nstyles and at least one of the themes."
      operationId: "listResourceSong"
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/rows"
      - $ref: "#/components/parameters/sortTypeDefaultAsc"
      requestBody:
        description: "A song search request"
        required: true
        content:
          application/vnd.shootproof+json:
            schema:
              title: "Song search"
              description: "The song search parameters."
              type: "object"
              properties:
                type:
                  description: "The type of object represented"
                  type: "string"
                  enum:
                  - "song-collection"
                links:
                  $ref: "#/components/schemas/Links"
                filterArtist:
                  description: "Filter items returned by artist. Available values\
                    \ can be found at `/song/artist`. If\nmore than one value is present,\
                    \ matching songs will have at least one of the given\nvalues."
                  type: "array"
                  items:
                    type: "string"
                  nullable: true
                filterTheme:
                  description: "Filter items returned by theme. Available values can\
                    \ be found at `/song/theme`. If\nmore than one value is present,\
                    \ matching songs will have at least one of the given\nvalues."
                  type: "array"
                  items:
                    type: "string"
                  nullable: true
                filterMood:
                  description: "Filter items returned by mood. Available values can\
                    \ be found at `/song/mood`. If\nmore than one value is present,\
                    \ matching songs will have at least one of the given\nvalues."
                  type: "array"
                  items:
                    type: "string"
                  nullable: true
                filterPlan:
                  description: "Filter items returned by Music Plan. Available values\
                    \ can be found at `/song/plan`."
                  type: "string"
                  nullable: true
                filterStyle:
                  description: "Filter items returned by style. Available values can\
                    \ be found at `/song/style`. If\nmore than one value is present,\
                    \ matching songs will have at least one of the given\nvalues."
                  type: "array"
                  items:
                    type: "string"
                  nullable: true
                filterInstrument:
                  description: "Filter items returned by instrument. Available values\
                    \ can be found at `/song/instrument`.\nIf more than one value\
                    \ is present, matching songs will have at least one of the given\
                    \ values."
                  type: "array"
                  items:
                    type: "string"
                  nullable: true
                filterDurationMax:
                  description: "Filter items having a maximum duration of _."
                  type: "integer"
                  nullable: true
                filterDurationMin:
                  description: "Filter items having a minimum duration of _."
                  type: "integer"
                  nullable: true
                filterTempo:
                  description: "Filter items matching tempo."
                  type: "string"
                  enum:
                  - "fast"
                  - "slow"
                  - "medium"
                  nullable: true
                filterIsInstrumental:
                  description: "Filter items matching isInstrumental."
                  type: "boolean"
                searchTitle:
                  description: "String matching a complete word/phrase found in the\
                    \ song's title field."
                  type: "string"
                  nullable: true
                searchArtist:
                  description: "String partially matching search of artist names."
                  type: "string"
                  nullable: true
                searchLyrics:
                  description: "String matching a complete word/phrase found in the\
                    \ song's lyrics field.\n\nIf `searchTitle` is present in the request,\
                    \ results will contain songs having either a\nmatching `searchTitle`\
                    \ or `searchLyrics`"
                  type: "string"
                  nullable: true
      responses:
        "200":
          description: "A collection of songs"
          content:
            application/vnd.shootproof+json:
              schema:
                $ref: "#/components/schemas/SongCollection"
  /song/artist:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song artists. Response items can be used as a `filterArtist`\
        \ value\nin the `/song`"
      operationId: "listResourceSongArtist"
      responses:
        "200":
          description: "A collection of song artists."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song artists"
                  description: "A collection of song artists."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-artist-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song artist"
                      type: "array"
                      items:
                        description: "A song artist"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-artist"
                          value:
                            type: "string"
  /song/instrument:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song instruments. Response items can be used as a `filterInstrument`\
        \ value\nin the `/song`."
      operationId: "listResourceSongInstrument"
      responses:
        "200":
          description: "A collection of song instruments."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song instruments"
                  description: "A collection of song instruments."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-instrument-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song instrument"
                      type: "array"
                      items:
                        description: "A song instrument"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-instrument"
                          value:
                            type: "string"
  /song/mood:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song moods. Response items can be used as a `filterMood`\
        \ value\nin the `/song`"
      operationId: "listResourceSongMood"
      responses:
        "200":
          description: "A collection of song moods."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song moods"
                  description: "A collection of song moods."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-mood-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song mood"
                      type: "array"
                      items:
                        description: "A song mood"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-mood"
                          value:
                            type: "string"
  /song/plan:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song Music Plans. Response items can be used as a `filterPlan`\
        \ value\nin the `/song`"
      operationId: "listResourceSongPlan"
      responses:
        "200":
          description: "A collection of song Music Plans."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song Music Plans"
                  description: "A collection of song Music Plans."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-plan-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song Music Plan"
                      type: "array"
                      items:
                        description: "A song Music Plan"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-plan"
                          value:
                            type: "string"
  /song/style:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song styles. Response items can be used as a `filterStyle`\
        \ value\nin the `/song`"
      operationId: "listResourceSongStyle"
      responses:
        "200":
          description: "A collection of song styles."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song styles"
                  description: "A collection of song styles."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-style-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song style"
                      type: "array"
                      items:
                        description: "A song style"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-style"
                          value:
                            type: "string"
  /song/theme:
    parameters:
    - $ref: "#/components/parameters/authentication"
    get:
      tags:
      - "Music"
      summary: "List all song themes. Response items can be used as a `filterTheme`\
        \ value\nin the `/song`"
      operationId: "listResourceSongTheme"
      responses:
        "200":
          description: "A collection of song themes."
          content:
            application/vnd.shootproof+json:
              schema:
                allOf:
                - $ref: "#/components/schemas/List"
                - type: "object"
                  title: "Collection of song themes"
                  description: "A collection of song themes."
                  properties:
                    type:
                      type: "string"
                      enum:
                      - "song-theme-collection"
                    links:
                      $ref: "#/components/schemas/Links"
                    items:
                      title: "Song theme"
                      type: "array"
                      items:
                        description: "A song theme"
                        type: "object"
                        properties:
                          type:
                            type: "string"
                            enum:
                            - "song-theme"
                          value:
                            type: "string"
